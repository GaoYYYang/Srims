#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Srims.Tools.DataImport
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SrimsV0.4.28")]
	public partial class SrimsV4DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSubjectFirstLevel_Old(SubjectFirstLevel_Old instance);
    partial void UpdateSubjectFirstLevel_Old(SubjectFirstLevel_Old instance);
    partial void DeleteSubjectFirstLevel_Old(SubjectFirstLevel_Old instance);
    partial void InsertSubjectSecondLevel_Old(SubjectSecondLevel_Old instance);
    partial void UpdateSubjectSecondLevel_Old(SubjectSecondLevel_Old instance);
    partial void DeleteSubjectSecondLevel_Old(SubjectSecondLevel_Old instance);
    partial void InsertSystemSetting_Old(SystemSetting_Old instance);
    partial void UpdateSystemSetting_Old(SystemSetting_Old instance);
    partial void DeleteSystemSetting_Old(SystemSetting_Old instance);
    partial void InsertNoticeText_Old(NoticeText_Old instance);
    partial void UpdateNoticeText_Old(NoticeText_Old instance);
    partial void DeleteNoticeText_Old(NoticeText_Old instance);
    partial void InsertLog_Old(Log_Old instance);
    partial void UpdateLog_Old(Log_Old instance);
    partial void DeleteLog_Old(Log_Old instance);
    partial void InsertCount_Old(Count_Old instance);
    partial void UpdateCount_Old(Count_Old instance);
    partial void DeleteCount_Old(Count_Old instance);
    partial void InsertUserRole_Old(UserRole_Old instance);
    partial void UpdateUserRole_Old(UserRole_Old instance);
    partial void DeleteUserRole_Old(UserRole_Old instance);
    partial void InsertProject_Old(Project_Old instance);
    partial void UpdateProject_Old(Project_Old instance);
    partial void DeleteProject_Old(Project_Old instance);
    partial void InsertProjectMember_Old(ProjectMember_Old instance);
    partial void UpdateProjectMember_Old(ProjectMember_Old instance);
    partial void DeleteProjectMember_Old(ProjectMember_Old instance);
    partial void InsertContract_Old(Contract_Old instance);
    partial void UpdateContract_Old(Contract_Old instance);
    partial void DeleteContract_Old(Contract_Old instance);
    partial void InsertDocument_Old(Document_Old instance);
    partial void UpdateDocument_Old(Document_Old instance);
    partial void DeleteDocument_Old(Document_Old instance);
    partial void InsertProjectRank_Old(ProjectRank_Old instance);
    partial void UpdateProjectRank_Old(ProjectRank_Old instance);
    partial void DeleteProjectRank_Old(ProjectRank_Old instance);
    partial void InsertProjectSupportField_Old(ProjectSupportField_Old instance);
    partial void UpdateProjectSupportField_Old(ProjectSupportField_Old instance);
    partial void DeleteProjectSupportField_Old(ProjectSupportField_Old instance);
    partial void InsertProjectSupportSubField_Old(ProjectSupportSubField_Old instance);
    partial void UpdateProjectSupportSubField_Old(ProjectSupportSubField_Old instance);
    partial void DeleteProjectSupportSubField_Old(ProjectSupportSubField_Old instance);
    partial void InsertProjectInfo_Type_Old(ProjectInfo_Type_Old instance);
    partial void UpdateProjectInfo_Type_Old(ProjectInfo_Type_Old instance);
    partial void DeleteProjectInfo_Type_Old(ProjectInfo_Type_Old instance);
    partial void InsertFundDescend_Old(FundDescend_Old instance);
    partial void UpdateFundDescend_Old(FundDescend_Old instance);
    partial void DeleteFundDescend_Old(FundDescend_Old instance);
    partial void InsertProjectInfo_Fund_Old(ProjectInfo_Fund_Old instance);
    partial void UpdateProjectInfo_Fund_Old(ProjectInfo_Fund_Old instance);
    partial void DeleteProjectInfo_Fund_Old(ProjectInfo_Fund_Old instance);
    partial void InsertFundAllocation_Old(FundAllocation_Old instance);
    partial void UpdateFundAllocation_Old(FundAllocation_Old instance);
    partial void DeleteFundAllocation_Old(FundAllocation_Old instance);
    partial void InsertVoucherItemHardware_Old(VoucherItemHardware_Old instance);
    partial void UpdateVoucherItemHardware_Old(VoucherItemHardware_Old instance);
    partial void DeleteVoucherItemHardware_Old(VoucherItemHardware_Old instance);
    partial void InsertVoucherItemOversea_Old(VoucherItemOversea_Old instance);
    partial void UpdateVoucherItemOversea_Old(VoucherItemOversea_Old instance);
    partial void DeleteVoucherItemOversea_Old(VoucherItemOversea_Old instance);
    partial void InsertVoucherItemIn_Old(VoucherItemIn_Old instance);
    partial void UpdateVoucherItemIn_Old(VoucherItemIn_Old instance);
    partial void DeleteVoucherItemIn_Old(VoucherItemIn_Old instance);
    partial void InsertVoucherItemOut_Old(VoucherItemOut_Old instance);
    partial void UpdateVoucherItemOut_Old(VoucherItemOut_Old instance);
    partial void DeleteVoucherItemOut_Old(VoucherItemOut_Old instance);
    partial void InsertAccountBookNumberCount_Old(AccountBookNumberCount_Old instance);
    partial void UpdateAccountBookNumberCount_Old(AccountBookNumberCount_Old instance);
    partial void DeleteAccountBookNumberCount_Old(AccountBookNumberCount_Old instance);
    partial void InsertPayPlanItem_Old(PayPlanItem_Old instance);
    partial void UpdatePayPlanItem_Old(PayPlanItem_Old instance);
    partial void DeletePayPlanItem_Old(PayPlanItem_Old instance);
    partial void InsertFundMember_Old(FundMember_Old instance);
    partial void UpdateFundMember_Old(FundMember_Old instance);
    partial void DeleteFundMember_Old(FundMember_Old instance);
    partial void InsertDepartment_Old(Department_Old instance);
    partial void UpdateDepartment_Old(Department_Old instance);
    partial void DeleteDepartment_Old(Department_Old instance);
    partial void InsertAnnouncement_Old(Announcement_Old instance);
    partial void UpdateAnnouncement_Old(Announcement_Old instance);
    partial void DeleteAnnouncement_Old(Announcement_Old instance);
    partial void InsertBase_Old(Base_Old instance);
    partial void UpdateBase_Old(Base_Old instance);
    partial void DeleteBase_Old(Base_Old instance);
    partial void InsertExpert_Old(Expert_Old instance);
    partial void UpdateExpert_Old(Expert_Old instance);
    partial void DeleteExpert_Old(Expert_Old instance);
    partial void InsertUser_Old(User_Old instance);
    partial void UpdateUser_Old(User_Old instance);
    partial void DeleteUser_Old(User_Old instance);
    partial void InsertVoucher_Old(Voucher_Old instance);
    partial void UpdateVoucher_Old(Voucher_Old instance);
    partial void DeleteVoucher_Old(Voucher_Old instance);
    partial void InsertAwardWinner_Old(AwardWinner_Old instance);
    partial void UpdateAwardWinner_Old(AwardWinner_Old instance);
    partial void DeleteAwardWinner_Old(AwardWinner_Old instance);
    partial void InsertAward_Old(Award_Old instance);
    partial void UpdateAward_Old(Award_Old instance);
    partial void DeleteAward_Old(Award_Old instance);
    partial void InsertPatent_Old(Patent_Old instance);
    partial void UpdatePatent_Old(Patent_Old instance);
    partial void DeletePatent_Old(Patent_Old instance);
    partial void InsertPatentAgency_Old(PatentAgency_Old instance);
    partial void UpdatePatentAgency_Old(PatentAgency_Old instance);
    partial void DeletePatentAgency_Old(PatentAgency_Old instance);
    partial void InsertPatentInventer_Old(PatentInventer_Old instance);
    partial void UpdatePatentInventer_Old(PatentInventer_Old instance);
    partial void DeletePatentInventer_Old(PatentInventer_Old instance);
    partial void InsertPaper_Old(Paper_Old instance);
    partial void UpdatePaper_Old(Paper_Old instance);
    partial void DeletePaper_Old(Paper_Old instance);
    partial void InsertPaperAuthor_Old(PaperAuthor_Old instance);
    partial void UpdatePaperAuthor_Old(PaperAuthor_Old instance);
    partial void DeletePaperAuthor_Old(PaperAuthor_Old instance);
    partial void InsertPaperIndexed_Old(PaperIndexed_Old instance);
    partial void UpdatePaperIndexed_Old(PaperIndexed_Old instance);
    partial void DeletePaperIndexed_Old(PaperIndexed_Old instance);
    partial void InsertMagazineSubjectClass_Old(MagazineSubjectClass_Old instance);
    partial void UpdateMagazineSubjectClass_Old(MagazineSubjectClass_Old instance);
    partial void DeleteMagazineSubjectClass_Old(MagazineSubjectClass_Old instance);
    partial void InsertMagazine_Old(Magazine_Old instance);
    partial void UpdateMagazine_Old(Magazine_Old instance);
    partial void DeleteMagazine_Old(Magazine_Old instance);
    partial void InsertMagazineInformation_Old(MagazineInformation_Old instance);
    partial void UpdateMagazineInformation_Old(MagazineInformation_Old instance);
    partial void DeleteMagazineInformation_Old(MagazineInformation_Old instance);
    partial void InsertPower_Old(Power_Old instance);
    partial void UpdatePower_Old(Power_Old instance);
    partial void DeletePower_Old(Power_Old instance);
    partial void InsertFinanceBak_Old(FinanceBak_Old instance);
    partial void UpdateFinanceBak_Old(FinanceBak_Old instance);
    partial void DeleteFinanceBak_Old(FinanceBak_Old instance);
    partial void InsertFinance_Old(Finance_Old instance);
    partial void UpdateFinance_Old(Finance_Old instance);
    partial void DeleteFinance_Old(Finance_Old instance);
    partial void InsertProjectSupportCategory_Old(ProjectSupportCategory_Old instance);
    partial void UpdateProjectSupportCategory_Old(ProjectSupportCategory_Old instance);
    partial void DeleteProjectSupportCategory_Old(ProjectSupportCategory_Old instance);
    partial void InsertProjectType_Old(ProjectType_Old instance);
    partial void UpdateProjectType_Old(ProjectType_Old instance);
    partial void DeleteProjectType_Old(ProjectType_Old instance);
    partial void InsertSubjectClassChineseEnglish_Old(SubjectClassChineseEnglish_Old instance);
    partial void UpdateSubjectClassChineseEnglish_Old(SubjectClassChineseEnglish_Old instance);
    partial void DeleteSubjectClassChineseEnglish_Old(SubjectClassChineseEnglish_Old instance);
    #endregion
		
		public SrimsV4DataContext() : 
				base("Data Source=.;Initial Catalog=SrimsV0.4.28;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public SrimsV4DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SrimsV4DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SrimsV4DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SrimsV4DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SubjectFirstLevel_Old> SubjectFirstLevel_Olds
		{
			get
			{
				return this.GetTable<SubjectFirstLevel_Old>();
			}
		}
		
		public System.Data.Linq.Table<SubjectSecondLevel_Old> SubjectSecondLevel_Olds
		{
			get
			{
				return this.GetTable<SubjectSecondLevel_Old>();
			}
		}
		
		public System.Data.Linq.Table<SystemSetting_Old> SystemSetting_Olds
		{
			get
			{
				return this.GetTable<SystemSetting_Old>();
			}
		}
		
		public System.Data.Linq.Table<NoticeText_Old> NoticeText_Olds
		{
			get
			{
				return this.GetTable<NoticeText_Old>();
			}
		}
		
		public System.Data.Linq.Table<Log_Old> Log_Olds
		{
			get
			{
				return this.GetTable<Log_Old>();
			}
		}
		
		public System.Data.Linq.Table<Count_Old> Count_Olds
		{
			get
			{
				return this.GetTable<Count_Old>();
			}
		}
		
		public System.Data.Linq.Table<UserRole_Old> UserRole_Olds
		{
			get
			{
				return this.GetTable<UserRole_Old>();
			}
		}
		
		public System.Data.Linq.Table<Project_Old> Project_Olds
		{
			get
			{
				return this.GetTable<Project_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectMember_Old> ProjectMember_Olds
		{
			get
			{
				return this.GetTable<ProjectMember_Old>();
			}
		}
		
		public System.Data.Linq.Table<Contract_Old> Contract_Olds
		{
			get
			{
				return this.GetTable<Contract_Old>();
			}
		}
		
		public System.Data.Linq.Table<Document_Old> Document_Olds
		{
			get
			{
				return this.GetTable<Document_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectRank_Old> ProjectRank_Olds
		{
			get
			{
				return this.GetTable<ProjectRank_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectSupportField_Old> ProjectSupportField_Olds
		{
			get
			{
				return this.GetTable<ProjectSupportField_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectSupportSubField_Old> ProjectSupportSubField_Olds
		{
			get
			{
				return this.GetTable<ProjectSupportSubField_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInfo_Type_Old> ProjectInfo_Type_Olds
		{
			get
			{
				return this.GetTable<ProjectInfo_Type_Old>();
			}
		}
		
		public System.Data.Linq.Table<FundDescend_Old> FundDescend_Olds
		{
			get
			{
				return this.GetTable<FundDescend_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectInfo_Fund_Old> ProjectInfo_Fund_Olds
		{
			get
			{
				return this.GetTable<ProjectInfo_Fund_Old>();
			}
		}
		
		public System.Data.Linq.Table<FundAllocation_Old> FundAllocation_Olds
		{
			get
			{
				return this.GetTable<FundAllocation_Old>();
			}
		}
		
		public System.Data.Linq.Table<VoucherItemHardware_Old> VoucherItemHardware_Olds
		{
			get
			{
				return this.GetTable<VoucherItemHardware_Old>();
			}
		}
		
		public System.Data.Linq.Table<VoucherItemOversea_Old> VoucherItemOversea_Olds
		{
			get
			{
				return this.GetTable<VoucherItemOversea_Old>();
			}
		}
		
		public System.Data.Linq.Table<VoucherItemIn_Old> VoucherItemIn_Olds
		{
			get
			{
				return this.GetTable<VoucherItemIn_Old>();
			}
		}
		
		public System.Data.Linq.Table<VoucherItemOut_Old> VoucherItemOut_Olds
		{
			get
			{
				return this.GetTable<VoucherItemOut_Old>();
			}
		}
		
		public System.Data.Linq.Table<AccountBookNumberCount_Old> AccountBookNumberCount_Olds
		{
			get
			{
				return this.GetTable<AccountBookNumberCount_Old>();
			}
		}
		
		public System.Data.Linq.Table<PayPlanItem_Old> PayPlanItem_Olds
		{
			get
			{
				return this.GetTable<PayPlanItem_Old>();
			}
		}
		
		public System.Data.Linq.Table<FundMember_Old> FundMember_Olds
		{
			get
			{
				return this.GetTable<FundMember_Old>();
			}
		}
		
		public System.Data.Linq.Table<Department_Old> Department_Olds
		{
			get
			{
				return this.GetTable<Department_Old>();
			}
		}
		
		public System.Data.Linq.Table<Announcement_Old> Announcement_Olds
		{
			get
			{
				return this.GetTable<Announcement_Old>();
			}
		}
		
		public System.Data.Linq.Table<Base_Old> Base_Olds
		{
			get
			{
				return this.GetTable<Base_Old>();
			}
		}
		
		public System.Data.Linq.Table<Expert_Old> Expert_Olds
		{
			get
			{
				return this.GetTable<Expert_Old>();
			}
		}
		
		public System.Data.Linq.Table<User_Old> User_Olds
		{
			get
			{
				return this.GetTable<User_Old>();
			}
		}
		
		public System.Data.Linq.Table<Voucher_Old> Voucher_Olds
		{
			get
			{
				return this.GetTable<Voucher_Old>();
			}
		}
		
		public System.Data.Linq.Table<AwardWinner_Old> AwardWinner_Olds
		{
			get
			{
				return this.GetTable<AwardWinner_Old>();
			}
		}
		
		public System.Data.Linq.Table<Award_Old> Award_Olds
		{
			get
			{
				return this.GetTable<Award_Old>();
			}
		}
		
		public System.Data.Linq.Table<Patent_Old> Patent_Olds
		{
			get
			{
				return this.GetTable<Patent_Old>();
			}
		}
		
		public System.Data.Linq.Table<PatentAgency_Old> PatentAgency_Olds
		{
			get
			{
				return this.GetTable<PatentAgency_Old>();
			}
		}
		
		public System.Data.Linq.Table<PatentInventer_Old> PatentInventer_Olds
		{
			get
			{
				return this.GetTable<PatentInventer_Old>();
			}
		}
		
		public System.Data.Linq.Table<Paper_Old> Paper_Olds
		{
			get
			{
				return this.GetTable<Paper_Old>();
			}
		}
		
		public System.Data.Linq.Table<PaperAuthor_Old> PaperAuthor_Olds
		{
			get
			{
				return this.GetTable<PaperAuthor_Old>();
			}
		}
		
		public System.Data.Linq.Table<PaperIndexed_Old> PaperIndexed_Olds
		{
			get
			{
				return this.GetTable<PaperIndexed_Old>();
			}
		}
		
		public System.Data.Linq.Table<MagazineSubjectClass_Old> MagazineSubjectClass_Olds
		{
			get
			{
				return this.GetTable<MagazineSubjectClass_Old>();
			}
		}
		
		public System.Data.Linq.Table<Magazine_Old> Magazine_Olds
		{
			get
			{
				return this.GetTable<Magazine_Old>();
			}
		}
		
		public System.Data.Linq.Table<MagazineInformation_Old> MagazineInformation_Olds
		{
			get
			{
				return this.GetTable<MagazineInformation_Old>();
			}
		}
		
		public System.Data.Linq.Table<Power_Old> Power_Olds
		{
			get
			{
				return this.GetTable<Power_Old>();
			}
		}
		
		public System.Data.Linq.Table<FinanceBak_Old> FinanceBak_Olds
		{
			get
			{
				return this.GetTable<FinanceBak_Old>();
			}
		}
		
		public System.Data.Linq.Table<Finance_Old> Finance_Olds
		{
			get
			{
				return this.GetTable<Finance_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectSupportCategory_Old> ProjectSupportCategory_Olds
		{
			get
			{
				return this.GetTable<ProjectSupportCategory_Old>();
			}
		}
		
		public System.Data.Linq.Table<ProjectType_Old> ProjectType_Olds
		{
			get
			{
				return this.GetTable<ProjectType_Old>();
			}
		}
		
		public System.Data.Linq.Table<SubjectClassChineseEnglish_Old> SubjectClassChineseEnglish_Olds
		{
			get
			{
				return this.GetTable<SubjectClassChineseEnglish_Old>();
			}
		}
	}
	
	[Table(Name="dbo.SubjectFirstLevel")]
	public partial class SubjectFirstLevel_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private EntitySet<SubjectSecondLevel_Old> _SubjectSecondLevel_Olds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public SubjectFirstLevel_Old()
		{
			this._SubjectSecondLevel_Olds = new EntitySet<SubjectSecondLevel_Old>(new Action<SubjectSecondLevel_Old>(this.attach_SubjectSecondLevel_Olds), new Action<SubjectSecondLevel_Old>(this.detach_SubjectSecondLevel_Olds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Association(Name="SubjectFirstLevel_Old_SubjectSecondLevel_Old", Storage="_SubjectSecondLevel_Olds", ThisKey="ID", OtherKey="SubjectFirstLevelID")]
		public EntitySet<SubjectSecondLevel_Old> SubjectSecondLevel_Olds
		{
			get
			{
				return this._SubjectSecondLevel_Olds;
			}
			set
			{
				this._SubjectSecondLevel_Olds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubjectSecondLevel_Olds(SubjectSecondLevel_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectFirstLevel_Old = this;
		}
		
		private void detach_SubjectSecondLevel_Olds(SubjectSecondLevel_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectFirstLevel_Old = null;
		}
	}
	
	[Table(Name="dbo.SubjectSecondLevel")]
	public partial class SubjectSecondLevel_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _SubjectFirstLevelID;
		
		private string _ChildCode;
		
		private string _Code;
		
		private EntitySet<Project_Old> _Project_Olds;
		
		private EntitySet<Expert_Old> _Experts;
		
		private EntitySet<Expert_Old> _Experts1;
		
		private EntitySet<Expert_Old> _Experts2;
		
		private EntitySet<Expert_Old> _Experts3;
		
		private EntitySet<Expert_Old> _Experts4;
		
		private EntitySet<Expert_Old> _Experts5;
		
		private EntitySet<Expert_Old> _Experts6;
		
		private EntitySet<Expert_Old> _Expert_Olds;
		
		private EntityRef<SubjectFirstLevel_Old> _SubjectFirstLevel_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubjectFirstLevelIDChanging(int value);
    partial void OnSubjectFirstLevelIDChanged();
    partial void OnChildCodeChanging(string value);
    partial void OnChildCodeChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public SubjectSecondLevel_Old()
		{
			this._Project_Olds = new EntitySet<Project_Old>(new Action<Project_Old>(this.attach_Project_Olds), new Action<Project_Old>(this.detach_Project_Olds));
			this._Experts = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts), new Action<Expert_Old>(this.detach_Experts));
			this._Experts1 = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts1), new Action<Expert_Old>(this.detach_Experts1));
			this._Experts2 = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts2), new Action<Expert_Old>(this.detach_Experts2));
			this._Experts3 = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts3), new Action<Expert_Old>(this.detach_Experts3));
			this._Experts4 = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts4), new Action<Expert_Old>(this.detach_Experts4));
			this._Experts5 = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts5), new Action<Expert_Old>(this.detach_Experts5));
			this._Experts6 = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts6), new Action<Expert_Old>(this.detach_Experts6));
			this._Expert_Olds = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Expert_Olds), new Action<Expert_Old>(this.detach_Expert_Olds));
			this._SubjectFirstLevel_Old = default(EntityRef<SubjectFirstLevel_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectFirstLevelID", DbType="Int NOT NULL")]
		public int SubjectFirstLevelID
		{
			get
			{
				return this._SubjectFirstLevelID;
			}
			set
			{
				if ((this._SubjectFirstLevelID != value))
				{
					if (this._SubjectFirstLevel_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectFirstLevelIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectFirstLevelID = value;
					this.SendPropertyChanged("SubjectFirstLevelID");
					this.OnSubjectFirstLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChildCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildCode
		{
			get
			{
				return this._ChildCode;
			}
			set
			{
				if ((this._ChildCode != value))
				{
					this.OnChildCodeChanging(value);
					this.SendPropertyChanging();
					this._ChildCode = value;
					this.SendPropertyChanged("ChildCode");
					this.OnChildCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Project_Old", Storage="_Project_Olds", ThisKey="ID", OtherKey="SubjectCodeID")]
		public EntitySet<Project_Old> Project_Olds
		{
			get
			{
				return this._Project_Olds;
			}
			set
			{
				this._Project_Olds.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old", Storage="_Experts", ThisKey="ID", OtherKey="MajorCodeID")]
		public EntitySet<Expert_Old> Experts
		{
			get
			{
				return this._Experts;
			}
			set
			{
				this._Experts.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old1", Storage="_Experts1", ThisKey="ID", OtherKey="ResearchCode1ID")]
		public EntitySet<Expert_Old> Experts1
		{
			get
			{
				return this._Experts1;
			}
			set
			{
				this._Experts1.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old2", Storage="_Experts2", ThisKey="ID", OtherKey="ResearchCode2ID")]
		public EntitySet<Expert_Old> Experts2
		{
			get
			{
				return this._Experts2;
			}
			set
			{
				this._Experts2.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old3", Storage="_Experts3", ThisKey="ID", OtherKey="ResearchCode3ID")]
		public EntitySet<Expert_Old> Experts3
		{
			get
			{
				return this._Experts3;
			}
			set
			{
				this._Experts3.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old4", Storage="_Experts4", ThisKey="ID", OtherKey="MajorCodeID")]
		public EntitySet<Expert_Old> Experts4
		{
			get
			{
				return this._Experts4;
			}
			set
			{
				this._Experts4.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old5", Storage="_Experts5", ThisKey="ID", OtherKey="ResearchCode1ID")]
		public EntitySet<Expert_Old> Experts5
		{
			get
			{
				return this._Experts5;
			}
			set
			{
				this._Experts5.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old6", Storage="_Experts6", ThisKey="ID", OtherKey="ResearchCode2ID")]
		public EntitySet<Expert_Old> Experts6
		{
			get
			{
				return this._Experts6;
			}
			set
			{
				this._Experts6.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old7", Storage="_Expert_Olds", ThisKey="ID", OtherKey="ResearchCode3ID")]
		public EntitySet<Expert_Old> Expert_Olds
		{
			get
			{
				return this._Expert_Olds;
			}
			set
			{
				this._Expert_Olds.Assign(value);
			}
		}
		
		[Association(Name="SubjectFirstLevel_Old_SubjectSecondLevel_Old", Storage="_SubjectFirstLevel_Old", ThisKey="SubjectFirstLevelID", OtherKey="ID", IsForeignKey=true)]
		public SubjectFirstLevel_Old SubjectFirstLevel_Old
		{
			get
			{
				return this._SubjectFirstLevel_Old.Entity;
			}
			set
			{
				SubjectFirstLevel_Old previousValue = this._SubjectFirstLevel_Old.Entity;
				if (((previousValue != value) 
							|| (this._SubjectFirstLevel_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectFirstLevel_Old.Entity = null;
						previousValue.SubjectSecondLevel_Olds.Remove(this);
					}
					this._SubjectFirstLevel_Old.Entity = value;
					if ((value != null))
					{
						value.SubjectSecondLevel_Olds.Add(this);
						this._SubjectFirstLevelID = value.ID;
					}
					else
					{
						this._SubjectFirstLevelID = default(int);
					}
					this.SendPropertyChanged("SubjectFirstLevel_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old = this;
		}
		
		private void detach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old = null;
		}
		
		private void attach_Experts(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old = this;
		}
		
		private void detach_Experts(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old = null;
		}
		
		private void attach_Experts1(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old1 = this;
		}
		
		private void detach_Experts1(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old1 = null;
		}
		
		private void attach_Experts2(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old2 = this;
		}
		
		private void detach_Experts2(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old2 = null;
		}
		
		private void attach_Experts3(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old3 = this;
		}
		
		private void detach_Experts3(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old3 = null;
		}
		
		private void attach_Experts4(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old4 = this;
		}
		
		private void detach_Experts4(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old4 = null;
		}
		
		private void attach_Experts5(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old5 = this;
		}
		
		private void detach_Experts5(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old5 = null;
		}
		
		private void attach_Experts6(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old6 = this;
		}
		
		private void detach_Experts6(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old6 = null;
		}
		
		private void attach_Expert_Olds(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old7 = this;
		}
		
		private void detach_Expert_Olds(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.SubjectSecondLevel_Old7 = null;
		}
	}
	
	[Table(Name="dbo.SystemSetting")]
	public partial class SystemSetting_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FundOutRatio;
		
		private int _OverheadExpenseOutRateHorizonal;
		
		private int _OverheadExpenseInRateHorizonal;
		
		private int _OverheadExpenseInRateVertical;
		
		private int _OverheadExpenseOutRateVertical;
		
		private string _LogType;
		
		private string _EmailAddress;
		
		private string _SmtpHost;
		
		private System.Nullable<int> _SmtpPort;
		
		private string _SmtpPassword;
		
		private string _SmtpUsername;
		
		private System.Data.Linq.Binary _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFundOutRatioChanging(System.Nullable<int> value);
    partial void OnFundOutRatioChanged();
    partial void OnOverheadExpenseOutRateHorizonalChanging(int value);
    partial void OnOverheadExpenseOutRateHorizonalChanged();
    partial void OnOverheadExpenseInRateHorizonalChanging(int value);
    partial void OnOverheadExpenseInRateHorizonalChanged();
    partial void OnOverheadExpenseInRateVerticalChanging(int value);
    partial void OnOverheadExpenseInRateVerticalChanged();
    partial void OnOverheadExpenseOutRateVerticalChanging(int value);
    partial void OnOverheadExpenseOutRateVerticalChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnSmtpHostChanging(string value);
    partial void OnSmtpHostChanged();
    partial void OnSmtpPortChanging(System.Nullable<int> value);
    partial void OnSmtpPortChanged();
    partial void OnSmtpPasswordChanging(string value);
    partial void OnSmtpPasswordChanged();
    partial void OnSmtpUsernameChanging(string value);
    partial void OnSmtpUsernameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public SystemSetting_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FundOutRatio", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FundOutRatio
		{
			get
			{
				return this._FundOutRatio;
			}
			set
			{
				if ((this._FundOutRatio != value))
				{
					this.OnFundOutRatioChanging(value);
					this.SendPropertyChanging();
					this._FundOutRatio = value;
					this.SendPropertyChanged("FundOutRatio");
					this.OnFundOutRatioChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseOutRateHorizonal", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OverheadExpenseOutRateHorizonal
		{
			get
			{
				return this._OverheadExpenseOutRateHorizonal;
			}
			set
			{
				if ((this._OverheadExpenseOutRateHorizonal != value))
				{
					this.OnOverheadExpenseOutRateHorizonalChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseOutRateHorizonal = value;
					this.SendPropertyChanged("OverheadExpenseOutRateHorizonal");
					this.OnOverheadExpenseOutRateHorizonalChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseInRateHorizonal", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OverheadExpenseInRateHorizonal
		{
			get
			{
				return this._OverheadExpenseInRateHorizonal;
			}
			set
			{
				if ((this._OverheadExpenseInRateHorizonal != value))
				{
					this.OnOverheadExpenseInRateHorizonalChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseInRateHorizonal = value;
					this.SendPropertyChanged("OverheadExpenseInRateHorizonal");
					this.OnOverheadExpenseInRateHorizonalChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseInRateVertical", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OverheadExpenseInRateVertical
		{
			get
			{
				return this._OverheadExpenseInRateVertical;
			}
			set
			{
				if ((this._OverheadExpenseInRateVertical != value))
				{
					this.OnOverheadExpenseInRateVerticalChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseInRateVertical = value;
					this.SendPropertyChanged("OverheadExpenseInRateVertical");
					this.OnOverheadExpenseInRateVerticalChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseOutRateVertical", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OverheadExpenseOutRateVertical
		{
			get
			{
				return this._OverheadExpenseOutRateVertical;
			}
			set
			{
				if ((this._OverheadExpenseOutRateVertical != value))
				{
					this.OnOverheadExpenseOutRateVerticalChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseOutRateVertical = value;
					this.SendPropertyChanged("OverheadExpenseOutRateVertical");
					this.OnOverheadExpenseOutRateVerticalChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_SmtpHost", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SmtpHost
		{
			get
			{
				return this._SmtpHost;
			}
			set
			{
				if ((this._SmtpHost != value))
				{
					this.OnSmtpHostChanging(value);
					this.SendPropertyChanging();
					this._SmtpHost = value;
					this.SendPropertyChanged("SmtpHost");
					this.OnSmtpHostChanged();
				}
			}
		}
		
		[Column(Storage="_SmtpPort", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SmtpPort
		{
			get
			{
				return this._SmtpPort;
			}
			set
			{
				if ((this._SmtpPort != value))
				{
					this.OnSmtpPortChanging(value);
					this.SendPropertyChanging();
					this._SmtpPort = value;
					this.SendPropertyChanged("SmtpPort");
					this.OnSmtpPortChanged();
				}
			}
		}
		
		[Column(Storage="_SmtpPassword", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SmtpPassword
		{
			get
			{
				return this._SmtpPassword;
			}
			set
			{
				if ((this._SmtpPassword != value))
				{
					this.OnSmtpPasswordChanging(value);
					this.SendPropertyChanging();
					this._SmtpPassword = value;
					this.SendPropertyChanged("SmtpPassword");
					this.OnSmtpPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_SmtpUsername", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SmtpUsername
		{
			get
			{
				return this._SmtpUsername;
			}
			set
			{
				if ((this._SmtpUsername != value))
				{
					this.OnSmtpUsernameChanging(value);
					this.SendPropertyChanging();
					this._SmtpUsername = value;
					this.SendPropertyChanged("SmtpUsername");
					this.OnSmtpUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NoticeText")]
	public partial class NoticeText_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private string _ShortKey;
		
		private int _Type;
		
		private System.Data.Linq.Binary _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnShortKeyChanging(string value);
    partial void OnShortKeyChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public NoticeText_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_ShortKey", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ShortKey
		{
			get
			{
				return this._ShortKey;
			}
			set
			{
				if ((this._ShortKey != value))
				{
					this.OnShortKeyChanging(value);
					this.SendPropertyChanging();
					this._ShortKey = value;
					this.SendPropertyChanged("ShortKey");
					this.OnShortKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[Log]")]
	public partial class Log_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateTime;
		
		private string _User;
		
		private string _Action;
		
		private string _Description;
		
		private System.Data.Linq.Binary _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Log_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Column(Name="[User]", Storage="_User", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Count")]
	public partial class Count_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Year;
		
		private int _HorizontalProject;
		
		private int _ExpertSerialCodeCount;
		
		private int _Project;
		
		private int _Contract;
		
		private int _HorizontalVoucher;
		
		private int _VerticalVoucher;
		
		private System.Data.Linq.Binary _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnHorizontalProjectChanging(int value);
    partial void OnHorizontalProjectChanged();
    partial void OnExpertSerialCodeCountChanging(int value);
    partial void OnExpertSerialCodeCountChanged();
    partial void OnProjectChanging(int value);
    partial void OnProjectChanged();
    partial void OnContractChanging(int value);
    partial void OnContractChanged();
    partial void OnHorizontalVoucherChanging(int value);
    partial void OnHorizontalVoucherChanged();
    partial void OnVerticalVoucherChanging(int value);
    partial void OnVerticalVoucherChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Count_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalProject", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int HorizontalProject
		{
			get
			{
				return this._HorizontalProject;
			}
			set
			{
				if ((this._HorizontalProject != value))
				{
					this.OnHorizontalProjectChanging(value);
					this.SendPropertyChanging();
					this._HorizontalProject = value;
					this.SendPropertyChanged("HorizontalProject");
					this.OnHorizontalProjectChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertSerialCodeCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ExpertSerialCodeCount
		{
			get
			{
				return this._ExpertSerialCodeCount;
			}
			set
			{
				if ((this._ExpertSerialCodeCount != value))
				{
					this.OnExpertSerialCodeCountChanging(value);
					this.SendPropertyChanging();
					this._ExpertSerialCodeCount = value;
					this.SendPropertyChanged("ExpertSerialCodeCount");
					this.OnExpertSerialCodeCountChanged();
				}
			}
		}
		
		[Column(Storage="_Project", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[Column(Storage="_Contract", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				if ((this._Contract != value))
				{
					this.OnContractChanging(value);
					this.SendPropertyChanging();
					this._Contract = value;
					this.SendPropertyChanged("Contract");
					this.OnContractChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalVoucher", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int HorizontalVoucher
		{
			get
			{
				return this._HorizontalVoucher;
			}
			set
			{
				if ((this._HorizontalVoucher != value))
				{
					this.OnHorizontalVoucherChanging(value);
					this.SendPropertyChanging();
					this._HorizontalVoucher = value;
					this.SendPropertyChanged("HorizontalVoucher");
					this.OnHorizontalVoucherChanged();
				}
			}
		}
		
		[Column(Storage="_VerticalVoucher", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VerticalVoucher
		{
			get
			{
				return this._VerticalVoucher;
			}
			set
			{
				if ((this._VerticalVoucher != value))
				{
					this.OnVerticalVoucherChanging(value);
					this.SendPropertyChanging();
					this._VerticalVoucher = value;
					this.SendPropertyChanged("VerticalVoucher");
					this.OnVerticalVoucherChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserRole")]
	public partial class UserRole_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Type;
		
		private System.Nullable<int> _PowerID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<User_Old> _User_Olds;
		
		private EntityRef<Power_Old> _Power_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnPowerIDChanging(System.Nullable<int> value);
    partial void OnPowerIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public UserRole_Old()
		{
			this._User_Olds = new EntitySet<User_Old>(new Action<User_Old>(this.attach_User_Olds), new Action<User_Old>(this.detach_User_Olds));
			this._Power_Old = default(EntityRef<Power_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PowerID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PowerID
		{
			get
			{
				return this._PowerID;
			}
			set
			{
				if ((this._PowerID != value))
				{
					if (this._Power_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerIDChanging(value);
					this.SendPropertyChanging();
					this._PowerID = value;
					this.SendPropertyChanged("PowerID");
					this.OnPowerIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="UserRole_Old_User_Old", Storage="_User_Olds", ThisKey="ID", OtherKey="UserRoleID")]
		public EntitySet<User_Old> User_Olds
		{
			get
			{
				return this._User_Olds;
			}
			set
			{
				this._User_Olds.Assign(value);
			}
		}
		
		[Association(Name="Power_Old_UserRole_Old", Storage="_Power_Old", ThisKey="PowerID", OtherKey="ID", IsForeignKey=true)]
		public Power_Old Power_Old
		{
			get
			{
				return this._Power_Old.Entity;
			}
			set
			{
				Power_Old previousValue = this._Power_Old.Entity;
				if (((previousValue != value) 
							|| (this._Power_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Power_Old.Entity = null;
						previousValue.UserRole_Olds.Remove(this);
					}
					this._Power_Old.Entity = value;
					if ((value != null))
					{
						value.UserRole_Olds.Add(this);
						this._PowerID = value.ID;
					}
					else
					{
						this._PowerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Power_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Olds(User_Old entity)
		{
			this.SendPropertyChanging();
			entity.UserRole_Old = this;
		}
		
		private void detach_User_Olds(User_Old entity)
		{
			this.SendPropertyChanging();
			entity.UserRole_Old = null;
		}
	}
	
	[Table(Name="dbo.Project")]
	public partial class Project_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _FundID;
		
		private string _SerialNumber;
		
		private string _Number;
		
		private string _Name;
		
		private string _NameSpell;
		
		private System.Nullable<int> _PrincipalID;
		
		private string _PrincipalName;
		
		private string _PrincipalNumber;
		
		private System.Nullable<int> _PrincipalDelegateID;
		
		private int _Level;
		
		private bool _IsHorizontal;
		
		private System.Nullable<int> _BaseID;
		
		private System.Nullable<int> _SubjectCodeID;
		
		private string _ResearchType;
		
		private bool _IsSecret;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _CooperationType;
		
		private string _Unit;
		
		private string _TaskComingFrom;
		
		private string _CorporationPlace;
		
		private int _State;
		
		private string _Creator;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _UpdateTime;
		
		private string _Remark;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<ProjectMember_Old> _ProjectMember_Olds;
		
		private EntitySet<Contract_Old> _Contract_Olds;
		
		private EntitySet<Document_Old> _Document_Olds;
		
		private EntitySet<ProjectInfo_Type_Old> _ProjectInfo_Types;
		
		private EntitySet<ProjectInfo_Fund_Old> _ProjectInfo_Fund_Olds;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old;
		
		private EntityRef<ProjectInfo_Type_Old> _ProjectInfo_Type;
		
		private EntityRef<ProjectInfo_Fund_Old> _ProjectInfo_Fund;
		
		private EntityRef<Base_Old> _Base_Old;
		
		private EntityRef<Expert_Old> _Expert;
		
		private EntityRef<Expert_Old> _Expert_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnFundIDChanging(System.Nullable<int> value);
    partial void OnFundIDChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameSpellChanging(string value);
    partial void OnNameSpellChanged();
    partial void OnPrincipalIDChanging(System.Nullable<int> value);
    partial void OnPrincipalIDChanged();
    partial void OnPrincipalNameChanging(string value);
    partial void OnPrincipalNameChanged();
    partial void OnPrincipalNumberChanging(string value);
    partial void OnPrincipalNumberChanged();
    partial void OnPrincipalDelegateIDChanging(System.Nullable<int> value);
    partial void OnPrincipalDelegateIDChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnIsHorizontalChanging(bool value);
    partial void OnIsHorizontalChanged();
    partial void OnBaseIDChanging(System.Nullable<int> value);
    partial void OnBaseIDChanged();
    partial void OnSubjectCodeIDChanging(System.Nullable<int> value);
    partial void OnSubjectCodeIDChanged();
    partial void OnResearchTypeChanging(string value);
    partial void OnResearchTypeChanged();
    partial void OnIsSecretChanging(bool value);
    partial void OnIsSecretChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnCooperationTypeChanging(string value);
    partial void OnCooperationTypeChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnTaskComingFromChanging(string value);
    partial void OnTaskComingFromChanged();
    partial void OnCorporationPlaceChanging(string value);
    partial void OnCorporationPlaceChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnCreatorChanging(string value);
    partial void OnCreatorChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnUpdateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Project_Old()
		{
			this._ProjectMember_Olds = new EntitySet<ProjectMember_Old>(new Action<ProjectMember_Old>(this.attach_ProjectMember_Olds), new Action<ProjectMember_Old>(this.detach_ProjectMember_Olds));
			this._Contract_Olds = new EntitySet<Contract_Old>(new Action<Contract_Old>(this.attach_Contract_Olds), new Action<Contract_Old>(this.detach_Contract_Olds));
			this._Document_Olds = new EntitySet<Document_Old>(new Action<Document_Old>(this.attach_Document_Olds), new Action<Document_Old>(this.detach_Document_Olds));
			this._ProjectInfo_Types = new EntitySet<ProjectInfo_Type_Old>(new Action<ProjectInfo_Type_Old>(this.attach_ProjectInfo_Types), new Action<ProjectInfo_Type_Old>(this.detach_ProjectInfo_Types));
			this._ProjectInfo_Fund_Olds = new EntitySet<ProjectInfo_Fund_Old>(new Action<ProjectInfo_Fund_Old>(this.attach_ProjectInfo_Fund_Olds), new Action<ProjectInfo_Fund_Old>(this.detach_ProjectInfo_Fund_Olds));
			this._SubjectSecondLevel_Old = default(EntityRef<SubjectSecondLevel_Old>);
			this._ProjectInfo_Type = default(EntityRef<ProjectInfo_Type_Old>);
			this._ProjectInfo_Fund = default(EntityRef<ProjectInfo_Fund_Old>);
			this._Base_Old = default(EntityRef<Base_Old>);
			this._Expert = default(EntityRef<Expert_Old>);
			this._Expert_Old = default(EntityRef<Expert_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._ProjectInfo_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_FundID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FundID
		{
			get
			{
				return this._FundID;
			}
			set
			{
				if ((this._FundID != value))
				{
					if (this._ProjectInfo_Fund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundIDChanging(value);
					this.SendPropertyChanging();
					this._FundID = value;
					this.SendPropertyChanged("FundID");
					this.OnFundIDChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_NameSpell", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string NameSpell
		{
			get
			{
				return this._NameSpell;
			}
			set
			{
				if ((this._NameSpell != value))
				{
					this.OnNameSpellChanging(value);
					this.SendPropertyChanging();
					this._NameSpell = value;
					this.SendPropertyChanged("NameSpell");
					this.OnNameSpellChanged();
				}
			}
		}
		
		[Column(Storage="_PrincipalID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PrincipalID
		{
			get
			{
				return this._PrincipalID;
			}
			set
			{
				if ((this._PrincipalID != value))
				{
					if (this._Expert.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrincipalIDChanging(value);
					this.SendPropertyChanging();
					this._PrincipalID = value;
					this.SendPropertyChanged("PrincipalID");
					this.OnPrincipalIDChanged();
				}
			}
		}
		
		[Column(Storage="_PrincipalName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PrincipalName
		{
			get
			{
				return this._PrincipalName;
			}
			set
			{
				if ((this._PrincipalName != value))
				{
					this.OnPrincipalNameChanging(value);
					this.SendPropertyChanging();
					this._PrincipalName = value;
					this.SendPropertyChanged("PrincipalName");
					this.OnPrincipalNameChanged();
				}
			}
		}
		
		[Column(Storage="_PrincipalNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PrincipalNumber
		{
			get
			{
				return this._PrincipalNumber;
			}
			set
			{
				if ((this._PrincipalNumber != value))
				{
					this.OnPrincipalNumberChanging(value);
					this.SendPropertyChanging();
					this._PrincipalNumber = value;
					this.SendPropertyChanged("PrincipalNumber");
					this.OnPrincipalNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PrincipalDelegateID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PrincipalDelegateID
		{
			get
			{
				return this._PrincipalDelegateID;
			}
			set
			{
				if ((this._PrincipalDelegateID != value))
				{
					if (this._Expert_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrincipalDelegateIDChanging(value);
					this.SendPropertyChanging();
					this._PrincipalDelegateID = value;
					this.SendPropertyChanged("PrincipalDelegateID");
					this.OnPrincipalDelegateIDChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_IsHorizontal", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsHorizontal
		{
			get
			{
				return this._IsHorizontal;
			}
			set
			{
				if ((this._IsHorizontal != value))
				{
					this.OnIsHorizontalChanging(value);
					this.SendPropertyChanging();
					this._IsHorizontal = value;
					this.SendPropertyChanged("IsHorizontal");
					this.OnIsHorizontalChanged();
				}
			}
		}
		
		[Column(Storage="_BaseID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> BaseID
		{
			get
			{
				return this._BaseID;
			}
			set
			{
				if ((this._BaseID != value))
				{
					if (this._Base_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseIDChanging(value);
					this.SendPropertyChanging();
					this._BaseID = value;
					this.SendPropertyChanged("BaseID");
					this.OnBaseIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectCodeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SubjectCodeID
		{
			get
			{
				return this._SubjectCodeID;
			}
			set
			{
				if ((this._SubjectCodeID != value))
				{
					if (this._SubjectSecondLevel_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectCodeIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectCodeID = value;
					this.SendPropertyChanged("SubjectCodeID");
					this.OnSubjectCodeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchType", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ResearchType
		{
			get
			{
				return this._ResearchType;
			}
			set
			{
				if ((this._ResearchType != value))
				{
					this.OnResearchTypeChanging(value);
					this.SendPropertyChanging();
					this._ResearchType = value;
					this.SendPropertyChanged("ResearchType");
					this.OnResearchTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSecret", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSecret
		{
			get
			{
				return this._IsSecret;
			}
			set
			{
				if ((this._IsSecret != value))
				{
					this.OnIsSecretChanging(value);
					this.SendPropertyChanging();
					this._IsSecret = value;
					this.SendPropertyChanged("IsSecret");
					this.OnIsSecretChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_CooperationType", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CooperationType
		{
			get
			{
				return this._CooperationType;
			}
			set
			{
				if ((this._CooperationType != value))
				{
					this.OnCooperationTypeChanging(value);
					this.SendPropertyChanging();
					this._CooperationType = value;
					this.SendPropertyChanged("CooperationType");
					this.OnCooperationTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_TaskComingFrom", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string TaskComingFrom
		{
			get
			{
				return this._TaskComingFrom;
			}
			set
			{
				if ((this._TaskComingFrom != value))
				{
					this.OnTaskComingFromChanging(value);
					this.SendPropertyChanging();
					this._TaskComingFrom = value;
					this.SendPropertyChanged("TaskComingFrom");
					this.OnTaskComingFromChanged();
				}
			}
		}
		
		[Column(Storage="_CorporationPlace", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CorporationPlace
		{
			get
			{
				return this._CorporationPlace;
			}
			set
			{
				if ((this._CorporationPlace != value))
				{
					this.OnCorporationPlaceChanging(value);
					this.SendPropertyChanging();
					this._CorporationPlace = value;
					this.SendPropertyChanged("CorporationPlace");
					this.OnCorporationPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> UpdateTime
		{
			get
			{
				return this._UpdateTime;
			}
			set
			{
				if ((this._UpdateTime != value))
				{
					this.OnUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdateTime = value;
					this.SendPropertyChanged("UpdateTime");
					this.OnUpdateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Project_Old_ProjectMember_Old", Storage="_ProjectMember_Olds", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ProjectMember_Old> ProjectMember_Olds
		{
			get
			{
				return this._ProjectMember_Olds;
			}
			set
			{
				this._ProjectMember_Olds.Assign(value);
			}
		}
		
		[Association(Name="Project_Old_Contract_Old", Storage="_Contract_Olds", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Contract_Old> Contract_Olds
		{
			get
			{
				return this._Contract_Olds;
			}
			set
			{
				this._Contract_Olds.Assign(value);
			}
		}
		
		[Association(Name="Project_Old_Document_Old", Storage="_Document_Olds", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Document_Old> Document_Olds
		{
			get
			{
				return this._Document_Olds;
			}
			set
			{
				this._Document_Olds.Assign(value);
			}
		}
		
		[Association(Name="Project_Old_ProjectInfo_Type_Old", Storage="_ProjectInfo_Types", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ProjectInfo_Type_Old> ProjectInfo_Type_Olds
		{
			get
			{
				return this._ProjectInfo_Types;
			}
			set
			{
				this._ProjectInfo_Types.Assign(value);
			}
		}
		
		[Association(Name="Project_Old_ProjectInfo_Fund_Old", Storage="_ProjectInfo_Fund_Olds", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ProjectInfo_Fund_Old> ProjectInfo_Fund_Olds
		{
			get
			{
				return this._ProjectInfo_Fund_Olds;
			}
			set
			{
				this._ProjectInfo_Fund_Olds.Assign(value);
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Project_Old", Storage="_SubjectSecondLevel_Old", ThisKey="SubjectCodeID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old
		{
			get
			{
				return this._SubjectSecondLevel_Old.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old.Entity = null;
						previousValue.Project_Olds.Remove(this);
					}
					this._SubjectSecondLevel_Old.Entity = value;
					if ((value != null))
					{
						value.Project_Olds.Add(this);
						this._SubjectCodeID = value.ID;
					}
					else
					{
						this._SubjectCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old");
				}
			}
		}
		
		[Association(Name="ProjectInfo_Type_Old_Project_Old", Storage="_ProjectInfo_Type", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public ProjectInfo_Type_Old ProjectInfo_Type
		{
			get
			{
				return this._ProjectInfo_Type.Entity;
			}
			set
			{
				ProjectInfo_Type_Old previousValue = this._ProjectInfo_Type.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo_Type.Entity = null;
						previousValue.Project_Olds.Remove(this);
					}
					this._ProjectInfo_Type.Entity = value;
					if ((value != null))
					{
						value.Project_Olds.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInfo_Type");
				}
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_Project_Old", Storage="_ProjectInfo_Fund", ThisKey="FundID", OtherKey="ID", IsForeignKey=true)]
		public ProjectInfo_Fund_Old ProjectInfo_Fund
		{
			get
			{
				return this._ProjectInfo_Fund.Entity;
			}
			set
			{
				ProjectInfo_Fund_Old previousValue = this._ProjectInfo_Fund.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo_Fund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo_Fund.Entity = null;
						previousValue.Project_Olds.Remove(this);
					}
					this._ProjectInfo_Fund.Entity = value;
					if ((value != null))
					{
						value.Project_Olds.Add(this);
						this._FundID = value.ID;
					}
					else
					{
						this._FundID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInfo_Fund");
				}
			}
		}
		
		[Association(Name="Base_Old_Project_Old", Storage="_Base_Old", ThisKey="BaseID", OtherKey="ID", IsForeignKey=true)]
		public Base_Old Base_Old
		{
			get
			{
				return this._Base_Old.Entity;
			}
			set
			{
				Base_Old previousValue = this._Base_Old.Entity;
				if (((previousValue != value) 
							|| (this._Base_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Base_Old.Entity = null;
						previousValue.Project_Olds.Remove(this);
					}
					this._Base_Old.Entity = value;
					if ((value != null))
					{
						value.Project_Olds.Add(this);
						this._BaseID = value.ID;
					}
					else
					{
						this._BaseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Base_Old");
				}
			}
		}
		
		[Association(Name="Expert_Old_Project_Old", Storage="_Expert", ThisKey="PrincipalID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert
		{
			get
			{
				return this._Expert.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert.Entity;
				if (((previousValue != value) 
							|| (this._Expert.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert.Entity = null;
						previousValue.Project_Olds.Remove(this);
					}
					this._Expert.Entity = value;
					if ((value != null))
					{
						value.Project_Olds.Add(this);
						this._PrincipalID = value.ID;
					}
					else
					{
						this._PrincipalID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert");
				}
			}
		}
		
		[Association(Name="Expert_Old_Project_Old1", Storage="_Expert_Old", ThisKey="PrincipalDelegateID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert_Old
		{
			get
			{
				return this._Expert_Old.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert_Old.Entity;
				if (((previousValue != value) 
							|| (this._Expert_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert_Old.Entity = null;
						previousValue.Project_Olds1.Remove(this);
					}
					this._Expert_Old.Entity = value;
					if ((value != null))
					{
						value.Project_Olds1.Add(this);
						this._PrincipalDelegateID = value.ID;
					}
					else
					{
						this._PrincipalDelegateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectMember_Olds(ProjectMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = this;
		}
		
		private void detach_ProjectMember_Olds(ProjectMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = null;
		}
		
		private void attach_Contract_Olds(Contract_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = this;
		}
		
		private void detach_Contract_Olds(Contract_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = null;
		}
		
		private void attach_Document_Olds(Document_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = this;
		}
		
		private void detach_Document_Olds(Document_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = null;
		}
		
		private void attach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = this;
		}
		
		private void detach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = null;
		}
		
		private void attach_ProjectInfo_Fund_Olds(ProjectInfo_Fund_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = this;
		}
		
		private void detach_ProjectInfo_Fund_Olds(ProjectInfo_Fund_Old entity)
		{
			this.SendPropertyChanging();
			entity.Project_Old = null;
		}
	}
	
	[Table(Name="dbo.ProjectMember")]
	public partial class ProjectMember_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private System.Nullable<int> _ExpertID;
		
		private string _Name;
		
		private string _ExpertNumber;
		
		private System.Nullable<int> _Order;
		
		private string _TaskNo;
		
		private string _TaskName;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Project_Old> _Project_Old;
		
		private EntityRef<Expert_Old> _Expert_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnExpertIDChanging(System.Nullable<int> value);
    partial void OnExpertIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExpertNumberChanging(string value);
    partial void OnExpertNumberChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnTaskNoChanging(string value);
    partial void OnTaskNoChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectMember_Old()
		{
			this._Project_Old = default(EntityRef<Project_Old>);
			this._Expert_Old = default(EntityRef<Expert_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ExpertID
		{
			get
			{
				return this._ExpertID;
			}
			set
			{
				if ((this._ExpertID != value))
				{
					if (this._Expert_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpertIDChanging(value);
					this.SendPropertyChanging();
					this._ExpertID = value;
					this.SendPropertyChanged("ExpertID");
					this.OnExpertIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ExpertNumber
		{
			get
			{
				return this._ExpertNumber;
			}
			set
			{
				if ((this._ExpertNumber != value))
				{
					this.OnExpertNumberChanging(value);
					this.SendPropertyChanging();
					this._ExpertNumber = value;
					this.SendPropertyChanged("ExpertNumber");
					this.OnExpertNumberChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_TaskNo", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string TaskNo
		{
			get
			{
				return this._TaskNo;
			}
			set
			{
				if ((this._TaskNo != value))
				{
					this.OnTaskNoChanging(value);
					this.SendPropertyChanging();
					this._TaskNo = value;
					this.SendPropertyChanged("TaskNo");
					this.OnTaskNoChanged();
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Project_Old_ProjectMember_Old", Storage="_Project_Old", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project_Old Project_Old
		{
			get
			{
				return this._Project_Old.Entity;
			}
			set
			{
				Project_Old previousValue = this._Project_Old.Entity;
				if (((previousValue != value) 
							|| (this._Project_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project_Old.Entity = null;
						previousValue.ProjectMember_Olds.Remove(this);
					}
					this._Project_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectMember_Olds.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project_Old");
				}
			}
		}
		
		[Association(Name="Expert_Old_ProjectMember_Old", Storage="_Expert_Old", ThisKey="ExpertID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert_Old
		{
			get
			{
				return this._Expert_Old.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert_Old.Entity;
				if (((previousValue != value) 
							|| (this._Expert_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert_Old.Entity = null;
						previousValue.ProjectMember_Olds.Remove(this);
					}
					this._Expert_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectMember_Olds.Add(this);
						this._ExpertID = value.ID;
					}
					else
					{
						this._ExpertID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Contract")]
	public partial class Contract_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _ContractNumber;
		
		private int _Type;
		
		private string _FileType;
		
		private System.Nullable<System.DateTime> _SubmitDateTime;
		
		private int _State;
		
		private System.Data.Linq.Link<byte[]> _Content;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Project_Old> _Project_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnContractNumberChanging(string value);
    partial void OnContractNumberChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnSubmitDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmitDateTimeChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnContentChanging(byte[] value);
    partial void OnContentChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Contract_Old()
		{
			this._Project_Old = default(EntityRef<Project_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContractNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ContractNumber
		{
			get
			{
				return this._ContractNumber;
			}
			set
			{
				if ((this._ContractNumber != value))
				{
					this.OnContractNumberChanging(value);
					this.SendPropertyChanging();
					this._ContractNumber = value;
					this.SendPropertyChanged("ContractNumber");
					this.OnContractNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FileType", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SubmitDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SubmitDateTime
		{
			get
			{
				return this._SubmitDateTime;
			}
			set
			{
				if ((this._SubmitDateTime != value))
				{
					this.OnSubmitDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SubmitDateTime = value;
					this.SendPropertyChanged("SubmitDateTime");
					this.OnSubmitDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] Content
		{
			get
			{
				return this._Content.Value;
			}
			set
			{
				if ((this._Content.Value != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content.Value = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Project_Old_Contract_Old", Storage="_Project_Old", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project_Old Project_Old
		{
			get
			{
				return this._Project_Old.Entity;
			}
			set
			{
				Project_Old previousValue = this._Project_Old.Entity;
				if (((previousValue != value) 
							|| (this._Project_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project_Old.Entity = null;
						previousValue.Contract_Olds.Remove(this);
					}
					this._Project_Old.Entity = value;
					if ((value != null))
					{
						value.Contract_Olds.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Document")]
	public partial class Document_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _Name;
		
		private string _FileType;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _SubmitDateTime;
		
		private System.Nullable<System.DateTime> _SubmitEndDateTime;
		
		private System.Data.Linq.Link<byte[]> _Content;
		
		private int _State;
		
		private string _Censor;
		
		private System.Nullable<System.DateTime> _CensorDateTime;
		
		private bool _IsRequire;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Project_Old> _Project_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnSubmitDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmitDateTimeChanged();
    partial void OnSubmitEndDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmitEndDateTimeChanged();
    partial void OnContentChanging(byte[] value);
    partial void OnContentChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnCensorChanging(string value);
    partial void OnCensorChanged();
    partial void OnCensorDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCensorDateTimeChanged();
    partial void OnIsRequireChanging(bool value);
    partial void OnIsRequireChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Document_Old()
		{
			this._Project_Old = default(EntityRef<Project_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileType", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_SubmitDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SubmitDateTime
		{
			get
			{
				return this._SubmitDateTime;
			}
			set
			{
				if ((this._SubmitDateTime != value))
				{
					this.OnSubmitDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SubmitDateTime = value;
					this.SendPropertyChanged("SubmitDateTime");
					this.OnSubmitDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_SubmitEndDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SubmitEndDateTime
		{
			get
			{
				return this._SubmitEndDateTime;
			}
			set
			{
				if ((this._SubmitEndDateTime != value))
				{
					this.OnSubmitEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SubmitEndDateTime = value;
					this.SendPropertyChanged("SubmitEndDateTime");
					this.OnSubmitEndDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] Content
		{
			get
			{
				return this._Content.Value;
			}
			set
			{
				if ((this._Content.Value != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content.Value = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Censor", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Censor
		{
			get
			{
				return this._Censor;
			}
			set
			{
				if ((this._Censor != value))
				{
					this.OnCensorChanging(value);
					this.SendPropertyChanging();
					this._Censor = value;
					this.SendPropertyChanged("Censor");
					this.OnCensorChanged();
				}
			}
		}
		
		[Column(Storage="_CensorDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CensorDateTime
		{
			get
			{
				return this._CensorDateTime;
			}
			set
			{
				if ((this._CensorDateTime != value))
				{
					this.OnCensorDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CensorDateTime = value;
					this.SendPropertyChanged("CensorDateTime");
					this.OnCensorDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsRequire", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsRequire
		{
			get
			{
				return this._IsRequire;
			}
			set
			{
				if ((this._IsRequire != value))
				{
					this.OnIsRequireChanging(value);
					this.SendPropertyChanging();
					this._IsRequire = value;
					this.SendPropertyChanged("IsRequire");
					this.OnIsRequireChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Project_Old_Document_Old", Storage="_Project_Old", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project_Old Project_Old
		{
			get
			{
				return this._Project_Old.Entity;
			}
			set
			{
				Project_Old previousValue = this._Project_Old.Entity;
				if (((previousValue != value) 
							|| (this._Project_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project_Old.Entity = null;
						previousValue.Document_Olds.Remove(this);
					}
					this._Project_Old.Entity = value;
					if ((value != null))
					{
						value.Document_Olds.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProjectRank")]
	public partial class ProjectRank_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _IsHorizontal;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<ProjectInfo_Type_Old> _ProjectInfo_Types;
		
		private EntitySet<ProjectType_Old> _ProjectType_Olds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsHorizontalChanging(bool value);
    partial void OnIsHorizontalChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectRank_Old()
		{
			this._ProjectInfo_Types = new EntitySet<ProjectInfo_Type_Old>(new Action<ProjectInfo_Type_Old>(this.attach_ProjectInfo_Types), new Action<ProjectInfo_Type_Old>(this.detach_ProjectInfo_Types));
			this._ProjectType_Olds = new EntitySet<ProjectType_Old>(new Action<ProjectType_Old>(this.attach_ProjectType_Olds), new Action<ProjectType_Old>(this.detach_ProjectType_Olds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsHorizontal", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsHorizontal
		{
			get
			{
				return this._IsHorizontal;
			}
			set
			{
				if ((this._IsHorizontal != value))
				{
					this.OnIsHorizontalChanging(value);
					this.SendPropertyChanging();
					this._IsHorizontal = value;
					this.SendPropertyChanged("IsHorizontal");
					this.OnIsHorizontalChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectRank_Old_ProjectInfo_Type_Old", Storage="_ProjectInfo_Types", ThisKey="ID", OtherKey="RankID")]
		public EntitySet<ProjectInfo_Type_Old> ProjectInfo_Type_Olds
		{
			get
			{
				return this._ProjectInfo_Types;
			}
			set
			{
				this._ProjectInfo_Types.Assign(value);
			}
		}
		
		[Association(Name="ProjectRank_Old_ProjectType_Old", Storage="_ProjectType_Olds", ThisKey="ID", OtherKey="ProjectRankID")]
		public EntitySet<ProjectType_Old> ProjectType_Olds
		{
			get
			{
				return this._ProjectType_Olds;
			}
			set
			{
				this._ProjectType_Olds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectRank_Old = this;
		}
		
		private void detach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectRank_Old = null;
		}
		
		private void attach_ProjectType_Olds(ProjectType_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectRank_Old = this;
		}
		
		private void detach_ProjectType_Olds(ProjectType_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectRank_Old = null;
		}
	}
	
	[Table(Name="dbo.ProjectSupportField")]
	public partial class ProjectSupportField_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectTypeID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<ProjectSupportSubField_Old> _ProjectSupportSubFields;
		
		private EntitySet<ProjectInfo_Type_Old> _ProjectInfo_Types;
		
		private EntityRef<ProjectType_Old> _ProjectType_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectTypeIDChanging(int value);
    partial void OnProjectTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectSupportField_Old()
		{
			this._ProjectSupportSubFields = new EntitySet<ProjectSupportSubField_Old>(new Action<ProjectSupportSubField_Old>(this.attach_ProjectSupportSubFields), new Action<ProjectSupportSubField_Old>(this.detach_ProjectSupportSubFields));
			this._ProjectInfo_Types = new EntitySet<ProjectInfo_Type_Old>(new Action<ProjectInfo_Type_Old>(this.attach_ProjectInfo_Types), new Action<ProjectInfo_Type_Old>(this.detach_ProjectInfo_Types));
			this._ProjectType_Old = default(EntityRef<ProjectType_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectTypeID
		{
			get
			{
				return this._ProjectTypeID;
			}
			set
			{
				if ((this._ProjectTypeID != value))
				{
					if (this._ProjectType_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypeID = value;
					this.SendPropertyChanged("ProjectTypeID");
					this.OnProjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectSupportField_Old_ProjectSupportSubField_Old", Storage="_ProjectSupportSubFields", ThisKey="ID", OtherKey="ProjectSupportFieldID")]
		public EntitySet<ProjectSupportSubField_Old> ProjectSupportSubField_Olds
		{
			get
			{
				return this._ProjectSupportSubFields;
			}
			set
			{
				this._ProjectSupportSubFields.Assign(value);
			}
		}
		
		[Association(Name="ProjectSupportField_Old_ProjectInfo_Type_Old", Storage="_ProjectInfo_Types", ThisKey="ID", OtherKey="SupportFieldID")]
		public EntitySet<ProjectInfo_Type_Old> ProjectInfo_Type_Olds
		{
			get
			{
				return this._ProjectInfo_Types;
			}
			set
			{
				this._ProjectInfo_Types.Assign(value);
			}
		}
		
		[Association(Name="ProjectType_Old_ProjectSupportField_Old", Storage="_ProjectType_Old", ThisKey="ProjectTypeID", OtherKey="ID", IsForeignKey=true)]
		public ProjectType_Old ProjectType_Old
		{
			get
			{
				return this._ProjectType_Old.Entity;
			}
			set
			{
				ProjectType_Old previousValue = this._ProjectType_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectType_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectType_Old.Entity = null;
						previousValue.ProjectSupportField_Olds.Remove(this);
					}
					this._ProjectType_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectSupportField_Olds.Add(this);
						this._ProjectTypeID = value.ID;
					}
					else
					{
						this._ProjectTypeID = default(int);
					}
					this.SendPropertyChanged("ProjectType_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectSupportSubFields(ProjectSupportSubField_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportField_Old = this;
		}
		
		private void detach_ProjectSupportSubFields(ProjectSupportSubField_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportField_Old = null;
		}
		
		private void attach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportField_Old = this;
		}
		
		private void detach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportField_Old = null;
		}
	}
	
	[Table(Name="dbo.ProjectSupportSubField")]
	public partial class ProjectSupportSubField_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectSupportFieldID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<ProjectInfo_Type_Old> _ProjectInfo_Types;
		
		private EntityRef<ProjectSupportField_Old> _ProjectSupportField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectSupportFieldIDChanging(int value);
    partial void OnProjectSupportFieldIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectSupportSubField_Old()
		{
			this._ProjectInfo_Types = new EntitySet<ProjectInfo_Type_Old>(new Action<ProjectInfo_Type_Old>(this.attach_ProjectInfo_Types), new Action<ProjectInfo_Type_Old>(this.detach_ProjectInfo_Types));
			this._ProjectSupportField = default(EntityRef<ProjectSupportField_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectSupportFieldID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectSupportFieldID
		{
			get
			{
				return this._ProjectSupportFieldID;
			}
			set
			{
				if ((this._ProjectSupportFieldID != value))
				{
					if (this._ProjectSupportField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectSupportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectSupportFieldID = value;
					this.SendPropertyChanged("ProjectSupportFieldID");
					this.OnProjectSupportFieldIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectSupportSubField_Old_ProjectInfo_Type_Old", Storage="_ProjectInfo_Types", ThisKey="ID", OtherKey="SupportSubFieldID")]
		public EntitySet<ProjectInfo_Type_Old> ProjectInfo_Type_Olds
		{
			get
			{
				return this._ProjectInfo_Types;
			}
			set
			{
				this._ProjectInfo_Types.Assign(value);
			}
		}
		
		[Association(Name="ProjectSupportField_Old_ProjectSupportSubField_Old", Storage="_ProjectSupportField", ThisKey="ProjectSupportFieldID", OtherKey="ID", IsForeignKey=true)]
		public ProjectSupportField_Old ProjectSupportField_Old
		{
			get
			{
				return this._ProjectSupportField.Entity;
			}
			set
			{
				ProjectSupportField_Old previousValue = this._ProjectSupportField.Entity;
				if (((previousValue != value) 
							|| (this._ProjectSupportField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectSupportField.Entity = null;
						previousValue.ProjectSupportSubField_Olds.Remove(this);
					}
					this._ProjectSupportField.Entity = value;
					if ((value != null))
					{
						value.ProjectSupportSubField_Olds.Add(this);
						this._ProjectSupportFieldID = value.ID;
					}
					else
					{
						this._ProjectSupportFieldID = default(int);
					}
					this.SendPropertyChanged("ProjectSupportField_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportSubField_Old = this;
		}
		
		private void detach_ProjectInfo_Types(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportSubField_Old = null;
		}
	}
	
	[Table(Name="dbo.ProjectInfo_Type")]
	public partial class ProjectInfo_Type_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private System.Nullable<int> _RankID;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _SupportFieldID;
		
		private System.Nullable<int> _SupportSubFieldID;
		
		private System.Nullable<int> _SupportCategoryID;
		
		private string _RankName;
		
		private string _TypeName;
		
		private string _SupportFieldName;
		
		private string _SupportSubFieldName;
		
		private string _SupportCategoryName;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Project_Old> _Project_Olds;
		
		private EntityRef<Project_Old> _Project_Old;
		
		private EntityRef<ProjectRank_Old> _ProjectRank;
		
		private EntityRef<ProjectSupportField_Old> _ProjectSupportField;
		
		private EntityRef<ProjectSupportSubField_Old> _ProjectSupportSubField;
		
		private EntityRef<ProjectSupportCategory_Old> _ProjectSupportCategory_Old;
		
		private EntityRef<ProjectType_Old> _ProjectType_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnRankIDChanging(System.Nullable<int> value);
    partial void OnRankIDChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnSupportFieldIDChanging(System.Nullable<int> value);
    partial void OnSupportFieldIDChanged();
    partial void OnSupportSubFieldIDChanging(System.Nullable<int> value);
    partial void OnSupportSubFieldIDChanged();
    partial void OnSupportCategoryIDChanging(System.Nullable<int> value);
    partial void OnSupportCategoryIDChanged();
    partial void OnRankNameChanging(string value);
    partial void OnRankNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnSupportFieldNameChanging(string value);
    partial void OnSupportFieldNameChanged();
    partial void OnSupportSubFieldNameChanging(string value);
    partial void OnSupportSubFieldNameChanged();
    partial void OnSupportCategoryNameChanging(string value);
    partial void OnSupportCategoryNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectInfo_Type_Old()
		{
			this._Project_Olds = new EntitySet<Project_Old>(new Action<Project_Old>(this.attach_Project_Olds), new Action<Project_Old>(this.detach_Project_Olds));
			this._Project_Old = default(EntityRef<Project_Old>);
			this._ProjectRank = default(EntityRef<ProjectRank_Old>);
			this._ProjectSupportField = default(EntityRef<ProjectSupportField_Old>);
			this._ProjectSupportSubField = default(EntityRef<ProjectSupportSubField_Old>);
			this._ProjectSupportCategory_Old = default(EntityRef<ProjectSupportCategory_Old>);
			this._ProjectType_Old = default(EntityRef<ProjectType_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_RankID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> RankID
		{
			get
			{
				return this._RankID;
			}
			set
			{
				if ((this._RankID != value))
				{
					if (this._ProjectRank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRankIDChanging(value);
					this.SendPropertyChanging();
					this._RankID = value;
					this.SendPropertyChanged("RankID");
					this.OnRankIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._ProjectType_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupportFieldID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SupportFieldID
		{
			get
			{
				return this._SupportFieldID;
			}
			set
			{
				if ((this._SupportFieldID != value))
				{
					if (this._ProjectSupportField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupportFieldIDChanging(value);
					this.SendPropertyChanging();
					this._SupportFieldID = value;
					this.SendPropertyChanged("SupportFieldID");
					this.OnSupportFieldIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupportSubFieldID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SupportSubFieldID
		{
			get
			{
				return this._SupportSubFieldID;
			}
			set
			{
				if ((this._SupportSubFieldID != value))
				{
					if (this._ProjectSupportSubField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupportSubFieldIDChanging(value);
					this.SendPropertyChanging();
					this._SupportSubFieldID = value;
					this.SendPropertyChanged("SupportSubFieldID");
					this.OnSupportSubFieldIDChanged();
				}
			}
		}
		
		[Column(Storage="_SupportCategoryID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SupportCategoryID
		{
			get
			{
				return this._SupportCategoryID;
			}
			set
			{
				if ((this._SupportCategoryID != value))
				{
					if (this._ProjectSupportCategory_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupportCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SupportCategoryID = value;
					this.SendPropertyChanged("SupportCategoryID");
					this.OnSupportCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_RankName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string RankName
		{
			get
			{
				return this._RankName;
			}
			set
			{
				if ((this._RankName != value))
				{
					this.OnRankNameChanging(value);
					this.SendPropertyChanging();
					this._RankName = value;
					this.SendPropertyChanged("RankName");
					this.OnRankNameChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_SupportFieldName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SupportFieldName
		{
			get
			{
				return this._SupportFieldName;
			}
			set
			{
				if ((this._SupportFieldName != value))
				{
					this.OnSupportFieldNameChanging(value);
					this.SendPropertyChanging();
					this._SupportFieldName = value;
					this.SendPropertyChanged("SupportFieldName");
					this.OnSupportFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_SupportSubFieldName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SupportSubFieldName
		{
			get
			{
				return this._SupportSubFieldName;
			}
			set
			{
				if ((this._SupportSubFieldName != value))
				{
					this.OnSupportSubFieldNameChanging(value);
					this.SendPropertyChanging();
					this._SupportSubFieldName = value;
					this.SendPropertyChanged("SupportSubFieldName");
					this.OnSupportSubFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_SupportCategoryName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SupportCategoryName
		{
			get
			{
				return this._SupportCategoryName;
			}
			set
			{
				if ((this._SupportCategoryName != value))
				{
					this.OnSupportCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._SupportCategoryName = value;
					this.SendPropertyChanged("SupportCategoryName");
					this.OnSupportCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectInfo_Type_Old_Project_Old", Storage="_Project_Olds", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Project_Old> Project_Olds
		{
			get
			{
				return this._Project_Olds;
			}
			set
			{
				this._Project_Olds.Assign(value);
			}
		}
		
		[Association(Name="Project_Old_ProjectInfo_Type_Old", Storage="_Project_Old", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project_Old Project_Old
		{
			get
			{
				return this._Project_Old.Entity;
			}
			set
			{
				Project_Old previousValue = this._Project_Old.Entity;
				if (((previousValue != value) 
							|| (this._Project_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project_Old.Entity = null;
						previousValue.ProjectInfo_Type_Olds.Remove(this);
					}
					this._Project_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo_Type_Olds.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project_Old");
				}
			}
		}
		
		[Association(Name="ProjectRank_Old_ProjectInfo_Type_Old", Storage="_ProjectRank", ThisKey="RankID", OtherKey="ID", IsForeignKey=true)]
		public ProjectRank_Old ProjectRank_Old
		{
			get
			{
				return this._ProjectRank.Entity;
			}
			set
			{
				ProjectRank_Old previousValue = this._ProjectRank.Entity;
				if (((previousValue != value) 
							|| (this._ProjectRank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectRank.Entity = null;
						previousValue.ProjectInfo_Type_Olds.Remove(this);
					}
					this._ProjectRank.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo_Type_Olds.Add(this);
						this._RankID = value.ID;
					}
					else
					{
						this._RankID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectRank_Old");
				}
			}
		}
		
		[Association(Name="ProjectSupportField_Old_ProjectInfo_Type_Old", Storage="_ProjectSupportField", ThisKey="SupportFieldID", OtherKey="ID", IsForeignKey=true)]
		public ProjectSupportField_Old ProjectSupportField_Old
		{
			get
			{
				return this._ProjectSupportField.Entity;
			}
			set
			{
				ProjectSupportField_Old previousValue = this._ProjectSupportField.Entity;
				if (((previousValue != value) 
							|| (this._ProjectSupportField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectSupportField.Entity = null;
						previousValue.ProjectInfo_Type_Olds.Remove(this);
					}
					this._ProjectSupportField.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo_Type_Olds.Add(this);
						this._SupportFieldID = value.ID;
					}
					else
					{
						this._SupportFieldID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectSupportField_Old");
				}
			}
		}
		
		[Association(Name="ProjectSupportSubField_Old_ProjectInfo_Type_Old", Storage="_ProjectSupportSubField", ThisKey="SupportSubFieldID", OtherKey="ID", IsForeignKey=true)]
		public ProjectSupportSubField_Old ProjectSupportSubField_Old
		{
			get
			{
				return this._ProjectSupportSubField.Entity;
			}
			set
			{
				ProjectSupportSubField_Old previousValue = this._ProjectSupportSubField.Entity;
				if (((previousValue != value) 
							|| (this._ProjectSupportSubField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectSupportSubField.Entity = null;
						previousValue.ProjectInfo_Type_Olds.Remove(this);
					}
					this._ProjectSupportSubField.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo_Type_Olds.Add(this);
						this._SupportSubFieldID = value.ID;
					}
					else
					{
						this._SupportSubFieldID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectSupportSubField_Old");
				}
			}
		}
		
		[Association(Name="ProjectSupportCategory_Old_ProjectInfo_Type_Old", Storage="_ProjectSupportCategory_Old", ThisKey="SupportCategoryID", OtherKey="ID", IsForeignKey=true)]
		public ProjectSupportCategory_Old ProjectSupportCategory_Old
		{
			get
			{
				return this._ProjectSupportCategory_Old.Entity;
			}
			set
			{
				ProjectSupportCategory_Old previousValue = this._ProjectSupportCategory_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectSupportCategory_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectSupportCategory_Old.Entity = null;
						previousValue.ProjectInfo_Type_Olds.Remove(this);
					}
					this._ProjectSupportCategory_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo_Type_Olds.Add(this);
						this._SupportCategoryID = value.ID;
					}
					else
					{
						this._SupportCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectSupportCategory_Old");
				}
			}
		}
		
		[Association(Name="ProjectType_Old_ProjectInfo_Type_Old", Storage="_ProjectType_Old", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public ProjectType_Old ProjectType_Old
		{
			get
			{
				return this._ProjectType_Old.Entity;
			}
			set
			{
				ProjectType_Old previousValue = this._ProjectType_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectType_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectType_Old.Entity = null;
						previousValue.ProjectInfo_Type_Olds.Remove(this);
					}
					this._ProjectType_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo_Type_Olds.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectType_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Type = this;
		}
		
		private void detach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Type = null;
		}
	}
	
	[Table(Name="dbo.FundDescend")]
	public partial class FundDescend_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FinanceID;
		
		private int _ProjectInfo_FundID;
		
		private System.DateTime _DescendDateTime;
		
		private long _Amount;
		
		private string _Operator;
		
		private int _State;
		
		private bool _IsAllocated;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<FundAllocation_Old> _FundAllocation_Olds;
		
		private EntityRef<ProjectInfo_Fund_Old> _ProjectInfo_Fund_Old;
		
		private EntityRef<Finance_Old> _Finance_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFinanceIDChanging(int value);
    partial void OnFinanceIDChanged();
    partial void OnProjectInfo_FundIDChanging(int value);
    partial void OnProjectInfo_FundIDChanged();
    partial void OnDescendDateTimeChanging(System.DateTime value);
    partial void OnDescendDateTimeChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnOperatorChanging(string value);
    partial void OnOperatorChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnIsAllocatedChanging(bool value);
    partial void OnIsAllocatedChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public FundDescend_Old()
		{
			this._FundAllocation_Olds = new EntitySet<FundAllocation_Old>(new Action<FundAllocation_Old>(this.attach_FundAllocation_Olds), new Action<FundAllocation_Old>(this.detach_FundAllocation_Olds));
			this._ProjectInfo_Fund_Old = default(EntityRef<ProjectInfo_Fund_Old>);
			this._Finance_Old = default(EntityRef<Finance_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FinanceID
		{
			get
			{
				return this._FinanceID;
			}
			set
			{
				if ((this._FinanceID != value))
				{
					if (this._Finance_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinanceIDChanging(value);
					this.SendPropertyChanging();
					this._FinanceID = value;
					this.SendPropertyChanged("FinanceID");
					this.OnFinanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectInfo_FundID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectInfo_FundID
		{
			get
			{
				return this._ProjectInfo_FundID;
			}
			set
			{
				if ((this._ProjectInfo_FundID != value))
				{
					if (this._ProjectInfo_Fund_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectInfo_FundIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectInfo_FundID = value;
					this.SendPropertyChanged("ProjectInfo_FundID");
					this.OnProjectInfo_FundIDChanged();
				}
			}
		}
		
		[Column(Storage="_DescendDateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DescendDateTime
		{
			get
			{
				return this._DescendDateTime;
			}
			set
			{
				if ((this._DescendDateTime != value))
				{
					this.OnDescendDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DescendDateTime = value;
					this.SendPropertyChanged("DescendDateTime");
					this.OnDescendDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Operator", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Operator
		{
			get
			{
				return this._Operator;
			}
			set
			{
				if ((this._Operator != value))
				{
					this.OnOperatorChanging(value);
					this.SendPropertyChanging();
					this._Operator = value;
					this.SendPropertyChanged("Operator");
					this.OnOperatorChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_IsAllocated", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAllocated
		{
			get
			{
				return this._IsAllocated;
			}
			set
			{
				if ((this._IsAllocated != value))
				{
					this.OnIsAllocatedChanging(value);
					this.SendPropertyChanging();
					this._IsAllocated = value;
					this.SendPropertyChanged("IsAllocated");
					this.OnIsAllocatedChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="FundDescend_Old_FundAllocation_Old", Storage="_FundAllocation_Olds", ThisKey="ID", OtherKey="FundDescendID")]
		public EntitySet<FundAllocation_Old> FundAllocation_Olds
		{
			get
			{
				return this._FundAllocation_Olds;
			}
			set
			{
				this._FundAllocation_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_FundDescend_Old", Storage="_ProjectInfo_Fund_Old", ThisKey="ProjectInfo_FundID", OtherKey="ID", IsForeignKey=true)]
		public ProjectInfo_Fund_Old ProjectInfo_Fund_Old
		{
			get
			{
				return this._ProjectInfo_Fund_Old.Entity;
			}
			set
			{
				ProjectInfo_Fund_Old previousValue = this._ProjectInfo_Fund_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo_Fund_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo_Fund_Old.Entity = null;
						previousValue.FundDescend_Olds.Remove(this);
					}
					this._ProjectInfo_Fund_Old.Entity = value;
					if ((value != null))
					{
						value.FundDescend_Olds.Add(this);
						this._ProjectInfo_FundID = value.ID;
					}
					else
					{
						this._ProjectInfo_FundID = default(int);
					}
					this.SendPropertyChanged("ProjectInfo_Fund_Old");
				}
			}
		}
		
		[Association(Name="Finance_Old_FundDescend_Old", Storage="_Finance_Old", ThisKey="FinanceID", OtherKey="ID", IsForeignKey=true)]
		public Finance_Old Finance_Old
		{
			get
			{
				return this._Finance_Old.Entity;
			}
			set
			{
				Finance_Old previousValue = this._Finance_Old.Entity;
				if (((previousValue != value) 
							|| (this._Finance_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Finance_Old.Entity = null;
						previousValue.FundDescend_Olds.Remove(this);
					}
					this._Finance_Old.Entity = value;
					if ((value != null))
					{
						value.FundDescend_Olds.Add(this);
						this._FinanceID = value.ID;
					}
					else
					{
						this._FinanceID = default(int);
					}
					this.SendPropertyChanged("Finance_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FundAllocation_Olds(FundAllocation_Old entity)
		{
			this.SendPropertyChanging();
			entity.FundDescend_Old = this;
		}
		
		private void detach_FundAllocation_Olds(FundAllocation_Old entity)
		{
			this.SendPropertyChanging();
			entity.FundDescend_Old = null;
		}
	}
	
	[Table(Name="dbo.ProjectInfo_Fund")]
	public partial class ProjectInfo_Fund_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private string _AccountBookNumber;
		
		private int _FundMemberCount;
		
		private string _FundFrom;
		
		private string _FundFromUnit;
		
		private string _FundFromUnitAddress;
		
		private long _FundTotal;
		
		private long _FundContract;
		
		private System.Nullable<long> _FundPlanOutTotal;
		
		private System.Nullable<long> _FundPlanOversea;
		
		private System.Nullable<long> _FundPlanHardware;
		
		private long _FundReceived;
		
		private long _FundAlreadyIn;
		
		private long _FundAlreadyOut;
		
		private long _FundAlreadyOversea;
		
		private long _FundAlreadyHardware;
		
		private long _OverheadExpensesIn;
		
		private long _OverheadExpensesOut;
		
		private long _OverheadExpensesOversea;
		
		private long _OverheadExpensesHardware;
		
		private long _OverheadExpenseInTotal;
		
		private long _OverheadExpenseOutTotal;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Project_Old> _Project_Olds;
		
		private EntitySet<FundDescend_Old> _FundDescend_Olds;
		
		private EntitySet<PayPlanItem_Old> _PayPlanItem_Olds;
		
		private EntitySet<FundMember_Old> _FundMember_Olds;
		
		private EntityRef<Project_Old> _Project_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnAccountBookNumberChanging(string value);
    partial void OnAccountBookNumberChanged();
    partial void OnFundMemberCountChanging(int value);
    partial void OnFundMemberCountChanged();
    partial void OnFundFromChanging(string value);
    partial void OnFundFromChanged();
    partial void OnFundFromUnitChanging(string value);
    partial void OnFundFromUnitChanged();
    partial void OnFundFromUnitAddressChanging(string value);
    partial void OnFundFromUnitAddressChanged();
    partial void OnFundTotalChanging(long value);
    partial void OnFundTotalChanged();
    partial void OnFundContractChanging(long value);
    partial void OnFundContractChanged();
    partial void OnFundPlanOutTotalChanging(System.Nullable<long> value);
    partial void OnFundPlanOutTotalChanged();
    partial void OnFundPlanOverseaChanging(System.Nullable<long> value);
    partial void OnFundPlanOverseaChanged();
    partial void OnFundPlanHardwareChanging(System.Nullable<long> value);
    partial void OnFundPlanHardwareChanged();
    partial void OnFundReceivedChanging(long value);
    partial void OnFundReceivedChanged();
    partial void OnFundAlreadyInChanging(long value);
    partial void OnFundAlreadyInChanged();
    partial void OnFundAlreadyOutChanging(long value);
    partial void OnFundAlreadyOutChanged();
    partial void OnFundAlreadyOverseaChanging(long value);
    partial void OnFundAlreadyOverseaChanged();
    partial void OnFundAlreadyHardwareChanging(long value);
    partial void OnFundAlreadyHardwareChanged();
    partial void OnOverheadExpensesInChanging(long value);
    partial void OnOverheadExpensesInChanged();
    partial void OnOverheadExpensesOutChanging(long value);
    partial void OnOverheadExpensesOutChanged();
    partial void OnOverheadExpensesOverseaChanging(long value);
    partial void OnOverheadExpensesOverseaChanged();
    partial void OnOverheadExpensesHardwareChanging(long value);
    partial void OnOverheadExpensesHardwareChanged();
    partial void OnOverheadExpenseInTotalChanging(long value);
    partial void OnOverheadExpenseInTotalChanged();
    partial void OnOverheadExpenseOutTotalChanging(long value);
    partial void OnOverheadExpenseOutTotalChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectInfo_Fund_Old()
		{
			this._Project_Olds = new EntitySet<Project_Old>(new Action<Project_Old>(this.attach_Project_Olds), new Action<Project_Old>(this.detach_Project_Olds));
			this._FundDescend_Olds = new EntitySet<FundDescend_Old>(new Action<FundDescend_Old>(this.attach_FundDescend_Olds), new Action<FundDescend_Old>(this.detach_FundDescend_Olds));
			this._PayPlanItem_Olds = new EntitySet<PayPlanItem_Old>(new Action<PayPlanItem_Old>(this.attach_PayPlanItem_Olds), new Action<PayPlanItem_Old>(this.detach_PayPlanItem_Olds));
			this._FundMember_Olds = new EntitySet<FundMember_Old>(new Action<FundMember_Old>(this.attach_FundMember_Olds), new Action<FundMember_Old>(this.detach_FundMember_Olds));
			this._Project_Old = default(EntityRef<Project_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountBookNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AccountBookNumber
		{
			get
			{
				return this._AccountBookNumber;
			}
			set
			{
				if ((this._AccountBookNumber != value))
				{
					this.OnAccountBookNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountBookNumber = value;
					this.SendPropertyChanged("AccountBookNumber");
					this.OnAccountBookNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FundMemberCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FundMemberCount
		{
			get
			{
				return this._FundMemberCount;
			}
			set
			{
				if ((this._FundMemberCount != value))
				{
					this.OnFundMemberCountChanging(value);
					this.SendPropertyChanging();
					this._FundMemberCount = value;
					this.SendPropertyChanged("FundMemberCount");
					this.OnFundMemberCountChanged();
				}
			}
		}
		
		[Column(Storage="_FundFrom", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FundFrom
		{
			get
			{
				return this._FundFrom;
			}
			set
			{
				if ((this._FundFrom != value))
				{
					this.OnFundFromChanging(value);
					this.SendPropertyChanging();
					this._FundFrom = value;
					this.SendPropertyChanged("FundFrom");
					this.OnFundFromChanged();
				}
			}
		}
		
		[Column(Storage="_FundFromUnit", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FundFromUnit
		{
			get
			{
				return this._FundFromUnit;
			}
			set
			{
				if ((this._FundFromUnit != value))
				{
					this.OnFundFromUnitChanging(value);
					this.SendPropertyChanging();
					this._FundFromUnit = value;
					this.SendPropertyChanged("FundFromUnit");
					this.OnFundFromUnitChanged();
				}
			}
		}
		
		[Column(Storage="_FundFromUnitAddress", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FundFromUnitAddress
		{
			get
			{
				return this._FundFromUnitAddress;
			}
			set
			{
				if ((this._FundFromUnitAddress != value))
				{
					this.OnFundFromUnitAddressChanging(value);
					this.SendPropertyChanging();
					this._FundFromUnitAddress = value;
					this.SendPropertyChanged("FundFromUnitAddress");
					this.OnFundFromUnitAddressChanged();
				}
			}
		}
		
		[Column(Storage="_FundTotal", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FundTotal
		{
			get
			{
				return this._FundTotal;
			}
			set
			{
				if ((this._FundTotal != value))
				{
					this.OnFundTotalChanging(value);
					this.SendPropertyChanging();
					this._FundTotal = value;
					this.SendPropertyChanged("FundTotal");
					this.OnFundTotalChanged();
				}
			}
		}
		
		[Column(Storage="_FundContract", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FundContract
		{
			get
			{
				return this._FundContract;
			}
			set
			{
				if ((this._FundContract != value))
				{
					this.OnFundContractChanging(value);
					this.SendPropertyChanging();
					this._FundContract = value;
					this.SendPropertyChanged("FundContract");
					this.OnFundContractChanged();
				}
			}
		}
		
		[Column(Storage="_FundPlanOutTotal", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> FundPlanOutTotal
		{
			get
			{
				return this._FundPlanOutTotal;
			}
			set
			{
				if ((this._FundPlanOutTotal != value))
				{
					this.OnFundPlanOutTotalChanging(value);
					this.SendPropertyChanging();
					this._FundPlanOutTotal = value;
					this.SendPropertyChanged("FundPlanOutTotal");
					this.OnFundPlanOutTotalChanged();
				}
			}
		}
		
		[Column(Storage="_FundPlanOversea", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> FundPlanOversea
		{
			get
			{
				return this._FundPlanOversea;
			}
			set
			{
				if ((this._FundPlanOversea != value))
				{
					this.OnFundPlanOverseaChanging(value);
					this.SendPropertyChanging();
					this._FundPlanOversea = value;
					this.SendPropertyChanged("FundPlanOversea");
					this.OnFundPlanOverseaChanged();
				}
			}
		}
		
		[Column(Storage="_FundPlanHardware", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> FundPlanHardware
		{
			get
			{
				return this._FundPlanHardware;
			}
			set
			{
				if ((this._FundPlanHardware != value))
				{
					this.OnFundPlanHardwareChanging(value);
					this.SendPropertyChanging();
					this._FundPlanHardware = value;
					this.SendPropertyChanged("FundPlanHardware");
					this.OnFundPlanHardwareChanged();
				}
			}
		}
		
		[Column(Storage="_FundReceived", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FundReceived
		{
			get
			{
				return this._FundReceived;
			}
			set
			{
				if ((this._FundReceived != value))
				{
					this.OnFundReceivedChanging(value);
					this.SendPropertyChanging();
					this._FundReceived = value;
					this.SendPropertyChanged("FundReceived");
					this.OnFundReceivedChanged();
				}
			}
		}
		
		[Column(Storage="_FundAlreadyIn", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FundAlreadyIn
		{
			get
			{
				return this._FundAlreadyIn;
			}
			set
			{
				if ((this._FundAlreadyIn != value))
				{
					this.OnFundAlreadyInChanging(value);
					this.SendPropertyChanging();
					this._FundAlreadyIn = value;
					this.SendPropertyChanged("FundAlreadyIn");
					this.OnFundAlreadyInChanged();
				}
			}
		}
		
		[Column(Storage="_FundAlreadyOut", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FundAlreadyOut
		{
			get
			{
				return this._FundAlreadyOut;
			}
			set
			{
				if ((this._FundAlreadyOut != value))
				{
					this.OnFundAlreadyOutChanging(value);
					this.SendPropertyChanging();
					this._FundAlreadyOut = value;
					this.SendPropertyChanged("FundAlreadyOut");
					this.OnFundAlreadyOutChanged();
				}
			}
		}
		
		[Column(Storage="_FundAlreadyOversea", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FundAlreadyOversea
		{
			get
			{
				return this._FundAlreadyOversea;
			}
			set
			{
				if ((this._FundAlreadyOversea != value))
				{
					this.OnFundAlreadyOverseaChanging(value);
					this.SendPropertyChanging();
					this._FundAlreadyOversea = value;
					this.SendPropertyChanged("FundAlreadyOversea");
					this.OnFundAlreadyOverseaChanged();
				}
			}
		}
		
		[Column(Storage="_FundAlreadyHardware", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FundAlreadyHardware
		{
			get
			{
				return this._FundAlreadyHardware;
			}
			set
			{
				if ((this._FundAlreadyHardware != value))
				{
					this.OnFundAlreadyHardwareChanging(value);
					this.SendPropertyChanging();
					this._FundAlreadyHardware = value;
					this.SendPropertyChanged("FundAlreadyHardware");
					this.OnFundAlreadyHardwareChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesIn", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesIn
		{
			get
			{
				return this._OverheadExpensesIn;
			}
			set
			{
				if ((this._OverheadExpensesIn != value))
				{
					this.OnOverheadExpensesInChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesIn = value;
					this.SendPropertyChanged("OverheadExpensesIn");
					this.OnOverheadExpensesInChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesOut", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesOut
		{
			get
			{
				return this._OverheadExpensesOut;
			}
			set
			{
				if ((this._OverheadExpensesOut != value))
				{
					this.OnOverheadExpensesOutChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesOut = value;
					this.SendPropertyChanged("OverheadExpensesOut");
					this.OnOverheadExpensesOutChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesOversea", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesOversea
		{
			get
			{
				return this._OverheadExpensesOversea;
			}
			set
			{
				if ((this._OverheadExpensesOversea != value))
				{
					this.OnOverheadExpensesOverseaChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesOversea = value;
					this.SendPropertyChanged("OverheadExpensesOversea");
					this.OnOverheadExpensesOverseaChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesHardware", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesHardware
		{
			get
			{
				return this._OverheadExpensesHardware;
			}
			set
			{
				if ((this._OverheadExpensesHardware != value))
				{
					this.OnOverheadExpensesHardwareChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesHardware = value;
					this.SendPropertyChanged("OverheadExpensesHardware");
					this.OnOverheadExpensesHardwareChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseInTotal", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpenseInTotal
		{
			get
			{
				return this._OverheadExpenseInTotal;
			}
			set
			{
				if ((this._OverheadExpenseInTotal != value))
				{
					this.OnOverheadExpenseInTotalChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseInTotal = value;
					this.SendPropertyChanged("OverheadExpenseInTotal");
					this.OnOverheadExpenseInTotalChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseOutTotal", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpenseOutTotal
		{
			get
			{
				return this._OverheadExpenseOutTotal;
			}
			set
			{
				if ((this._OverheadExpenseOutTotal != value))
				{
					this.OnOverheadExpenseOutTotalChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseOutTotal = value;
					this.SendPropertyChanged("OverheadExpenseOutTotal");
					this.OnOverheadExpenseOutTotalChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_Project_Old", Storage="_Project_Olds", ThisKey="ID", OtherKey="FundID")]
		public EntitySet<Project_Old> Project_Olds
		{
			get
			{
				return this._Project_Olds;
			}
			set
			{
				this._Project_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_FundDescend_Old", Storage="_FundDescend_Olds", ThisKey="ID", OtherKey="ProjectInfo_FundID")]
		public EntitySet<FundDescend_Old> FundDescend_Olds
		{
			get
			{
				return this._FundDescend_Olds;
			}
			set
			{
				this._FundDescend_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_PayPlanItem_Old", Storage="_PayPlanItem_Olds", ThisKey="ID", OtherKey="ProjectInfo_FundID")]
		public EntitySet<PayPlanItem_Old> PayPlanItem_Olds
		{
			get
			{
				return this._PayPlanItem_Olds;
			}
			set
			{
				this._PayPlanItem_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_FundMember_Old", Storage="_FundMember_Olds", ThisKey="ID", OtherKey="ProjectInfo_FundID")]
		public EntitySet<FundMember_Old> FundMember_Olds
		{
			get
			{
				return this._FundMember_Olds;
			}
			set
			{
				this._FundMember_Olds.Assign(value);
			}
		}
		
		[Association(Name="Project_Old_ProjectInfo_Fund_Old", Storage="_Project_Old", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project_Old Project_Old
		{
			get
			{
				return this._Project_Old.Entity;
			}
			set
			{
				Project_Old previousValue = this._Project_Old.Entity;
				if (((previousValue != value) 
							|| (this._Project_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project_Old.Entity = null;
						previousValue.ProjectInfo_Fund_Olds.Remove(this);
					}
					this._Project_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectInfo_Fund_Olds.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund = this;
		}
		
		private void detach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund = null;
		}
		
		private void attach_FundDescend_Olds(FundDescend_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund_Old = this;
		}
		
		private void detach_FundDescend_Olds(FundDescend_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund_Old = null;
		}
		
		private void attach_PayPlanItem_Olds(PayPlanItem_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund_Old = this;
		}
		
		private void detach_PayPlanItem_Olds(PayPlanItem_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund_Old = null;
		}
		
		private void attach_FundMember_Olds(FundMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund_Old = this;
		}
		
		private void detach_FundMember_Olds(FundMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectInfo_Fund_Old = null;
		}
	}
	
	[Table(Name="dbo.FundAllocation")]
	public partial class FundAllocation_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FundDescendID;
		
		private long _Amount;
		
		private string _ProjectName;
		
		private long _AllocationIn;
		
		private long _AllocationOut;
		
		private long _AllocationOversea;
		
		private long _AllocationHardware;
		
		private long _OverheadExpensesIn;
		
		private long _OverheadExpensesOut;
		
		private long _OverheadExpensesHardware;
		
		private long _OverheadExpensesOversea;
		
		private System.Nullable<System.DateTime> _SubmitDateTime;
		
		private string _Principle;
		
		private int _CensorState;
		
		private string _Censor;
		
		private System.Nullable<System.DateTime> _CensorDateTime;
		
		private string _CensorRemark;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Voucher_Old> _Voucher_Olds;
		
		private EntityRef<FundDescend_Old> _FundDescend_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFundDescendIDChanging(System.Nullable<int> value);
    partial void OnFundDescendIDChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnAllocationInChanging(long value);
    partial void OnAllocationInChanged();
    partial void OnAllocationOutChanging(long value);
    partial void OnAllocationOutChanged();
    partial void OnAllocationOverseaChanging(long value);
    partial void OnAllocationOverseaChanged();
    partial void OnAllocationHardwareChanging(long value);
    partial void OnAllocationHardwareChanged();
    partial void OnOverheadExpensesInChanging(long value);
    partial void OnOverheadExpensesInChanged();
    partial void OnOverheadExpensesOutChanging(long value);
    partial void OnOverheadExpensesOutChanged();
    partial void OnOverheadExpensesHardwareChanging(long value);
    partial void OnOverheadExpensesHardwareChanged();
    partial void OnOverheadExpensesOverseaChanging(long value);
    partial void OnOverheadExpensesOverseaChanged();
    partial void OnSubmitDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmitDateTimeChanged();
    partial void OnPrincipleChanging(string value);
    partial void OnPrincipleChanged();
    partial void OnCensorStateChanging(int value);
    partial void OnCensorStateChanged();
    partial void OnCensorChanging(string value);
    partial void OnCensorChanged();
    partial void OnCensorDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCensorDateTimeChanged();
    partial void OnCensorRemarkChanging(string value);
    partial void OnCensorRemarkChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public FundAllocation_Old()
		{
			this._Voucher_Olds = new EntitySet<Voucher_Old>(new Action<Voucher_Old>(this.attach_Voucher_Olds), new Action<Voucher_Old>(this.detach_Voucher_Olds));
			this._FundDescend_Old = default(EntityRef<FundDescend_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FundDescendID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FundDescendID
		{
			get
			{
				return this._FundDescendID;
			}
			set
			{
				if ((this._FundDescendID != value))
				{
					if (this._FundDescend_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundDescendIDChanging(value);
					this.SendPropertyChanging();
					this._FundDescendID = value;
					this.SendPropertyChanged("FundDescendID");
					this.OnFundDescendIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationIn", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationIn
		{
			get
			{
				return this._AllocationIn;
			}
			set
			{
				if ((this._AllocationIn != value))
				{
					this.OnAllocationInChanging(value);
					this.SendPropertyChanging();
					this._AllocationIn = value;
					this.SendPropertyChanged("AllocationIn");
					this.OnAllocationInChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationOut", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationOut
		{
			get
			{
				return this._AllocationOut;
			}
			set
			{
				if ((this._AllocationOut != value))
				{
					this.OnAllocationOutChanging(value);
					this.SendPropertyChanging();
					this._AllocationOut = value;
					this.SendPropertyChanged("AllocationOut");
					this.OnAllocationOutChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationOversea", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationOversea
		{
			get
			{
				return this._AllocationOversea;
			}
			set
			{
				if ((this._AllocationOversea != value))
				{
					this.OnAllocationOverseaChanging(value);
					this.SendPropertyChanging();
					this._AllocationOversea = value;
					this.SendPropertyChanged("AllocationOversea");
					this.OnAllocationOverseaChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationHardware", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationHardware
		{
			get
			{
				return this._AllocationHardware;
			}
			set
			{
				if ((this._AllocationHardware != value))
				{
					this.OnAllocationHardwareChanging(value);
					this.SendPropertyChanging();
					this._AllocationHardware = value;
					this.SendPropertyChanged("AllocationHardware");
					this.OnAllocationHardwareChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesIn", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesIn
		{
			get
			{
				return this._OverheadExpensesIn;
			}
			set
			{
				if ((this._OverheadExpensesIn != value))
				{
					this.OnOverheadExpensesInChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesIn = value;
					this.SendPropertyChanged("OverheadExpensesIn");
					this.OnOverheadExpensesInChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesOut", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesOut
		{
			get
			{
				return this._OverheadExpensesOut;
			}
			set
			{
				if ((this._OverheadExpensesOut != value))
				{
					this.OnOverheadExpensesOutChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesOut = value;
					this.SendPropertyChanged("OverheadExpensesOut");
					this.OnOverheadExpensesOutChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesHardware", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesHardware
		{
			get
			{
				return this._OverheadExpensesHardware;
			}
			set
			{
				if ((this._OverheadExpensesHardware != value))
				{
					this.OnOverheadExpensesHardwareChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesHardware = value;
					this.SendPropertyChanged("OverheadExpensesHardware");
					this.OnOverheadExpensesHardwareChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesOversea", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesOversea
		{
			get
			{
				return this._OverheadExpensesOversea;
			}
			set
			{
				if ((this._OverheadExpensesOversea != value))
				{
					this.OnOverheadExpensesOverseaChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesOversea = value;
					this.SendPropertyChanged("OverheadExpensesOversea");
					this.OnOverheadExpensesOverseaChanged();
				}
			}
		}
		
		[Column(Storage="_SubmitDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> SubmitDateTime
		{
			get
			{
				return this._SubmitDateTime;
			}
			set
			{
				if ((this._SubmitDateTime != value))
				{
					this.OnSubmitDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SubmitDateTime = value;
					this.SendPropertyChanged("SubmitDateTime");
					this.OnSubmitDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Principle", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Principle
		{
			get
			{
				return this._Principle;
			}
			set
			{
				if ((this._Principle != value))
				{
					this.OnPrincipleChanging(value);
					this.SendPropertyChanging();
					this._Principle = value;
					this.SendPropertyChanged("Principle");
					this.OnPrincipleChanged();
				}
			}
		}
		
		[Column(Storage="_CensorState", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CensorState
		{
			get
			{
				return this._CensorState;
			}
			set
			{
				if ((this._CensorState != value))
				{
					this.OnCensorStateChanging(value);
					this.SendPropertyChanging();
					this._CensorState = value;
					this.SendPropertyChanged("CensorState");
					this.OnCensorStateChanged();
				}
			}
		}
		
		[Column(Storage="_Censor", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Censor
		{
			get
			{
				return this._Censor;
			}
			set
			{
				if ((this._Censor != value))
				{
					this.OnCensorChanging(value);
					this.SendPropertyChanging();
					this._Censor = value;
					this.SendPropertyChanged("Censor");
					this.OnCensorChanged();
				}
			}
		}
		
		[Column(Storage="_CensorDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CensorDateTime
		{
			get
			{
				return this._CensorDateTime;
			}
			set
			{
				if ((this._CensorDateTime != value))
				{
					this.OnCensorDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CensorDateTime = value;
					this.SendPropertyChanged("CensorDateTime");
					this.OnCensorDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CensorRemark", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CensorRemark
		{
			get
			{
				return this._CensorRemark;
			}
			set
			{
				if ((this._CensorRemark != value))
				{
					this.OnCensorRemarkChanging(value);
					this.SendPropertyChanging();
					this._CensorRemark = value;
					this.SendPropertyChanged("CensorRemark");
					this.OnCensorRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="FundAllocation_Old_Voucher_Old", Storage="_Voucher_Olds", ThisKey="ID", OtherKey="FundAllocationID")]
		public EntitySet<Voucher_Old> Voucher_Olds
		{
			get
			{
				return this._Voucher_Olds;
			}
			set
			{
				this._Voucher_Olds.Assign(value);
			}
		}
		
		[Association(Name="FundDescend_Old_FundAllocation_Old", Storage="_FundDescend_Old", ThisKey="FundDescendID", OtherKey="ID", IsForeignKey=true)]
		public FundDescend_Old FundDescend_Old
		{
			get
			{
				return this._FundDescend_Old.Entity;
			}
			set
			{
				FundDescend_Old previousValue = this._FundDescend_Old.Entity;
				if (((previousValue != value) 
							|| (this._FundDescend_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FundDescend_Old.Entity = null;
						previousValue.FundAllocation_Olds.Remove(this);
					}
					this._FundDescend_Old.Entity = value;
					if ((value != null))
					{
						value.FundAllocation_Olds.Add(this);
						this._FundDescendID = value.ID;
					}
					else
					{
						this._FundDescendID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FundDescend_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Voucher_Olds(Voucher_Old entity)
		{
			this.SendPropertyChanging();
			entity.FundAllocation_Old = this;
		}
		
		private void detach_Voucher_Olds(Voucher_Old entity)
		{
			this.SendPropertyChanging();
			entity.FundAllocation_Old = null;
		}
	}
	
	[Table(Name="dbo.VoucherItemHardware")]
	public partial class VoucherItemHardware_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VoucherID;
		
		private long _Amount;
		
		private long _OverheadExpenses;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Voucher_Old> _Voucher_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVoucherIDChanging(int value);
    partial void OnVoucherIDChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnOverheadExpensesChanging(long value);
    partial void OnOverheadExpensesChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public VoucherItemHardware_Old()
		{
			this._Voucher_Old = default(EntityRef<Voucher_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_VoucherID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VoucherID
		{
			get
			{
				return this._VoucherID;
			}
			set
			{
				if ((this._VoucherID != value))
				{
					if (this._Voucher_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherIDChanging(value);
					this.SendPropertyChanging();
					this._VoucherID = value;
					this.SendPropertyChanged("VoucherID");
					this.OnVoucherIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenses", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpenses
		{
			get
			{
				return this._OverheadExpenses;
			}
			set
			{
				if ((this._OverheadExpenses != value))
				{
					this.OnOverheadExpensesChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenses = value;
					this.SendPropertyChanged("OverheadExpenses");
					this.OnOverheadExpensesChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemHardware_Old", Storage="_Voucher_Old", ThisKey="VoucherID", OtherKey="ID", IsForeignKey=true)]
		public Voucher_Old Voucher_Old
		{
			get
			{
				return this._Voucher_Old.Entity;
			}
			set
			{
				Voucher_Old previousValue = this._Voucher_Old.Entity;
				if (((previousValue != value) 
							|| (this._Voucher_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher_Old.Entity = null;
						previousValue.VoucherItemHardware_Olds.Remove(this);
					}
					this._Voucher_Old.Entity = value;
					if ((value != null))
					{
						value.VoucherItemHardware_Olds.Add(this);
						this._VoucherID = value.ID;
					}
					else
					{
						this._VoucherID = default(int);
					}
					this.SendPropertyChanged("Voucher_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VoucherItemOversea")]
	public partial class VoucherItemOversea_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VoucherID;
		
		private long _Amount;
		
		private long _OverheadExpenses;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Voucher_Old> _Voucher_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVoucherIDChanging(int value);
    partial void OnVoucherIDChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnOverheadExpensesChanging(long value);
    partial void OnOverheadExpensesChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public VoucherItemOversea_Old()
		{
			this._Voucher_Old = default(EntityRef<Voucher_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_VoucherID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VoucherID
		{
			get
			{
				return this._VoucherID;
			}
			set
			{
				if ((this._VoucherID != value))
				{
					if (this._Voucher_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherIDChanging(value);
					this.SendPropertyChanging();
					this._VoucherID = value;
					this.SendPropertyChanged("VoucherID");
					this.OnVoucherIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenses", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpenses
		{
			get
			{
				return this._OverheadExpenses;
			}
			set
			{
				if ((this._OverheadExpenses != value))
				{
					this.OnOverheadExpensesChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenses = value;
					this.SendPropertyChanged("OverheadExpenses");
					this.OnOverheadExpensesChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemOversea_Old", Storage="_Voucher_Old", ThisKey="VoucherID", OtherKey="ID", IsForeignKey=true)]
		public Voucher_Old Voucher_Old
		{
			get
			{
				return this._Voucher_Old.Entity;
			}
			set
			{
				Voucher_Old previousValue = this._Voucher_Old.Entity;
				if (((previousValue != value) 
							|| (this._Voucher_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher_Old.Entity = null;
						previousValue.VoucherItemOversea_Olds.Remove(this);
					}
					this._Voucher_Old.Entity = value;
					if ((value != null))
					{
						value.VoucherItemOversea_Olds.Add(this);
						this._VoucherID = value.ID;
					}
					else
					{
						this._VoucherID = default(int);
					}
					this.SendPropertyChanged("Voucher_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VoucherItemIn")]
	public partial class VoucherItemIn_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VoucherID;
		
		private long _Amount;
		
		private long _OverheadExpenses;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Voucher_Old> _Voucher_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVoucherIDChanging(int value);
    partial void OnVoucherIDChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnOverheadExpensesChanging(long value);
    partial void OnOverheadExpensesChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public VoucherItemIn_Old()
		{
			this._Voucher_Old = default(EntityRef<Voucher_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_VoucherID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VoucherID
		{
			get
			{
				return this._VoucherID;
			}
			set
			{
				if ((this._VoucherID != value))
				{
					if (this._Voucher_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherIDChanging(value);
					this.SendPropertyChanging();
					this._VoucherID = value;
					this.SendPropertyChanged("VoucherID");
					this.OnVoucherIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenses", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpenses
		{
			get
			{
				return this._OverheadExpenses;
			}
			set
			{
				if ((this._OverheadExpenses != value))
				{
					this.OnOverheadExpensesChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenses = value;
					this.SendPropertyChanged("OverheadExpenses");
					this.OnOverheadExpensesChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemIn_Old", Storage="_Voucher_Old", ThisKey="VoucherID", OtherKey="ID", IsForeignKey=true)]
		public Voucher_Old Voucher_Old
		{
			get
			{
				return this._Voucher_Old.Entity;
			}
			set
			{
				Voucher_Old previousValue = this._Voucher_Old.Entity;
				if (((previousValue != value) 
							|| (this._Voucher_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher_Old.Entity = null;
						previousValue.VoucherItemIn_Olds.Remove(this);
					}
					this._Voucher_Old.Entity = value;
					if ((value != null))
					{
						value.VoucherItemIn_Olds.Add(this);
						this._VoucherID = value.ID;
					}
					else
					{
						this._VoucherID = default(int);
					}
					this.SendPropertyChanged("Voucher_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VoucherItemOut")]
	public partial class VoucherItemOut_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VoucherID;
		
		private long _Amount;
		
		private long _OverheadExpenses;
		
		private string _Corporation;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Voucher_Old> _Voucher_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVoucherIDChanging(int value);
    partial void OnVoucherIDChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnOverheadExpensesChanging(long value);
    partial void OnOverheadExpensesChanged();
    partial void OnCorporationChanging(string value);
    partial void OnCorporationChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public VoucherItemOut_Old()
		{
			this._Voucher_Old = default(EntityRef<Voucher_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_VoucherID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VoucherID
		{
			get
			{
				return this._VoucherID;
			}
			set
			{
				if ((this._VoucherID != value))
				{
					if (this._Voucher_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoucherIDChanging(value);
					this.SendPropertyChanging();
					this._VoucherID = value;
					this.SendPropertyChanged("VoucherID");
					this.OnVoucherIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenses", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpenses
		{
			get
			{
				return this._OverheadExpenses;
			}
			set
			{
				if ((this._OverheadExpenses != value))
				{
					this.OnOverheadExpensesChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenses = value;
					this.SendPropertyChanged("OverheadExpenses");
					this.OnOverheadExpensesChanged();
				}
			}
		}
		
		[Column(Storage="_Corporation", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Corporation
		{
			get
			{
				return this._Corporation;
			}
			set
			{
				if ((this._Corporation != value))
				{
					this.OnCorporationChanging(value);
					this.SendPropertyChanging();
					this._Corporation = value;
					this.SendPropertyChanged("Corporation");
					this.OnCorporationChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemOut_Old", Storage="_Voucher_Old", ThisKey="VoucherID", OtherKey="ID", IsForeignKey=true)]
		public Voucher_Old Voucher_Old
		{
			get
			{
				return this._Voucher_Old.Entity;
			}
			set
			{
				Voucher_Old previousValue = this._Voucher_Old.Entity;
				if (((previousValue != value) 
							|| (this._Voucher_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voucher_Old.Entity = null;
						previousValue.VoucherItemOut_Olds.Remove(this);
					}
					this._Voucher_Old.Entity = value;
					if ((value != null))
					{
						value.VoucherItemOut_Olds.Add(this);
						this._VoucherID = value.ID;
					}
					else
					{
						this._VoucherID = default(int);
					}
					this.SendPropertyChanged("Voucher_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AccountBookNumberCount")]
	public partial class AccountBookNumberCount_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CharacterNumber;
		
		private int _Count;
		
		private System.Data.Linq.Binary _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCharacterNumberChanging(string value);
    partial void OnCharacterNumberChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public AccountBookNumberCount_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CharacterNumber", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CharacterNumber
		{
			get
			{
				return this._CharacterNumber;
			}
			set
			{
				if ((this._CharacterNumber != value))
				{
					this.OnCharacterNumberChanging(value);
					this.SendPropertyChanging();
					this._CharacterNumber = value;
					this.SendPropertyChanged("CharacterNumber");
					this.OnCharacterNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PayPlanItem")]
	public partial class PayPlanItem_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectInfo_FundID;
		
		private System.DateTime _DateTime;
		
		private long _Amount;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<ProjectInfo_Fund_Old> _ProjectInfo_Fund_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectInfo_FundIDChanging(int value);
    partial void OnProjectInfo_FundIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public PayPlanItem_Old()
		{
			this._ProjectInfo_Fund_Old = default(EntityRef<ProjectInfo_Fund_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectInfo_FundID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectInfo_FundID
		{
			get
			{
				return this._ProjectInfo_FundID;
			}
			set
			{
				if ((this._ProjectInfo_FundID != value))
				{
					if (this._ProjectInfo_Fund_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectInfo_FundIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectInfo_FundID = value;
					this.SendPropertyChanged("ProjectInfo_FundID");
					this.OnProjectInfo_FundIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_PayPlanItem_Old", Storage="_ProjectInfo_Fund_Old", ThisKey="ProjectInfo_FundID", OtherKey="ID", IsForeignKey=true)]
		public ProjectInfo_Fund_Old ProjectInfo_Fund_Old
		{
			get
			{
				return this._ProjectInfo_Fund_Old.Entity;
			}
			set
			{
				ProjectInfo_Fund_Old previousValue = this._ProjectInfo_Fund_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo_Fund_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo_Fund_Old.Entity = null;
						previousValue.PayPlanItem_Olds.Remove(this);
					}
					this._ProjectInfo_Fund_Old.Entity = value;
					if ((value != null))
					{
						value.PayPlanItem_Olds.Add(this);
						this._ProjectInfo_FundID = value.ID;
					}
					else
					{
						this._ProjectInfo_FundID = default(int);
					}
					this.SendPropertyChanged("ProjectInfo_Fund_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FundMember")]
	public partial class FundMember_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ProjectInfo_FundID;
		
		private System.Nullable<int> _ExpertID;
		
		private string _ExpertName;
		
		private string _ExpertNumber;
		
		private string _AccountBookNumber;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Voucher_Old> _Voucher_Olds;
		
		private EntityRef<ProjectInfo_Fund_Old> _ProjectInfo_Fund_Old;
		
		private EntityRef<Expert_Old> _Expert_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectInfo_FundIDChanging(System.Nullable<int> value);
    partial void OnProjectInfo_FundIDChanged();
    partial void OnExpertIDChanging(System.Nullable<int> value);
    partial void OnExpertIDChanged();
    partial void OnExpertNameChanging(string value);
    partial void OnExpertNameChanged();
    partial void OnExpertNumberChanging(string value);
    partial void OnExpertNumberChanged();
    partial void OnAccountBookNumberChanging(string value);
    partial void OnAccountBookNumberChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public FundMember_Old()
		{
			this._Voucher_Olds = new EntitySet<Voucher_Old>(new Action<Voucher_Old>(this.attach_Voucher_Olds), new Action<Voucher_Old>(this.detach_Voucher_Olds));
			this._ProjectInfo_Fund_Old = default(EntityRef<ProjectInfo_Fund_Old>);
			this._Expert_Old = default(EntityRef<Expert_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectInfo_FundID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ProjectInfo_FundID
		{
			get
			{
				return this._ProjectInfo_FundID;
			}
			set
			{
				if ((this._ProjectInfo_FundID != value))
				{
					if (this._ProjectInfo_Fund_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectInfo_FundIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectInfo_FundID = value;
					this.SendPropertyChanged("ProjectInfo_FundID");
					this.OnProjectInfo_FundIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ExpertID
		{
			get
			{
				return this._ExpertID;
			}
			set
			{
				if ((this._ExpertID != value))
				{
					if (this._Expert_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpertIDChanging(value);
					this.SendPropertyChanging();
					this._ExpertID = value;
					this.SendPropertyChanged("ExpertID");
					this.OnExpertIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ExpertName
		{
			get
			{
				return this._ExpertName;
			}
			set
			{
				if ((this._ExpertName != value))
				{
					this.OnExpertNameChanging(value);
					this.SendPropertyChanging();
					this._ExpertName = value;
					this.SendPropertyChanged("ExpertName");
					this.OnExpertNameChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ExpertNumber
		{
			get
			{
				return this._ExpertNumber;
			}
			set
			{
				if ((this._ExpertNumber != value))
				{
					this.OnExpertNumberChanging(value);
					this.SendPropertyChanging();
					this._ExpertNumber = value;
					this.SendPropertyChanged("ExpertNumber");
					this.OnExpertNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AccountBookNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AccountBookNumber
		{
			get
			{
				return this._AccountBookNumber;
			}
			set
			{
				if ((this._AccountBookNumber != value))
				{
					this.OnAccountBookNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountBookNumber = value;
					this.SendPropertyChanged("AccountBookNumber");
					this.OnAccountBookNumberChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="FundMember_Old_Voucher_Old", Storage="_Voucher_Olds", ThisKey="ID", OtherKey="FundMemberID")]
		public EntitySet<Voucher_Old> Voucher_Olds
		{
			get
			{
				return this._Voucher_Olds;
			}
			set
			{
				this._Voucher_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectInfo_Fund_Old_FundMember_Old", Storage="_ProjectInfo_Fund_Old", ThisKey="ProjectInfo_FundID", OtherKey="ID", IsForeignKey=true)]
		public ProjectInfo_Fund_Old ProjectInfo_Fund_Old
		{
			get
			{
				return this._ProjectInfo_Fund_Old.Entity;
			}
			set
			{
				ProjectInfo_Fund_Old previousValue = this._ProjectInfo_Fund_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectInfo_Fund_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectInfo_Fund_Old.Entity = null;
						previousValue.FundMember_Olds.Remove(this);
					}
					this._ProjectInfo_Fund_Old.Entity = value;
					if ((value != null))
					{
						value.FundMember_Olds.Add(this);
						this._ProjectInfo_FundID = value.ID;
					}
					else
					{
						this._ProjectInfo_FundID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProjectInfo_Fund_Old");
				}
			}
		}
		
		[Association(Name="Expert_Old_FundMember_Old", Storage="_Expert_Old", ThisKey="ExpertID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert_Old
		{
			get
			{
				return this._Expert_Old.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert_Old.Entity;
				if (((previousValue != value) 
							|| (this._Expert_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert_Old.Entity = null;
						previousValue.FundMember_Olds.Remove(this);
					}
					this._Expert_Old.Entity = value;
					if ((value != null))
					{
						value.FundMember_Olds.Add(this);
						this._ExpertID = value.ID;
					}
					else
					{
						this._ExpertID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Voucher_Olds(Voucher_Old entity)
		{
			this.SendPropertyChanging();
			entity.FundMember_Old = this;
		}
		
		private void detach_Voucher_Olds(Voucher_Old entity)
		{
			this.SendPropertyChanging();
			entity.FundMember_Old = null;
		}
	}
	
	[Table(Name="dbo.Department")]
	public partial class Department_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _Code;
		
		private bool _IsCollege;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Expert_Old> _Experts;
		
		private EntitySet<Expert_Old> _Experts1;
		
		private EntitySet<Expert_Old> _Expert_Olds;
		
		private EntitySet<Award_Old> _Award_Olds;
		
		private EntitySet<Patent_Old> _Patent_Olds;
		
		private EntitySet<Paper_Old> _Paper_Olds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnIsCollegeChanging(bool value);
    partial void OnIsCollegeChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Department_Old()
		{
			this._Experts = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts), new Action<Expert_Old>(this.detach_Experts));
			this._Experts1 = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Experts1), new Action<Expert_Old>(this.detach_Experts1));
			this._Expert_Olds = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Expert_Olds), new Action<Expert_Old>(this.detach_Expert_Olds));
			this._Award_Olds = new EntitySet<Award_Old>(new Action<Award_Old>(this.attach_Award_Olds), new Action<Award_Old>(this.detach_Award_Olds));
			this._Patent_Olds = new EntitySet<Patent_Old>(new Action<Patent_Old>(this.attach_Patent_Olds), new Action<Patent_Old>(this.detach_Patent_Olds));
			this._Paper_Olds = new EntitySet<Paper_Old>(new Action<Paper_Old>(this.attach_Paper_Olds), new Action<Paper_Old>(this.detach_Paper_Olds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsCollege", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCollege
		{
			get
			{
				return this._IsCollege;
			}
			set
			{
				if ((this._IsCollege != value))
				{
					this.OnIsCollegeChanging(value);
					this.SendPropertyChanging();
					this._IsCollege = value;
					this.SendPropertyChanged("IsCollege");
					this.OnIsCollegeChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Department_Old_Expert_Old", Storage="_Experts", ThisKey="ID", OtherKey="CollegeID")]
		public EntitySet<Expert_Old> Experts
		{
			get
			{
				return this._Experts;
			}
			set
			{
				this._Experts.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Expert_Old1", Storage="_Experts1", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<Expert_Old> Experts1
		{
			get
			{
				return this._Experts1;
			}
			set
			{
				this._Experts1.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Expert_Old2", Storage="_Expert_Olds", ThisKey="ID", OtherKey="CollegeID")]
		public EntitySet<Expert_Old> Expert_Olds
		{
			get
			{
				return this._Expert_Olds;
			}
			set
			{
				this._Expert_Olds.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Award_Old", Storage="_Award_Olds", ThisKey="ID", OtherKey="CollegeID")]
		public EntitySet<Award_Old> Award_Olds
		{
			get
			{
				return this._Award_Olds;
			}
			set
			{
				this._Award_Olds.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Patent_Old", Storage="_Patent_Olds", ThisKey="ID", OtherKey="CollegeID")]
		public EntitySet<Patent_Old> Patent_Olds
		{
			get
			{
				return this._Patent_Olds;
			}
			set
			{
				this._Patent_Olds.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Paper_Old", Storage="_Paper_Olds", ThisKey="ID", OtherKey="CollegeID")]
		public EntitySet<Paper_Old> Paper_Olds
		{
			get
			{
				return this._Paper_Olds;
			}
			set
			{
				this._Paper_Olds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Experts(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = this;
		}
		
		private void detach_Experts(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = null;
		}
		
		private void attach_Experts1(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old1 = this;
		}
		
		private void detach_Experts1(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old1 = null;
		}
		
		private void attach_Expert_Olds(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old2 = this;
		}
		
		private void detach_Expert_Olds(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old2 = null;
		}
		
		private void attach_Award_Olds(Award_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = this;
		}
		
		private void detach_Award_Olds(Award_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = null;
		}
		
		private void attach_Patent_Olds(Patent_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = this;
		}
		
		private void detach_Patent_Olds(Patent_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = null;
		}
		
		private void attach_Paper_Olds(Paper_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = this;
		}
		
		private void detach_Paper_Olds(Paper_Old entity)
		{
			this.SendPropertyChanging();
			entity.Department_Old = null;
		}
	}
	
	[Table(Name="dbo.Announcement")]
	public partial class Announcement_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.DateTime _DateTime;
		
		private string _UserName;
		
		private string _Content;
		
		private bool _IsTop;
		
		private System.Data.Linq.Binary _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsTopChanging(bool value);
    partial void OnIsTopChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Announcement_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_IsTop", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsTop
		{
			get
			{
				return this._IsTop;
			}
			set
			{
				if ((this._IsTop != value))
				{
					this.OnIsTopChanging(value);
					this.SendPropertyChanging();
					this._IsTop = value;
					this.SendPropertyChanged("IsTop");
					this.OnIsTopChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Base")]
	public partial class Base_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Zip;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _Administration;
		
		private string _Rank;
		
		private System.Nullable<int> _DirectorID;
		
		private string _DirectorName;
		
		private string _DirectorNumber;
		
		private System.Nullable<int> _AcademyDirectorID;
		
		private string _AcademyDirectorName;
		
		private string _AcademyDirectorNumber;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Project_Old> _Project_Olds;
		
		private EntityRef<Expert_Old> _Expert_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAdministrationChanging(string value);
    partial void OnAdministrationChanged();
    partial void OnRankChanging(string value);
    partial void OnRankChanged();
    partial void OnDirectorIDChanging(System.Nullable<int> value);
    partial void OnDirectorIDChanged();
    partial void OnDirectorNameChanging(string value);
    partial void OnDirectorNameChanged();
    partial void OnDirectorNumberChanging(string value);
    partial void OnDirectorNumberChanged();
    partial void OnAcademyDirectorIDChanging(System.Nullable<int> value);
    partial void OnAcademyDirectorIDChanged();
    partial void OnAcademyDirectorNameChanging(string value);
    partial void OnAcademyDirectorNameChanged();
    partial void OnAcademyDirectorNumberChanging(string value);
    partial void OnAcademyDirectorNumberChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Base_Old()
		{
			this._Project_Olds = new EntitySet<Project_Old>(new Action<Project_Old>(this.attach_Project_Olds), new Action<Project_Old>(this.detach_Project_Olds));
			this._Expert_Old = default(EntityRef<Expert_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Administration", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Administration
		{
			get
			{
				return this._Administration;
			}
			set
			{
				if ((this._Administration != value))
				{
					this.OnAdministrationChanging(value);
					this.SendPropertyChanging();
					this._Administration = value;
					this.SendPropertyChanged("Administration");
					this.OnAdministrationChanged();
				}
			}
		}
		
		[Column(Storage="_Rank", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Column(Storage="_DirectorID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DirectorID
		{
			get
			{
				return this._DirectorID;
			}
			set
			{
				if ((this._DirectorID != value))
				{
					if (this._Expert_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._DirectorID = value;
					this.SendPropertyChanged("DirectorID");
					this.OnDirectorIDChanged();
				}
			}
		}
		
		[Column(Storage="_DirectorName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DirectorName
		{
			get
			{
				return this._DirectorName;
			}
			set
			{
				if ((this._DirectorName != value))
				{
					this.OnDirectorNameChanging(value);
					this.SendPropertyChanging();
					this._DirectorName = value;
					this.SendPropertyChanged("DirectorName");
					this.OnDirectorNameChanged();
				}
			}
		}
		
		[Column(Storage="_DirectorNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DirectorNumber
		{
			get
			{
				return this._DirectorNumber;
			}
			set
			{
				if ((this._DirectorNumber != value))
				{
					this.OnDirectorNumberChanging(value);
					this.SendPropertyChanging();
					this._DirectorNumber = value;
					this.SendPropertyChanged("DirectorNumber");
					this.OnDirectorNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AcademyDirectorID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AcademyDirectorID
		{
			get
			{
				return this._AcademyDirectorID;
			}
			set
			{
				if ((this._AcademyDirectorID != value))
				{
					this.OnAcademyDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._AcademyDirectorID = value;
					this.SendPropertyChanged("AcademyDirectorID");
					this.OnAcademyDirectorIDChanged();
				}
			}
		}
		
		[Column(Storage="_AcademyDirectorName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AcademyDirectorName
		{
			get
			{
				return this._AcademyDirectorName;
			}
			set
			{
				if ((this._AcademyDirectorName != value))
				{
					this.OnAcademyDirectorNameChanging(value);
					this.SendPropertyChanging();
					this._AcademyDirectorName = value;
					this.SendPropertyChanged("AcademyDirectorName");
					this.OnAcademyDirectorNameChanged();
				}
			}
		}
		
		[Column(Storage="_AcademyDirectorNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AcademyDirectorNumber
		{
			get
			{
				return this._AcademyDirectorNumber;
			}
			set
			{
				if ((this._AcademyDirectorNumber != value))
				{
					this.OnAcademyDirectorNumberChanging(value);
					this.SendPropertyChanging();
					this._AcademyDirectorNumber = value;
					this.SendPropertyChanged("AcademyDirectorNumber");
					this.OnAcademyDirectorNumberChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Base_Old_Project_Old", Storage="_Project_Olds", ThisKey="ID", OtherKey="BaseID")]
		public EntitySet<Project_Old> Project_Olds
		{
			get
			{
				return this._Project_Olds;
			}
			set
			{
				this._Project_Olds.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_Base_Old", Storage="_Expert_Old", ThisKey="DirectorID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert_Old
		{
			get
			{
				return this._Expert_Old.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert_Old.Entity;
				if (((previousValue != value) 
							|| (this._Expert_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert_Old.Entity = null;
						previousValue.Base_Olds.Remove(this);
					}
					this._Expert_Old.Entity = value;
					if ((value != null))
					{
						value.Base_Olds.Add(this);
						this._DirectorID = value.ID;
					}
					else
					{
						this._DirectorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.Base_Old = this;
		}
		
		private void detach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.Base_Old = null;
		}
	}
	
	[Table(Name="dbo.Expert")]
	public partial class Expert_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Number;
		
		private string _Name;
		
		private string _NameSpell;
		
		private int _Sex;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Nation;
		
		private string _Policy;
		
		private string _IDCardNumber;
		
		private string _AcademyDegree;
		
		private string _Specialty;
		
		private string _Post;
		
		private System.Nullable<bool> _IsDoctorDirector;
		
		private System.Nullable<bool> _IsAcademician;
		
		private string _Occupation;
		
		private string _CollegeName;
		
		private System.Nullable<int> _CollegeID;
		
		private System.Nullable<int> _DepartmentID;
		
		private string _College2;
		
		private string _Department2;
		
		private string _MobilePhone;
		
		private string _OfficePhone;
		
		private string _HomePhone;
		
		private string _Fax;
		
		private string _Address;
		
		private string _Zip;
		
		private string _Email;
		
		private System.Nullable<int> _MajorCodeID;
		
		private System.Nullable<int> _ResearchCode1ID;
		
		private System.Nullable<int> _ResearchCode2ID;
		
		private System.Nullable<int> _ResearchCode3ID;
		
		private string _Language1;
		
		private string _Language2;
		
		private string _LanguageLevel1;
		
		private string _LanguageLevel2;
		
		private string _SocietyPost;
		
		private string _WorkExperience;
		
		private string _ResearchExperience;
		
		private System.Data.Linq.Link<byte[]> _Image;
		
		private int _State;
		
		private string _PostBak;
		
		private System.Nullable<int> _PostLevel;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Project_Old> _Project_Olds;
		
		private EntitySet<Project_Old> _Project_Olds1;
		
		private EntitySet<ProjectMember_Old> _ProjectMember_Olds;
		
		private EntitySet<FundMember_Old> _FundMember_Olds;
		
		private EntitySet<Base_Old> _Base_Olds;
		
		private EntitySet<AwardWinner_Old> _AwardWinner_Olds;
		
		private EntitySet<PatentInventer_Old> _PatentInventer_Olds;
		
		private EntitySet<PaperAuthor_Old> _PaperAuthor_Olds;
		
		private EntityRef<Department_Old> _Department_Old;
		
		private EntityRef<Department_Old> _Department_Old1;
		
		private EntityRef<Department_Old> _Department_Old2;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old1;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old2;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old3;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old4;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old5;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old6;
		
		private EntityRef<SubjectSecondLevel_Old> _SubjectSecondLevel_Old7;
		
		private EntityRef<User_Old> _User_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameSpellChanging(string value);
    partial void OnNameSpellChanged();
    partial void OnSexChanging(int value);
    partial void OnSexChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnNationChanging(string value);
    partial void OnNationChanged();
    partial void OnPolicyChanging(string value);
    partial void OnPolicyChanged();
    partial void OnIDCardNumberChanging(string value);
    partial void OnIDCardNumberChanged();
    partial void OnAcademyDegreeChanging(string value);
    partial void OnAcademyDegreeChanged();
    partial void OnSpecialtyChanging(string value);
    partial void OnSpecialtyChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnIsDoctorDirectorChanging(System.Nullable<bool> value);
    partial void OnIsDoctorDirectorChanged();
    partial void OnIsAcademicianChanging(System.Nullable<bool> value);
    partial void OnIsAcademicianChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnCollegeNameChanging(string value);
    partial void OnCollegeNameChanged();
    partial void OnCollegeIDChanging(System.Nullable<int> value);
    partial void OnCollegeIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnCollege2Changing(string value);
    partial void OnCollege2Changed();
    partial void OnDepartment2Changing(string value);
    partial void OnDepartment2Changed();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMajorCodeIDChanging(System.Nullable<int> value);
    partial void OnMajorCodeIDChanged();
    partial void OnResearchCode1IDChanging(System.Nullable<int> value);
    partial void OnResearchCode1IDChanged();
    partial void OnResearchCode2IDChanging(System.Nullable<int> value);
    partial void OnResearchCode2IDChanged();
    partial void OnResearchCode3IDChanging(System.Nullable<int> value);
    partial void OnResearchCode3IDChanged();
    partial void OnLanguage1Changing(string value);
    partial void OnLanguage1Changed();
    partial void OnLanguage2Changing(string value);
    partial void OnLanguage2Changed();
    partial void OnLanguageLevel1Changing(string value);
    partial void OnLanguageLevel1Changed();
    partial void OnLanguageLevel2Changing(string value);
    partial void OnLanguageLevel2Changed();
    partial void OnSocietyPostChanging(string value);
    partial void OnSocietyPostChanged();
    partial void OnWorkExperienceChanging(string value);
    partial void OnWorkExperienceChanged();
    partial void OnResearchExperienceChanging(string value);
    partial void OnResearchExperienceChanged();
    partial void OnImageChanging(byte[] value);
    partial void OnImageChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnPostBakChanging(string value);
    partial void OnPostBakChanged();
    partial void OnPostLevelChanging(System.Nullable<int> value);
    partial void OnPostLevelChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Expert_Old()
		{
			this._Project_Olds = new EntitySet<Project_Old>(new Action<Project_Old>(this.attach_Project_Olds), new Action<Project_Old>(this.detach_Project_Olds));
			this._Project_Olds1 = new EntitySet<Project_Old>(new Action<Project_Old>(this.attach_Project_Olds1), new Action<Project_Old>(this.detach_Project_Olds1));
			this._ProjectMember_Olds = new EntitySet<ProjectMember_Old>(new Action<ProjectMember_Old>(this.attach_ProjectMember_Olds), new Action<ProjectMember_Old>(this.detach_ProjectMember_Olds));
			this._FundMember_Olds = new EntitySet<FundMember_Old>(new Action<FundMember_Old>(this.attach_FundMember_Olds), new Action<FundMember_Old>(this.detach_FundMember_Olds));
			this._Base_Olds = new EntitySet<Base_Old>(new Action<Base_Old>(this.attach_Base_Olds), new Action<Base_Old>(this.detach_Base_Olds));
			this._AwardWinner_Olds = new EntitySet<AwardWinner_Old>(new Action<AwardWinner_Old>(this.attach_AwardWinner_Olds), new Action<AwardWinner_Old>(this.detach_AwardWinner_Olds));
			this._PatentInventer_Olds = new EntitySet<PatentInventer_Old>(new Action<PatentInventer_Old>(this.attach_PatentInventer_Olds), new Action<PatentInventer_Old>(this.detach_PatentInventer_Olds));
			this._PaperAuthor_Olds = new EntitySet<PaperAuthor_Old>(new Action<PaperAuthor_Old>(this.attach_PaperAuthor_Olds), new Action<PaperAuthor_Old>(this.detach_PaperAuthor_Olds));
			this._Department_Old = default(EntityRef<Department_Old>);
			this._Department_Old1 = default(EntityRef<Department_Old>);
			this._Department_Old2 = default(EntityRef<Department_Old>);
			this._SubjectSecondLevel_Old = default(EntityRef<SubjectSecondLevel_Old>);
			this._SubjectSecondLevel_Old1 = default(EntityRef<SubjectSecondLevel_Old>);
			this._SubjectSecondLevel_Old2 = default(EntityRef<SubjectSecondLevel_Old>);
			this._SubjectSecondLevel_Old3 = default(EntityRef<SubjectSecondLevel_Old>);
			this._SubjectSecondLevel_Old4 = default(EntityRef<SubjectSecondLevel_Old>);
			this._SubjectSecondLevel_Old5 = default(EntityRef<SubjectSecondLevel_Old>);
			this._SubjectSecondLevel_Old6 = default(EntityRef<SubjectSecondLevel_Old>);
			this._SubjectSecondLevel_Old7 = default(EntityRef<SubjectSecondLevel_Old>);
			this._User_Old = default(EntityRef<User_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_NameSpell", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string NameSpell
		{
			get
			{
				return this._NameSpell;
			}
			set
			{
				if ((this._NameSpell != value))
				{
					this.OnNameSpellChanging(value);
					this.SendPropertyChanging();
					this._NameSpell = value;
					this.SendPropertyChanged("NameSpell");
					this.OnNameSpellChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Nation", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Nation
		{
			get
			{
				return this._Nation;
			}
			set
			{
				if ((this._Nation != value))
				{
					this.OnNationChanging(value);
					this.SendPropertyChanging();
					this._Nation = value;
					this.SendPropertyChanged("Nation");
					this.OnNationChanged();
				}
			}
		}
		
		[Column(Storage="_Policy", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Policy
		{
			get
			{
				return this._Policy;
			}
			set
			{
				if ((this._Policy != value))
				{
					this.OnPolicyChanging(value);
					this.SendPropertyChanging();
					this._Policy = value;
					this.SendPropertyChanged("Policy");
					this.OnPolicyChanged();
				}
			}
		}
		
		[Column(Storage="_IDCardNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string IDCardNumber
		{
			get
			{
				return this._IDCardNumber;
			}
			set
			{
				if ((this._IDCardNumber != value))
				{
					this.OnIDCardNumberChanging(value);
					this.SendPropertyChanging();
					this._IDCardNumber = value;
					this.SendPropertyChanged("IDCardNumber");
					this.OnIDCardNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AcademyDegree", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AcademyDegree
		{
			get
			{
				return this._AcademyDegree;
			}
			set
			{
				if ((this._AcademyDegree != value))
				{
					this.OnAcademyDegreeChanging(value);
					this.SendPropertyChanging();
					this._AcademyDegree = value;
					this.SendPropertyChanged("AcademyDegree");
					this.OnAcademyDegreeChanged();
				}
			}
		}
		
		[Column(Storage="_Specialty", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Specialty
		{
			get
			{
				return this._Specialty;
			}
			set
			{
				if ((this._Specialty != value))
				{
					this.OnSpecialtyChanging(value);
					this.SendPropertyChanging();
					this._Specialty = value;
					this.SendPropertyChanged("Specialty");
					this.OnSpecialtyChanged();
				}
			}
		}
		
		[Column(Storage="_Post", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[Column(Storage="_IsDoctorDirector", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsDoctorDirector
		{
			get
			{
				return this._IsDoctorDirector;
			}
			set
			{
				if ((this._IsDoctorDirector != value))
				{
					this.OnIsDoctorDirectorChanging(value);
					this.SendPropertyChanging();
					this._IsDoctorDirector = value;
					this.SendPropertyChanged("IsDoctorDirector");
					this.OnIsDoctorDirectorChanged();
				}
			}
		}
		
		[Column(Storage="_IsAcademician", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsAcademician
		{
			get
			{
				return this._IsAcademician;
			}
			set
			{
				if ((this._IsAcademician != value))
				{
					this.OnIsAcademicianChanging(value);
					this.SendPropertyChanging();
					this._IsAcademician = value;
					this.SendPropertyChanged("IsAcademician");
					this.OnIsAcademicianChanged();
				}
			}
		}
		
		[Column(Storage="_Occupation", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[Column(Storage="_CollegeName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CollegeName
		{
			get
			{
				return this._CollegeName;
			}
			set
			{
				if ((this._CollegeName != value))
				{
					this.OnCollegeNameChanging(value);
					this.SendPropertyChanging();
					this._CollegeName = value;
					this.SendPropertyChanged("CollegeName");
					this.OnCollegeNameChanged();
				}
			}
		}
		
		[Column(Storage="_CollegeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CollegeID
		{
			get
			{
				return this._CollegeID;
			}
			set
			{
				if ((this._CollegeID != value))
				{
					if (this._Department_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollegeIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeID = value;
					this.SendPropertyChanged("CollegeID");
					this.OnCollegeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department_Old1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_College2", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string College2
		{
			get
			{
				return this._College2;
			}
			set
			{
				if ((this._College2 != value))
				{
					this.OnCollege2Changing(value);
					this.SendPropertyChanging();
					this._College2 = value;
					this.SendPropertyChanged("College2");
					this.OnCollege2Changed();
				}
			}
		}
		
		[Column(Storage="_Department2", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Department2
		{
			get
			{
				return this._Department2;
			}
			set
			{
				if ((this._Department2 != value))
				{
					this.OnDepartment2Changing(value);
					this.SendPropertyChanging();
					this._Department2 = value;
					this.SendPropertyChanged("Department2");
					this.OnDepartment2Changed();
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_OfficePhone", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_MajorCodeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MajorCodeID
		{
			get
			{
				return this._MajorCodeID;
			}
			set
			{
				if ((this._MajorCodeID != value))
				{
					if (this._SubjectSecondLevel_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorCodeIDChanging(value);
					this.SendPropertyChanging();
					this._MajorCodeID = value;
					this.SendPropertyChanged("MajorCodeID");
					this.OnMajorCodeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchCode1ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ResearchCode1ID
		{
			get
			{
				return this._ResearchCode1ID;
			}
			set
			{
				if ((this._ResearchCode1ID != value))
				{
					if (this._SubjectSecondLevel_Old1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResearchCode1IDChanging(value);
					this.SendPropertyChanging();
					this._ResearchCode1ID = value;
					this.SendPropertyChanged("ResearchCode1ID");
					this.OnResearchCode1IDChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchCode2ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ResearchCode2ID
		{
			get
			{
				return this._ResearchCode2ID;
			}
			set
			{
				if ((this._ResearchCode2ID != value))
				{
					if (this._SubjectSecondLevel_Old2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResearchCode2IDChanging(value);
					this.SendPropertyChanging();
					this._ResearchCode2ID = value;
					this.SendPropertyChanged("ResearchCode2ID");
					this.OnResearchCode2IDChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchCode3ID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ResearchCode3ID
		{
			get
			{
				return this._ResearchCode3ID;
			}
			set
			{
				if ((this._ResearchCode3ID != value))
				{
					if (this._SubjectSecondLevel_Old3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResearchCode3IDChanging(value);
					this.SendPropertyChanging();
					this._ResearchCode3ID = value;
					this.SendPropertyChanged("ResearchCode3ID");
					this.OnResearchCode3IDChanged();
				}
			}
		}
		
		[Column(Storage="_Language1", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Language1
		{
			get
			{
				return this._Language1;
			}
			set
			{
				if ((this._Language1 != value))
				{
					this.OnLanguage1Changing(value);
					this.SendPropertyChanging();
					this._Language1 = value;
					this.SendPropertyChanged("Language1");
					this.OnLanguage1Changed();
				}
			}
		}
		
		[Column(Storage="_Language2", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Language2
		{
			get
			{
				return this._Language2;
			}
			set
			{
				if ((this._Language2 != value))
				{
					this.OnLanguage2Changing(value);
					this.SendPropertyChanging();
					this._Language2 = value;
					this.SendPropertyChanged("Language2");
					this.OnLanguage2Changed();
				}
			}
		}
		
		[Column(Storage="_LanguageLevel1", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string LanguageLevel1
		{
			get
			{
				return this._LanguageLevel1;
			}
			set
			{
				if ((this._LanguageLevel1 != value))
				{
					this.OnLanguageLevel1Changing(value);
					this.SendPropertyChanging();
					this._LanguageLevel1 = value;
					this.SendPropertyChanged("LanguageLevel1");
					this.OnLanguageLevel1Changed();
				}
			}
		}
		
		[Column(Storage="_LanguageLevel2", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string LanguageLevel2
		{
			get
			{
				return this._LanguageLevel2;
			}
			set
			{
				if ((this._LanguageLevel2 != value))
				{
					this.OnLanguageLevel2Changing(value);
					this.SendPropertyChanging();
					this._LanguageLevel2 = value;
					this.SendPropertyChanged("LanguageLevel2");
					this.OnLanguageLevel2Changed();
				}
			}
		}
		
		[Column(Storage="_SocietyPost", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SocietyPost
		{
			get
			{
				return this._SocietyPost;
			}
			set
			{
				if ((this._SocietyPost != value))
				{
					this.OnSocietyPostChanging(value);
					this.SendPropertyChanging();
					this._SocietyPost = value;
					this.SendPropertyChanged("SocietyPost");
					this.OnSocietyPostChanged();
				}
			}
		}
		
		[Column(Storage="_WorkExperience", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string WorkExperience
		{
			get
			{
				return this._WorkExperience;
			}
			set
			{
				if ((this._WorkExperience != value))
				{
					this.OnWorkExperienceChanging(value);
					this.SendPropertyChanging();
					this._WorkExperience = value;
					this.SendPropertyChanged("WorkExperience");
					this.OnWorkExperienceChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchExperience", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ResearchExperience
		{
			get
			{
				return this._ResearchExperience;
			}
			set
			{
				if ((this._ResearchExperience != value))
				{
					this.OnResearchExperienceChanging(value);
					this.SendPropertyChanging();
					this._ResearchExperience = value;
					this.SendPropertyChanged("ResearchExperience");
					this.OnResearchExperienceChanged();
				}
			}
		}
		
		[Column(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] Image
		{
			get
			{
				return this._Image.Value;
			}
			set
			{
				if ((this._Image.Value != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image.Value = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_PostBak", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PostBak
		{
			get
			{
				return this._PostBak;
			}
			set
			{
				if ((this._PostBak != value))
				{
					this.OnPostBakChanging(value);
					this.SendPropertyChanging();
					this._PostBak = value;
					this.SendPropertyChanged("PostBak");
					this.OnPostBakChanged();
				}
			}
		}
		
		[Column(Storage="_PostLevel", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PostLevel
		{
			get
			{
				return this._PostLevel;
			}
			set
			{
				if ((this._PostLevel != value))
				{
					this.OnPostLevelChanging(value);
					this.SendPropertyChanging();
					this._PostLevel = value;
					this.SendPropertyChanged("PostLevel");
					this.OnPostLevelChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Expert_Old_Project_Old", Storage="_Project_Olds", ThisKey="ID", OtherKey="PrincipalID")]
		public EntitySet<Project_Old> Project_Olds
		{
			get
			{
				return this._Project_Olds;
			}
			set
			{
				this._Project_Olds.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_Project_Old1", Storage="_Project_Olds1", ThisKey="ID", OtherKey="PrincipalDelegateID")]
		public EntitySet<Project_Old> Project_Olds1
		{
			get
			{
				return this._Project_Olds1;
			}
			set
			{
				this._Project_Olds1.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_ProjectMember_Old", Storage="_ProjectMember_Olds", ThisKey="ID", OtherKey="ExpertID")]
		public EntitySet<ProjectMember_Old> ProjectMember_Olds
		{
			get
			{
				return this._ProjectMember_Olds;
			}
			set
			{
				this._ProjectMember_Olds.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_FundMember_Old", Storage="_FundMember_Olds", ThisKey="ID", OtherKey="ExpertID")]
		public EntitySet<FundMember_Old> FundMember_Olds
		{
			get
			{
				return this._FundMember_Olds;
			}
			set
			{
				this._FundMember_Olds.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_Base_Old", Storage="_Base_Olds", ThisKey="ID", OtherKey="DirectorID")]
		public EntitySet<Base_Old> Base_Olds
		{
			get
			{
				return this._Base_Olds;
			}
			set
			{
				this._Base_Olds.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_AwardWinner_Old", Storage="_AwardWinner_Olds", ThisKey="ID", OtherKey="ExpertID")]
		public EntitySet<AwardWinner_Old> AwardWinner_Olds
		{
			get
			{
				return this._AwardWinner_Olds;
			}
			set
			{
				this._AwardWinner_Olds.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_PatentInventer_Old", Storage="_PatentInventer_Olds", ThisKey="ID", OtherKey="ExpertID")]
		public EntitySet<PatentInventer_Old> PatentInventer_Olds
		{
			get
			{
				return this._PatentInventer_Olds;
			}
			set
			{
				this._PatentInventer_Olds.Assign(value);
			}
		}
		
		[Association(Name="Expert_Old_PaperAuthor_Old", Storage="_PaperAuthor_Olds", ThisKey="ID", OtherKey="ExpertID")]
		public EntitySet<PaperAuthor_Old> PaperAuthor_Olds
		{
			get
			{
				return this._PaperAuthor_Olds;
			}
			set
			{
				this._PaperAuthor_Olds.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Expert_Old", Storage="_Department_Old", ThisKey="CollegeID", OtherKey="ID", IsForeignKey=true)]
		public Department_Old Department_Old
		{
			get
			{
				return this._Department_Old.Entity;
			}
			set
			{
				Department_Old previousValue = this._Department_Old.Entity;
				if (((previousValue != value) 
							|| (this._Department_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department_Old.Entity = null;
						previousValue.Experts.Remove(this);
					}
					this._Department_Old.Entity = value;
					if ((value != null))
					{
						value.Experts.Add(this);
						this._CollegeID = value.ID;
					}
					else
					{
						this._CollegeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department_Old");
				}
			}
		}
		
		[Association(Name="Department_Old_Expert_Old1", Storage="_Department_Old1", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Department_Old Department_Old1
		{
			get
			{
				return this._Department_Old1.Entity;
			}
			set
			{
				Department_Old previousValue = this._Department_Old1.Entity;
				if (((previousValue != value) 
							|| (this._Department_Old1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department_Old1.Entity = null;
						previousValue.Experts1.Remove(this);
					}
					this._Department_Old1.Entity = value;
					if ((value != null))
					{
						value.Experts1.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department_Old1");
				}
			}
		}
		
		[Association(Name="Department_Old_Expert_Old2", Storage="_Department_Old2", ThisKey="CollegeID", OtherKey="ID", IsForeignKey=true)]
		public Department_Old Department_Old2
		{
			get
			{
				return this._Department_Old2.Entity;
			}
			set
			{
				Department_Old previousValue = this._Department_Old2.Entity;
				if (((previousValue != value) 
							|| (this._Department_Old2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department_Old2.Entity = null;
						previousValue.Expert_Olds.Remove(this);
					}
					this._Department_Old2.Entity = value;
					if ((value != null))
					{
						value.Expert_Olds.Add(this);
						this._CollegeID = value.ID;
					}
					else
					{
						this._CollegeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department_Old2");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old", Storage="_SubjectSecondLevel_Old", ThisKey="MajorCodeID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old
		{
			get
			{
				return this._SubjectSecondLevel_Old.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old.Entity = null;
						previousValue.Experts.Remove(this);
					}
					this._SubjectSecondLevel_Old.Entity = value;
					if ((value != null))
					{
						value.Experts.Add(this);
						this._MajorCodeID = value.ID;
					}
					else
					{
						this._MajorCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old1", Storage="_SubjectSecondLevel_Old1", ThisKey="ResearchCode1ID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old1
		{
			get
			{
				return this._SubjectSecondLevel_Old1.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old1.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old1.Entity = null;
						previousValue.Experts1.Remove(this);
					}
					this._SubjectSecondLevel_Old1.Entity = value;
					if ((value != null))
					{
						value.Experts1.Add(this);
						this._ResearchCode1ID = value.ID;
					}
					else
					{
						this._ResearchCode1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old1");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old2", Storage="_SubjectSecondLevel_Old2", ThisKey="ResearchCode2ID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old2
		{
			get
			{
				return this._SubjectSecondLevel_Old2.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old2.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old2.Entity = null;
						previousValue.Experts2.Remove(this);
					}
					this._SubjectSecondLevel_Old2.Entity = value;
					if ((value != null))
					{
						value.Experts2.Add(this);
						this._ResearchCode2ID = value.ID;
					}
					else
					{
						this._ResearchCode2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old2");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old3", Storage="_SubjectSecondLevel_Old3", ThisKey="ResearchCode3ID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old3
		{
			get
			{
				return this._SubjectSecondLevel_Old3.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old3.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old3.Entity = null;
						previousValue.Experts3.Remove(this);
					}
					this._SubjectSecondLevel_Old3.Entity = value;
					if ((value != null))
					{
						value.Experts3.Add(this);
						this._ResearchCode3ID = value.ID;
					}
					else
					{
						this._ResearchCode3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old3");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old4", Storage="_SubjectSecondLevel_Old4", ThisKey="MajorCodeID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old4
		{
			get
			{
				return this._SubjectSecondLevel_Old4.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old4.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old4.Entity = null;
						previousValue.Experts4.Remove(this);
					}
					this._SubjectSecondLevel_Old4.Entity = value;
					if ((value != null))
					{
						value.Experts4.Add(this);
						this._MajorCodeID = value.ID;
					}
					else
					{
						this._MajorCodeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old4");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old5", Storage="_SubjectSecondLevel_Old5", ThisKey="ResearchCode1ID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old5
		{
			get
			{
				return this._SubjectSecondLevel_Old5.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old5.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old5.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old5.Entity = null;
						previousValue.Experts5.Remove(this);
					}
					this._SubjectSecondLevel_Old5.Entity = value;
					if ((value != null))
					{
						value.Experts5.Add(this);
						this._ResearchCode1ID = value.ID;
					}
					else
					{
						this._ResearchCode1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old5");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old6", Storage="_SubjectSecondLevel_Old6", ThisKey="ResearchCode2ID", OtherKey="ID", IsForeignKey=true)]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old6
		{
			get
			{
				return this._SubjectSecondLevel_Old6.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old6.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old6.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old6.Entity = null;
						previousValue.Experts6.Remove(this);
					}
					this._SubjectSecondLevel_Old6.Entity = value;
					if ((value != null))
					{
						value.Experts6.Add(this);
						this._ResearchCode2ID = value.ID;
					}
					else
					{
						this._ResearchCode2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old6");
				}
			}
		}
		
		[Association(Name="SubjectSecondLevel_Old_Expert_Old7", Storage="_SubjectSecondLevel_Old7", ThisKey="ResearchCode3ID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public SubjectSecondLevel_Old SubjectSecondLevel_Old7
		{
			get
			{
				return this._SubjectSecondLevel_Old7.Entity;
			}
			set
			{
				SubjectSecondLevel_Old previousValue = this._SubjectSecondLevel_Old7.Entity;
				if (((previousValue != value) 
							|| (this._SubjectSecondLevel_Old7.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectSecondLevel_Old7.Entity = null;
						previousValue.Expert_Olds.Remove(this);
					}
					this._SubjectSecondLevel_Old7.Entity = value;
					if ((value != null))
					{
						value.Expert_Olds.Add(this);
						this._ResearchCode3ID = value.ID;
					}
					else
					{
						this._ResearchCode3ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubjectSecondLevel_Old7");
				}
			}
		}
		
		[Association(Name="User_Old_Expert_Old", Storage="_User_Old", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User_Old User_Old
		{
			get
			{
				return this._User_Old.Entity;
			}
			set
			{
				User_Old previousValue = this._User_Old.Entity;
				if (((previousValue != value) 
							|| (this._User_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User_Old.Entity = null;
						previousValue.Expert_Olds.Remove(this);
					}
					this._User_Old.Entity = value;
					if ((value != null))
					{
						value.Expert_Olds.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert = this;
		}
		
		private void detach_Project_Olds(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert = null;
		}
		
		private void attach_Project_Olds1(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = this;
		}
		
		private void detach_Project_Olds1(Project_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = null;
		}
		
		private void attach_ProjectMember_Olds(ProjectMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = this;
		}
		
		private void detach_ProjectMember_Olds(ProjectMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = null;
		}
		
		private void attach_FundMember_Olds(FundMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = this;
		}
		
		private void detach_FundMember_Olds(FundMember_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = null;
		}
		
		private void attach_Base_Olds(Base_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = this;
		}
		
		private void detach_Base_Olds(Base_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = null;
		}
		
		private void attach_AwardWinner_Olds(AwardWinner_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = this;
		}
		
		private void detach_AwardWinner_Olds(AwardWinner_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = null;
		}
		
		private void attach_PatentInventer_Olds(PatentInventer_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = this;
		}
		
		private void detach_PatentInventer_Olds(PatentInventer_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = null;
		}
		
		private void attach_PaperAuthor_Olds(PaperAuthor_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = this;
		}
		
		private void detach_PaperAuthor_Olds(PaperAuthor_Old entity)
		{
			this.SendPropertyChanging();
			entity.Expert_Old = null;
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserRoleID;
		
		private string _LoginID;
		
		private string _Name;
		
		private string _NameSpell;
		
		private string _Password;
		
		private string _Email;
		
		private string _HomePhone;
		
		private string _OfficePhone;
		
		private string _MobilePhone;
		
		private string _Fax;
		
		private bool _IsSuper;
		
		private bool _IsCustomPower;
		
		private System.Nullable<int> _PowerID;
		
		private bool _IsProtocolAccept;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Expert_Old> _Expert_Olds;
		
		private EntityRef<UserRole_Old> _UserRole_Old;
		
		private EntityRef<Power_Old> _Power_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnLoginIDChanging(string value);
    partial void OnLoginIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNameSpellChanging(string value);
    partial void OnNameSpellChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnIsSuperChanging(bool value);
    partial void OnIsSuperChanged();
    partial void OnIsCustomPowerChanging(bool value);
    partial void OnIsCustomPowerChanged();
    partial void OnPowerIDChanging(System.Nullable<int> value);
    partial void OnPowerIDChanged();
    partial void OnIsProtocolAcceptChanging(bool value);
    partial void OnIsProtocolAcceptChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public User_Old()
		{
			this._Expert_Olds = new EntitySet<Expert_Old>(new Action<Expert_Old>(this.attach_Expert_Olds), new Action<Expert_Old>(this.detach_Expert_Olds));
			this._UserRole_Old = default(EntityRef<UserRole_Old>);
			this._Power_Old = default(EntityRef<Power_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserRoleID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					if (this._UserRole_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_LoginID", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string LoginID
		{
			get
			{
				return this._LoginID;
			}
			set
			{
				if ((this._LoginID != value))
				{
					this.OnLoginIDChanging(value);
					this.SendPropertyChanging();
					this._LoginID = value;
					this.SendPropertyChanged("LoginID");
					this.OnLoginIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_NameSpell", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string NameSpell
		{
			get
			{
				return this._NameSpell;
			}
			set
			{
				if ((this._NameSpell != value))
				{
					this.OnNameSpellChanging(value);
					this.SendPropertyChanging();
					this._NameSpell = value;
					this.SendPropertyChanged("NameSpell");
					this.OnNameSpellChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_OfficePhone", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_IsSuper", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSuper
		{
			get
			{
				return this._IsSuper;
			}
			set
			{
				if ((this._IsSuper != value))
				{
					this.OnIsSuperChanging(value);
					this.SendPropertyChanging();
					this._IsSuper = value;
					this.SendPropertyChanged("IsSuper");
					this.OnIsSuperChanged();
				}
			}
		}
		
		[Column(Storage="_IsCustomPower", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsCustomPower
		{
			get
			{
				return this._IsCustomPower;
			}
			set
			{
				if ((this._IsCustomPower != value))
				{
					this.OnIsCustomPowerChanging(value);
					this.SendPropertyChanging();
					this._IsCustomPower = value;
					this.SendPropertyChanged("IsCustomPower");
					this.OnIsCustomPowerChanged();
				}
			}
		}
		
		[Column(Storage="_PowerID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PowerID
		{
			get
			{
				return this._PowerID;
			}
			set
			{
				if ((this._PowerID != value))
				{
					if (this._Power_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerIDChanging(value);
					this.SendPropertyChanging();
					this._PowerID = value;
					this.SendPropertyChanged("PowerID");
					this.OnPowerIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsProtocolAccept", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsProtocolAccept
		{
			get
			{
				return this._IsProtocolAccept;
			}
			set
			{
				if ((this._IsProtocolAccept != value))
				{
					this.OnIsProtocolAcceptChanging(value);
					this.SendPropertyChanging();
					this._IsProtocolAccept = value;
					this.SendPropertyChanged("IsProtocolAccept");
					this.OnIsProtocolAcceptChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="User_Old_Expert_Old", Storage="_Expert_Olds", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Expert_Old> Expert_Olds
		{
			get
			{
				return this._Expert_Olds;
			}
			set
			{
				this._Expert_Olds.Assign(value);
			}
		}
		
		[Association(Name="UserRole_Old_User_Old", Storage="_UserRole_Old", ThisKey="UserRoleID", OtherKey="ID", IsForeignKey=true)]
		public UserRole_Old UserRole_Old
		{
			get
			{
				return this._UserRole_Old.Entity;
			}
			set
			{
				UserRole_Old previousValue = this._UserRole_Old.Entity;
				if (((previousValue != value) 
							|| (this._UserRole_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole_Old.Entity = null;
						previousValue.User_Olds.Remove(this);
					}
					this._UserRole_Old.Entity = value;
					if ((value != null))
					{
						value.User_Olds.Add(this);
						this._UserRoleID = value.ID;
					}
					else
					{
						this._UserRoleID = default(int);
					}
					this.SendPropertyChanged("UserRole_Old");
				}
			}
		}
		
		[Association(Name="Power_Old_User_Old", Storage="_Power_Old", ThisKey="PowerID", OtherKey="ID", IsForeignKey=true)]
		public Power_Old Power_Old
		{
			get
			{
				return this._Power_Old.Entity;
			}
			set
			{
				Power_Old previousValue = this._Power_Old.Entity;
				if (((previousValue != value) 
							|| (this._Power_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Power_Old.Entity = null;
						previousValue.User_Olds.Remove(this);
					}
					this._Power_Old.Entity = value;
					if ((value != null))
					{
						value.User_Olds.Add(this);
						this._PowerID = value.ID;
					}
					else
					{
						this._PowerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Power_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Expert_Olds(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.User_Old = this;
		}
		
		private void detach_Expert_Olds(Expert_Old entity)
		{
			this.SendPropertyChanging();
			entity.User_Old = null;
		}
	}
	
	[Table(Name="dbo.Voucher")]
	public partial class Voucher_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FundAllocationID;
		
		private int _FundMemberID;
		
		private string _VoucherNumber;
		
		private string _AccountBookNumber;
		
		private long _AllocationIn;
		
		private long _AllocationOut;
		
		private long _AllocationHardware;
		
		private long _AllocationOversea;
		
		private long _OverheadExpensesIn;
		
		private long _OverheadExpensesOut;
		
		private long _OverheadExpensesHardware;
		
		private long _OverheadExpensesOversea;
		
		private bool _IsPrinted;
		
		private bool _IsRead;
		
		private System.Nullable<System.DateTime> _PrintTime;
		
		private int _FinanceState;
		
		private System.Nullable<System.DateTime> _FinanceAllocationDateTime;
		
		private string _FinanceNumber;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<VoucherItemHardware_Old> _VoucherItemHardware_Olds;
		
		private EntitySet<VoucherItemOversea_Old> _VoucherItemOversea_Olds;
		
		private EntitySet<VoucherItemIn_Old> _VoucherItemIn_Olds;
		
		private EntitySet<VoucherItemOut_Old> _VoucherItemOut_Olds;
		
		private EntityRef<FundAllocation_Old> _FundAllocation_Old;
		
		private EntityRef<FundMember_Old> _FundMember_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFundAllocationIDChanging(int value);
    partial void OnFundAllocationIDChanged();
    partial void OnFundMemberIDChanging(int value);
    partial void OnFundMemberIDChanged();
    partial void OnVoucherNumberChanging(string value);
    partial void OnVoucherNumberChanged();
    partial void OnAccountBookNumberChanging(string value);
    partial void OnAccountBookNumberChanged();
    partial void OnAllocationInChanging(long value);
    partial void OnAllocationInChanged();
    partial void OnAllocationOutChanging(long value);
    partial void OnAllocationOutChanged();
    partial void OnAllocationHardwareChanging(long value);
    partial void OnAllocationHardwareChanged();
    partial void OnAllocationOverseaChanging(long value);
    partial void OnAllocationOverseaChanged();
    partial void OnOverheadExpensesInChanging(long value);
    partial void OnOverheadExpensesInChanged();
    partial void OnOverheadExpensesOutChanging(long value);
    partial void OnOverheadExpensesOutChanged();
    partial void OnOverheadExpensesHardwareChanging(long value);
    partial void OnOverheadExpensesHardwareChanged();
    partial void OnOverheadExpensesOverseaChanging(long value);
    partial void OnOverheadExpensesOverseaChanged();
    partial void OnIsPrintedChanging(bool value);
    partial void OnIsPrintedChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnPrintTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPrintTimeChanged();
    partial void OnFinanceStateChanging(int value);
    partial void OnFinanceStateChanged();
    partial void OnFinanceAllocationDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFinanceAllocationDateTimeChanged();
    partial void OnFinanceNumberChanging(string value);
    partial void OnFinanceNumberChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Voucher_Old()
		{
			this._VoucherItemHardware_Olds = new EntitySet<VoucherItemHardware_Old>(new Action<VoucherItemHardware_Old>(this.attach_VoucherItemHardware_Olds), new Action<VoucherItemHardware_Old>(this.detach_VoucherItemHardware_Olds));
			this._VoucherItemOversea_Olds = new EntitySet<VoucherItemOversea_Old>(new Action<VoucherItemOversea_Old>(this.attach_VoucherItemOversea_Olds), new Action<VoucherItemOversea_Old>(this.detach_VoucherItemOversea_Olds));
			this._VoucherItemIn_Olds = new EntitySet<VoucherItemIn_Old>(new Action<VoucherItemIn_Old>(this.attach_VoucherItemIn_Olds), new Action<VoucherItemIn_Old>(this.detach_VoucherItemIn_Olds));
			this._VoucherItemOut_Olds = new EntitySet<VoucherItemOut_Old>(new Action<VoucherItemOut_Old>(this.attach_VoucherItemOut_Olds), new Action<VoucherItemOut_Old>(this.detach_VoucherItemOut_Olds));
			this._FundAllocation_Old = default(EntityRef<FundAllocation_Old>);
			this._FundMember_Old = default(EntityRef<FundMember_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FundAllocationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FundAllocationID
		{
			get
			{
				return this._FundAllocationID;
			}
			set
			{
				if ((this._FundAllocationID != value))
				{
					if (this._FundAllocation_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundAllocationIDChanging(value);
					this.SendPropertyChanging();
					this._FundAllocationID = value;
					this.SendPropertyChanged("FundAllocationID");
					this.OnFundAllocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_FundMemberID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FundMemberID
		{
			get
			{
				return this._FundMemberID;
			}
			set
			{
				if ((this._FundMemberID != value))
				{
					if (this._FundMember_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundMemberIDChanging(value);
					this.SendPropertyChanging();
					this._FundMemberID = value;
					this.SendPropertyChanged("FundMemberID");
					this.OnFundMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_VoucherNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string VoucherNumber
		{
			get
			{
				return this._VoucherNumber;
			}
			set
			{
				if ((this._VoucherNumber != value))
				{
					this.OnVoucherNumberChanging(value);
					this.SendPropertyChanging();
					this._VoucherNumber = value;
					this.SendPropertyChanged("VoucherNumber");
					this.OnVoucherNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AccountBookNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AccountBookNumber
		{
			get
			{
				return this._AccountBookNumber;
			}
			set
			{
				if ((this._AccountBookNumber != value))
				{
					this.OnAccountBookNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountBookNumber = value;
					this.SendPropertyChanged("AccountBookNumber");
					this.OnAccountBookNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationIn", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationIn
		{
			get
			{
				return this._AllocationIn;
			}
			set
			{
				if ((this._AllocationIn != value))
				{
					this.OnAllocationInChanging(value);
					this.SendPropertyChanging();
					this._AllocationIn = value;
					this.SendPropertyChanged("AllocationIn");
					this.OnAllocationInChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationOut", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationOut
		{
			get
			{
				return this._AllocationOut;
			}
			set
			{
				if ((this._AllocationOut != value))
				{
					this.OnAllocationOutChanging(value);
					this.SendPropertyChanging();
					this._AllocationOut = value;
					this.SendPropertyChanged("AllocationOut");
					this.OnAllocationOutChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationHardware", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationHardware
		{
			get
			{
				return this._AllocationHardware;
			}
			set
			{
				if ((this._AllocationHardware != value))
				{
					this.OnAllocationHardwareChanging(value);
					this.SendPropertyChanging();
					this._AllocationHardware = value;
					this.SendPropertyChanged("AllocationHardware");
					this.OnAllocationHardwareChanged();
				}
			}
		}
		
		[Column(Storage="_AllocationOversea", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AllocationOversea
		{
			get
			{
				return this._AllocationOversea;
			}
			set
			{
				if ((this._AllocationOversea != value))
				{
					this.OnAllocationOverseaChanging(value);
					this.SendPropertyChanging();
					this._AllocationOversea = value;
					this.SendPropertyChanged("AllocationOversea");
					this.OnAllocationOverseaChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesIn", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesIn
		{
			get
			{
				return this._OverheadExpensesIn;
			}
			set
			{
				if ((this._OverheadExpensesIn != value))
				{
					this.OnOverheadExpensesInChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesIn = value;
					this.SendPropertyChanged("OverheadExpensesIn");
					this.OnOverheadExpensesInChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesOut", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesOut
		{
			get
			{
				return this._OverheadExpensesOut;
			}
			set
			{
				if ((this._OverheadExpensesOut != value))
				{
					this.OnOverheadExpensesOutChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesOut = value;
					this.SendPropertyChanged("OverheadExpensesOut");
					this.OnOverheadExpensesOutChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesHardware", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesHardware
		{
			get
			{
				return this._OverheadExpensesHardware;
			}
			set
			{
				if ((this._OverheadExpensesHardware != value))
				{
					this.OnOverheadExpensesHardwareChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesHardware = value;
					this.SendPropertyChanged("OverheadExpensesHardware");
					this.OnOverheadExpensesHardwareChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpensesOversea", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OverheadExpensesOversea
		{
			get
			{
				return this._OverheadExpensesOversea;
			}
			set
			{
				if ((this._OverheadExpensesOversea != value))
				{
					this.OnOverheadExpensesOverseaChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpensesOversea = value;
					this.SendPropertyChanged("OverheadExpensesOversea");
					this.OnOverheadExpensesOverseaChanged();
				}
			}
		}
		
		[Column(Storage="_IsPrinted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPrinted
		{
			get
			{
				return this._IsPrinted;
			}
			set
			{
				if ((this._IsPrinted != value))
				{
					this.OnIsPrintedChanging(value);
					this.SendPropertyChanging();
					this._IsPrinted = value;
					this.SendPropertyChanged("IsPrinted");
					this.OnIsPrintedChanged();
				}
			}
		}
		
		[Column(Storage="_IsRead", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[Column(Storage="_PrintTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> PrintTime
		{
			get
			{
				return this._PrintTime;
			}
			set
			{
				if ((this._PrintTime != value))
				{
					this.OnPrintTimeChanging(value);
					this.SendPropertyChanging();
					this._PrintTime = value;
					this.SendPropertyChanged("PrintTime");
					this.OnPrintTimeChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceState", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FinanceState
		{
			get
			{
				return this._FinanceState;
			}
			set
			{
				if ((this._FinanceState != value))
				{
					this.OnFinanceStateChanging(value);
					this.SendPropertyChanging();
					this._FinanceState = value;
					this.SendPropertyChanged("FinanceState");
					this.OnFinanceStateChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceAllocationDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> FinanceAllocationDateTime
		{
			get
			{
				return this._FinanceAllocationDateTime;
			}
			set
			{
				if ((this._FinanceAllocationDateTime != value))
				{
					this.OnFinanceAllocationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._FinanceAllocationDateTime = value;
					this.SendPropertyChanged("FinanceAllocationDateTime");
					this.OnFinanceAllocationDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string FinanceNumber
		{
			get
			{
				return this._FinanceNumber;
			}
			set
			{
				if ((this._FinanceNumber != value))
				{
					this.OnFinanceNumberChanging(value);
					this.SendPropertyChanging();
					this._FinanceNumber = value;
					this.SendPropertyChanged("FinanceNumber");
					this.OnFinanceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemHardware_Old", Storage="_VoucherItemHardware_Olds", ThisKey="ID", OtherKey="VoucherID")]
		public EntitySet<VoucherItemHardware_Old> VoucherItemHardware_Olds
		{
			get
			{
				return this._VoucherItemHardware_Olds;
			}
			set
			{
				this._VoucherItemHardware_Olds.Assign(value);
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemOversea_Old", Storage="_VoucherItemOversea_Olds", ThisKey="ID", OtherKey="VoucherID")]
		public EntitySet<VoucherItemOversea_Old> VoucherItemOversea_Olds
		{
			get
			{
				return this._VoucherItemOversea_Olds;
			}
			set
			{
				this._VoucherItemOversea_Olds.Assign(value);
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemIn_Old", Storage="_VoucherItemIn_Olds", ThisKey="ID", OtherKey="VoucherID")]
		public EntitySet<VoucherItemIn_Old> VoucherItemIn_Olds
		{
			get
			{
				return this._VoucherItemIn_Olds;
			}
			set
			{
				this._VoucherItemIn_Olds.Assign(value);
			}
		}
		
		[Association(Name="Voucher_Old_VoucherItemOut_Old", Storage="_VoucherItemOut_Olds", ThisKey="ID", OtherKey="VoucherID")]
		public EntitySet<VoucherItemOut_Old> VoucherItemOut_Olds
		{
			get
			{
				return this._VoucherItemOut_Olds;
			}
			set
			{
				this._VoucherItemOut_Olds.Assign(value);
			}
		}
		
		[Association(Name="FundAllocation_Old_Voucher_Old", Storage="_FundAllocation_Old", ThisKey="FundAllocationID", OtherKey="ID", IsForeignKey=true)]
		public FundAllocation_Old FundAllocation_Old
		{
			get
			{
				return this._FundAllocation_Old.Entity;
			}
			set
			{
				FundAllocation_Old previousValue = this._FundAllocation_Old.Entity;
				if (((previousValue != value) 
							|| (this._FundAllocation_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FundAllocation_Old.Entity = null;
						previousValue.Voucher_Olds.Remove(this);
					}
					this._FundAllocation_Old.Entity = value;
					if ((value != null))
					{
						value.Voucher_Olds.Add(this);
						this._FundAllocationID = value.ID;
					}
					else
					{
						this._FundAllocationID = default(int);
					}
					this.SendPropertyChanged("FundAllocation_Old");
				}
			}
		}
		
		[Association(Name="FundMember_Old_Voucher_Old", Storage="_FundMember_Old", ThisKey="FundMemberID", OtherKey="ID", IsForeignKey=true)]
		public FundMember_Old FundMember_Old
		{
			get
			{
				return this._FundMember_Old.Entity;
			}
			set
			{
				FundMember_Old previousValue = this._FundMember_Old.Entity;
				if (((previousValue != value) 
							|| (this._FundMember_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FundMember_Old.Entity = null;
						previousValue.Voucher_Olds.Remove(this);
					}
					this._FundMember_Old.Entity = value;
					if ((value != null))
					{
						value.Voucher_Olds.Add(this);
						this._FundMemberID = value.ID;
					}
					else
					{
						this._FundMemberID = default(int);
					}
					this.SendPropertyChanged("FundMember_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VoucherItemHardware_Olds(VoucherItemHardware_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = this;
		}
		
		private void detach_VoucherItemHardware_Olds(VoucherItemHardware_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = null;
		}
		
		private void attach_VoucherItemOversea_Olds(VoucherItemOversea_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = this;
		}
		
		private void detach_VoucherItemOversea_Olds(VoucherItemOversea_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = null;
		}
		
		private void attach_VoucherItemIn_Olds(VoucherItemIn_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = this;
		}
		
		private void detach_VoucherItemIn_Olds(VoucherItemIn_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = null;
		}
		
		private void attach_VoucherItemOut_Olds(VoucherItemOut_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = this;
		}
		
		private void detach_VoucherItemOut_Olds(VoucherItemOut_Old entity)
		{
			this.SendPropertyChanging();
			entity.Voucher_Old = null;
		}
	}
	
	[Table(Name="dbo.AwardWinner")]
	public partial class AwardWinner_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AwardID;
		
		private System.Nullable<int> _ExpertID;
		
		private string _Name;
		
		private string _Number;
		
		private int _Order;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Expert_Old> _Expert_Old;
		
		private EntityRef<Award_Old> _Award_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAwardIDChanging(int value);
    partial void OnAwardIDChanged();
    partial void OnExpertIDChanging(System.Nullable<int> value);
    partial void OnExpertIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public AwardWinner_Old()
		{
			this._Expert_Old = default(EntityRef<Expert_Old>);
			this._Award_Old = default(EntityRef<Award_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AwardID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AwardID
		{
			get
			{
				return this._AwardID;
			}
			set
			{
				if ((this._AwardID != value))
				{
					if (this._Award_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwardIDChanging(value);
					this.SendPropertyChanging();
					this._AwardID = value;
					this.SendPropertyChanged("AwardID");
					this.OnAwardIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ExpertID
		{
			get
			{
				return this._ExpertID;
			}
			set
			{
				if ((this._ExpertID != value))
				{
					if (this._Expert_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpertIDChanging(value);
					this.SendPropertyChanging();
					this._ExpertID = value;
					this.SendPropertyChanged("ExpertID");
					this.OnExpertIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Expert_Old_AwardWinner_Old", Storage="_Expert_Old", ThisKey="ExpertID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert_Old
		{
			get
			{
				return this._Expert_Old.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert_Old.Entity;
				if (((previousValue != value) 
							|| (this._Expert_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert_Old.Entity = null;
						previousValue.AwardWinner_Olds.Remove(this);
					}
					this._Expert_Old.Entity = value;
					if ((value != null))
					{
						value.AwardWinner_Olds.Add(this);
						this._ExpertID = value.ID;
					}
					else
					{
						this._ExpertID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert_Old");
				}
			}
		}
		
		[Association(Name="Award_Old_AwardWinner_Old", Storage="_Award_Old", ThisKey="AwardID", OtherKey="ID", IsForeignKey=true)]
		public Award_Old Award_Old
		{
			get
			{
				return this._Award_Old.Entity;
			}
			set
			{
				Award_Old previousValue = this._Award_Old.Entity;
				if (((previousValue != value) 
							|| (this._Award_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Award_Old.Entity = null;
						previousValue.AwardWinner_Olds.Remove(this);
					}
					this._Award_Old.Entity = value;
					if ((value != null))
					{
						value.AwardWinner_Olds.Add(this);
						this._AwardID = value.ID;
					}
					else
					{
						this._AwardID = default(int);
					}
					this.SendPropertyChanged("Award_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Award")]
	public partial class Award_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Year;
		
		private string _Rank;
		
		private string _Class;
		
		private string _AttendType;
		
		private System.Nullable<int> _ProjectID;
		
		private string _ProjectName;
		
		private string _Introduction;
		
		private string _OldID;
		
		private string _AuthorisedUnit;
		
		private System.Nullable<int> _CollegeID;
		
		private string _Classification;
		
		private string _Remark;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<AwardWinner_Old> _AwardWinner_Olds;
		
		private EntityRef<Department_Old> _Department_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnRankChanging(string value);
    partial void OnRankChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnAttendTypeChanging(string value);
    partial void OnAttendTypeChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnIntroductionChanging(string value);
    partial void OnIntroductionChanged();
    partial void OnOldIDChanging(string value);
    partial void OnOldIDChanged();
    partial void OnAuthorisedUnitChanging(string value);
    partial void OnAuthorisedUnitChanged();
    partial void OnCollegeIDChanging(System.Nullable<int> value);
    partial void OnCollegeIDChanged();
    partial void OnClassificationChanging(string value);
    partial void OnClassificationChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Award_Old()
		{
			this._AwardWinner_Olds = new EntitySet<AwardWinner_Old>(new Action<AwardWinner_Old>(this.attach_AwardWinner_Olds), new Action<AwardWinner_Old>(this.detach_AwardWinner_Olds));
			this._Department_Old = default(EntityRef<Department_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Rank", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Column(Storage="_Class", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[Column(Storage="_AttendType", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AttendType
		{
			get
			{
				return this._AttendType;
			}
			set
			{
				if ((this._AttendType != value))
				{
					this.OnAttendTypeChanging(value);
					this.SendPropertyChanging();
					this._AttendType = value;
					this.SendPropertyChanged("AttendType");
					this.OnAttendTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[Column(Storage="_Introduction", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Introduction
		{
			get
			{
				return this._Introduction;
			}
			set
			{
				if ((this._Introduction != value))
				{
					this.OnIntroductionChanging(value);
					this.SendPropertyChanging();
					this._Introduction = value;
					this.SendPropertyChanged("Introduction");
					this.OnIntroductionChanged();
				}
			}
		}
		
		[Column(Storage="_OldID", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorisedUnit", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AuthorisedUnit
		{
			get
			{
				return this._AuthorisedUnit;
			}
			set
			{
				if ((this._AuthorisedUnit != value))
				{
					this.OnAuthorisedUnitChanging(value);
					this.SendPropertyChanging();
					this._AuthorisedUnit = value;
					this.SendPropertyChanged("AuthorisedUnit");
					this.OnAuthorisedUnitChanged();
				}
			}
		}
		
		[Column(Storage="_CollegeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CollegeID
		{
			get
			{
				return this._CollegeID;
			}
			set
			{
				if ((this._CollegeID != value))
				{
					if (this._Department_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollegeIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeID = value;
					this.SendPropertyChanged("CollegeID");
					this.OnCollegeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Classification", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Classification
		{
			get
			{
				return this._Classification;
			}
			set
			{
				if ((this._Classification != value))
				{
					this.OnClassificationChanging(value);
					this.SendPropertyChanging();
					this._Classification = value;
					this.SendPropertyChanged("Classification");
					this.OnClassificationChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Award_Old_AwardWinner_Old", Storage="_AwardWinner_Olds", ThisKey="ID", OtherKey="AwardID")]
		public EntitySet<AwardWinner_Old> AwardWinner_Olds
		{
			get
			{
				return this._AwardWinner_Olds;
			}
			set
			{
				this._AwardWinner_Olds.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Award_Old", Storage="_Department_Old", ThisKey="CollegeID", OtherKey="ID", IsForeignKey=true)]
		public Department_Old Department_Old
		{
			get
			{
				return this._Department_Old.Entity;
			}
			set
			{
				Department_Old previousValue = this._Department_Old.Entity;
				if (((previousValue != value) 
							|| (this._Department_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department_Old.Entity = null;
						previousValue.Award_Olds.Remove(this);
					}
					this._Department_Old.Entity = value;
					if ((value != null))
					{
						value.Award_Olds.Add(this);
						this._CollegeID = value.ID;
					}
					else
					{
						this._CollegeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AwardWinner_Olds(AwardWinner_Old entity)
		{
			this.SendPropertyChanging();
			entity.Award_Old = this;
		}
		
		private void detach_AwardWinner_Olds(AwardWinner_Old entity)
		{
			this.SendPropertyChanging();
			entity.Award_Old = null;
		}
	}
	
	[Table(Name="dbo.Patent")]
	public partial class Patent_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Number;
		
		private string _Name;
		
		private System.Nullable<int> _CollegeID;
		
		private System.Nullable<System.DateTime> _ApplicationDateTime;
		
		private System.Nullable<System.DateTime> _AuthorizeDateTime;
		
		private int _LawState;
		
		private System.Nullable<System.DateTime> _LawStateTime;
		
		private string _Country;
		
		private string _Category;
		
		private string _MainCategoryNumber;
		
		private string _AllCategoryNumber;
		
		private int _Type;
		
		private int _Level;
		
		private string _Introduction;
		
		private System.Nullable<int> _AgencyID;
		
		private string _Remark;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<PatentInventer_Old> _PatentInventer_Olds;
		
		private EntityRef<Department_Old> _Department_Old;
		
		private EntityRef<PatentAgency_Old> _PatentAgency_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCollegeIDChanging(System.Nullable<int> value);
    partial void OnCollegeIDChanged();
    partial void OnApplicationDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnApplicationDateTimeChanged();
    partial void OnAuthorizeDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAuthorizeDateTimeChanged();
    partial void OnLawStateChanging(int value);
    partial void OnLawStateChanged();
    partial void OnLawStateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLawStateTimeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnMainCategoryNumberChanging(string value);
    partial void OnMainCategoryNumberChanged();
    partial void OnAllCategoryNumberChanging(string value);
    partial void OnAllCategoryNumberChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnIntroductionChanging(string value);
    partial void OnIntroductionChanged();
    partial void OnAgencyIDChanging(System.Nullable<int> value);
    partial void OnAgencyIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Patent_Old()
		{
			this._PatentInventer_Olds = new EntitySet<PatentInventer_Old>(new Action<PatentInventer_Old>(this.attach_PatentInventer_Olds), new Action<PatentInventer_Old>(this.detach_PatentInventer_Olds));
			this._Department_Old = default(EntityRef<Department_Old>);
			this._PatentAgency_Old = default(EntityRef<PatentAgency_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CollegeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CollegeID
		{
			get
			{
				return this._CollegeID;
			}
			set
			{
				if ((this._CollegeID != value))
				{
					if (this._Department_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollegeIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeID = value;
					this.SendPropertyChanged("CollegeID");
					this.OnCollegeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ApplicationDateTime
		{
			get
			{
				return this._ApplicationDateTime;
			}
			set
			{
				if ((this._ApplicationDateTime != value))
				{
					this.OnApplicationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ApplicationDateTime = value;
					this.SendPropertyChanged("ApplicationDateTime");
					this.OnApplicationDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizeDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AuthorizeDateTime
		{
			get
			{
				return this._AuthorizeDateTime;
			}
			set
			{
				if ((this._AuthorizeDateTime != value))
				{
					this.OnAuthorizeDateTimeChanging(value);
					this.SendPropertyChanging();
					this._AuthorizeDateTime = value;
					this.SendPropertyChanged("AuthorizeDateTime");
					this.OnAuthorizeDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LawState", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LawState
		{
			get
			{
				return this._LawState;
			}
			set
			{
				if ((this._LawState != value))
				{
					this.OnLawStateChanging(value);
					this.SendPropertyChanging();
					this._LawState = value;
					this.SendPropertyChanged("LawState");
					this.OnLawStateChanged();
				}
			}
		}
		
		[Column(Storage="_LawStateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LawStateTime
		{
			get
			{
				return this._LawStateTime;
			}
			set
			{
				if ((this._LawStateTime != value))
				{
					this.OnLawStateTimeChanging(value);
					this.SendPropertyChanging();
					this._LawStateTime = value;
					this.SendPropertyChanged("LawStateTime");
					this.OnLawStateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_MainCategoryNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string MainCategoryNumber
		{
			get
			{
				return this._MainCategoryNumber;
			}
			set
			{
				if ((this._MainCategoryNumber != value))
				{
					this.OnMainCategoryNumberChanging(value);
					this.SendPropertyChanging();
					this._MainCategoryNumber = value;
					this.SendPropertyChanged("MainCategoryNumber");
					this.OnMainCategoryNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AllCategoryNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string AllCategoryNumber
		{
			get
			{
				return this._AllCategoryNumber;
			}
			set
			{
				if ((this._AllCategoryNumber != value))
				{
					this.OnAllCategoryNumberChanging(value);
					this.SendPropertyChanging();
					this._AllCategoryNumber = value;
					this.SendPropertyChanged("AllCategoryNumber");
					this.OnAllCategoryNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Introduction", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Introduction
		{
			get
			{
				return this._Introduction;
			}
			set
			{
				if ((this._Introduction != value))
				{
					this.OnIntroductionChanging(value);
					this.SendPropertyChanging();
					this._Introduction = value;
					this.SendPropertyChanged("Introduction");
					this.OnIntroductionChanged();
				}
			}
		}
		
		[Column(Storage="_AgencyID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AgencyID
		{
			get
			{
				return this._AgencyID;
			}
			set
			{
				if ((this._AgencyID != value))
				{
					if (this._PatentAgency_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._AgencyID = value;
					this.SendPropertyChanged("AgencyID");
					this.OnAgencyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Patent_Old_PatentInventer_Old", Storage="_PatentInventer_Olds", ThisKey="ID", OtherKey="PatentID")]
		public EntitySet<PatentInventer_Old> PatentInventer_Olds
		{
			get
			{
				return this._PatentInventer_Olds;
			}
			set
			{
				this._PatentInventer_Olds.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Patent_Old", Storage="_Department_Old", ThisKey="CollegeID", OtherKey="ID", IsForeignKey=true)]
		public Department_Old Department_Old
		{
			get
			{
				return this._Department_Old.Entity;
			}
			set
			{
				Department_Old previousValue = this._Department_Old.Entity;
				if (((previousValue != value) 
							|| (this._Department_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department_Old.Entity = null;
						previousValue.Patent_Olds.Remove(this);
					}
					this._Department_Old.Entity = value;
					if ((value != null))
					{
						value.Patent_Olds.Add(this);
						this._CollegeID = value.ID;
					}
					else
					{
						this._CollegeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department_Old");
				}
			}
		}
		
		[Association(Name="PatentAgency_Old_Patent_Old", Storage="_PatentAgency_Old", ThisKey="AgencyID", OtherKey="ID", IsForeignKey=true)]
		public PatentAgency_Old PatentAgency_Old
		{
			get
			{
				return this._PatentAgency_Old.Entity;
			}
			set
			{
				PatentAgency_Old previousValue = this._PatentAgency_Old.Entity;
				if (((previousValue != value) 
							|| (this._PatentAgency_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatentAgency_Old.Entity = null;
						previousValue.Patent_Olds.Remove(this);
					}
					this._PatentAgency_Old.Entity = value;
					if ((value != null))
					{
						value.Patent_Olds.Add(this);
						this._AgencyID = value.ID;
					}
					else
					{
						this._AgencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PatentAgency_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatentInventer_Olds(PatentInventer_Old entity)
		{
			this.SendPropertyChanging();
			entity.Patent_Old = this;
		}
		
		private void detach_PatentInventer_Olds(PatentInventer_Old entity)
		{
			this.SendPropertyChanging();
			entity.Patent_Old = null;
		}
	}
	
	[Table(Name="dbo.PatentAgency")]
	public partial class PatentAgency_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Agent;
		
		private string _Contract;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Patent_Old> _Patent_Olds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAgentChanging(string value);
    partial void OnAgentChanged();
    partial void OnContractChanging(string value);
    partial void OnContractChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public PatentAgency_Old()
		{
			this._Patent_Olds = new EntitySet<Patent_Old>(new Action<Patent_Old>(this.attach_Patent_Olds), new Action<Patent_Old>(this.detach_Patent_Olds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Agent", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Agent
		{
			get
			{
				return this._Agent;
			}
			set
			{
				if ((this._Agent != value))
				{
					this.OnAgentChanging(value);
					this.SendPropertyChanging();
					this._Agent = value;
					this.SendPropertyChanged("Agent");
					this.OnAgentChanged();
				}
			}
		}
		
		[Column(Storage="_Contract", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				if ((this._Contract != value))
				{
					this.OnContractChanging(value);
					this.SendPropertyChanging();
					this._Contract = value;
					this.SendPropertyChanged("Contract");
					this.OnContractChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="PatentAgency_Old_Patent_Old", Storage="_Patent_Olds", ThisKey="ID", OtherKey="AgencyID")]
		public EntitySet<Patent_Old> Patent_Olds
		{
			get
			{
				return this._Patent_Olds;
			}
			set
			{
				this._Patent_Olds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patent_Olds(Patent_Old entity)
		{
			this.SendPropertyChanging();
			entity.PatentAgency_Old = this;
		}
		
		private void detach_Patent_Olds(Patent_Old entity)
		{
			this.SendPropertyChanging();
			entity.PatentAgency_Old = null;
		}
	}
	
	[Table(Name="dbo.PatentInventer")]
	public partial class PatentInventer_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PatentID;
		
		private System.Nullable<int> _ExpertID;
		
		private string _Name;
		
		private int _Order;
		
		private bool _IsPrincipal;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Expert_Old> _Expert_Old;
		
		private EntityRef<Patent_Old> _Patent_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatentIDChanging(int value);
    partial void OnPatentIDChanged();
    partial void OnExpertIDChanging(System.Nullable<int> value);
    partial void OnExpertIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnIsPrincipalChanging(bool value);
    partial void OnIsPrincipalChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public PatentInventer_Old()
		{
			this._Expert_Old = default(EntityRef<Expert_Old>);
			this._Patent_Old = default(EntityRef<Patent_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PatentID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PatentID
		{
			get
			{
				return this._PatentID;
			}
			set
			{
				if ((this._PatentID != value))
				{
					if (this._Patent_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatentIDChanging(value);
					this.SendPropertyChanging();
					this._PatentID = value;
					this.SendPropertyChanged("PatentID");
					this.OnPatentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ExpertID
		{
			get
			{
				return this._ExpertID;
			}
			set
			{
				if ((this._ExpertID != value))
				{
					if (this._Expert_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpertIDChanging(value);
					this.SendPropertyChanging();
					this._ExpertID = value;
					this.SendPropertyChanged("ExpertID");
					this.OnExpertIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsPrincipal", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPrincipal
		{
			get
			{
				return this._IsPrincipal;
			}
			set
			{
				if ((this._IsPrincipal != value))
				{
					this.OnIsPrincipalChanging(value);
					this.SendPropertyChanging();
					this._IsPrincipal = value;
					this.SendPropertyChanged("IsPrincipal");
					this.OnIsPrincipalChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Expert_Old_PatentInventer_Old", Storage="_Expert_Old", ThisKey="ExpertID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert_Old
		{
			get
			{
				return this._Expert_Old.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert_Old.Entity;
				if (((previousValue != value) 
							|| (this._Expert_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert_Old.Entity = null;
						previousValue.PatentInventer_Olds.Remove(this);
					}
					this._Expert_Old.Entity = value;
					if ((value != null))
					{
						value.PatentInventer_Olds.Add(this);
						this._ExpertID = value.ID;
					}
					else
					{
						this._ExpertID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert_Old");
				}
			}
		}
		
		[Association(Name="Patent_Old_PatentInventer_Old", Storage="_Patent_Old", ThisKey="PatentID", OtherKey="ID", IsForeignKey=true)]
		public Patent_Old Patent_Old
		{
			get
			{
				return this._Patent_Old.Entity;
			}
			set
			{
				Patent_Old previousValue = this._Patent_Old.Entity;
				if (((previousValue != value) 
							|| (this._Patent_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patent_Old.Entity = null;
						previousValue.PatentInventer_Olds.Remove(this);
					}
					this._Patent_Old.Entity = value;
					if ((value != null))
					{
						value.PatentInventer_Olds.Add(this);
						this._PatentID = value.ID;
					}
					else
					{
						this._PatentID = default(int);
					}
					this.SendPropertyChanged("Patent_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Paper")]
	public partial class Paper_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _MagazineID;
		
		private int _Type;
		
		private System.Nullable<int> _CiteFrequency;
		
		private System.Nullable<int> _PublishDateYear;
		
		private string _PublishDate;
		
		private string _DocumentNumber;
		
		private string _Volume;
		
		private System.Nullable<int> _StartPage;
		
		private System.Nullable<int> _EndPage;
		
		private System.Nullable<int> _Pages;
		
		private System.Nullable<int> _InfluenceFactor;
		
		private string _AuthorKeyWord;
		
		private string _KeyWord;
		
		private string _Abstract;
		
		private string _LinkManAddress;
		
		private string _LinkManEmail;
		
		private int _LinkManSignUnit;
		
		private int _FirstAuthorSignUnit;
		
		private System.Nullable<int> _SignOrder;
		
		private System.Nullable<int> _CollegeID;
		
		private string _Lab;
		
		private string _Remark;
		
		private string _ISIUniqueArticleIdentifier;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<PaperAuthor_Old> _PaperAuthor_Olds;
		
		private EntitySet<PaperIndexed_Old> _PaperIndexed_Olds;
		
		private EntityRef<Department_Old> _Department_Old;
		
		private EntityRef<Magazine_Old> _Magazine_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMagazineIDChanging(System.Nullable<int> value);
    partial void OnMagazineIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnCiteFrequencyChanging(System.Nullable<int> value);
    partial void OnCiteFrequencyChanged();
    partial void OnPublishDateYearChanging(System.Nullable<int> value);
    partial void OnPublishDateYearChanged();
    partial void OnPublishDateChanging(string value);
    partial void OnPublishDateChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnVolumeChanging(string value);
    partial void OnVolumeChanged();
    partial void OnStartPageChanging(System.Nullable<int> value);
    partial void OnStartPageChanged();
    partial void OnEndPageChanging(System.Nullable<int> value);
    partial void OnEndPageChanged();
    partial void OnPagesChanging(System.Nullable<int> value);
    partial void OnPagesChanged();
    partial void OnInfluenceFactorChanging(System.Nullable<int> value);
    partial void OnInfluenceFactorChanged();
    partial void OnAuthorKeyWordChanging(string value);
    partial void OnAuthorKeyWordChanged();
    partial void OnKeyWordChanging(string value);
    partial void OnKeyWordChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    partial void OnLinkManAddressChanging(string value);
    partial void OnLinkManAddressChanged();
    partial void OnLinkManEmailChanging(string value);
    partial void OnLinkManEmailChanged();
    partial void OnLinkManSignUnitChanging(int value);
    partial void OnLinkManSignUnitChanged();
    partial void OnFirstAuthorSignUnitChanging(int value);
    partial void OnFirstAuthorSignUnitChanged();
    partial void OnSignOrderChanging(System.Nullable<int> value);
    partial void OnSignOrderChanged();
    partial void OnCollegeIDChanging(System.Nullable<int> value);
    partial void OnCollegeIDChanged();
    partial void OnLabChanging(string value);
    partial void OnLabChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnISIUniqueArticleIdentifierChanging(string value);
    partial void OnISIUniqueArticleIdentifierChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Paper_Old()
		{
			this._PaperAuthor_Olds = new EntitySet<PaperAuthor_Old>(new Action<PaperAuthor_Old>(this.attach_PaperAuthor_Olds), new Action<PaperAuthor_Old>(this.detach_PaperAuthor_Olds));
			this._PaperIndexed_Olds = new EntitySet<PaperIndexed_Old>(new Action<PaperIndexed_Old>(this.attach_PaperIndexed_Olds), new Action<PaperIndexed_Old>(this.detach_PaperIndexed_Olds));
			this._Department_Old = default(EntityRef<Department_Old>);
			this._Magazine_Old = default(EntityRef<Magazine_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_MagazineID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MagazineID
		{
			get
			{
				return this._MagazineID;
			}
			set
			{
				if ((this._MagazineID != value))
				{
					if (this._Magazine_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMagazineIDChanging(value);
					this.SendPropertyChanging();
					this._MagazineID = value;
					this.SendPropertyChanged("MagazineID");
					this.OnMagazineIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CiteFrequency", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CiteFrequency
		{
			get
			{
				return this._CiteFrequency;
			}
			set
			{
				if ((this._CiteFrequency != value))
				{
					this.OnCiteFrequencyChanging(value);
					this.SendPropertyChanging();
					this._CiteFrequency = value;
					this.SendPropertyChanged("CiteFrequency");
					this.OnCiteFrequencyChanged();
				}
			}
		}
		
		[Column(Storage="_PublishDateYear", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PublishDateYear
		{
			get
			{
				return this._PublishDateYear;
			}
			set
			{
				if ((this._PublishDateYear != value))
				{
					this.OnPublishDateYearChanging(value);
					this.SendPropertyChanging();
					this._PublishDateYear = value;
					this.SendPropertyChanged("PublishDateYear");
					this.OnPublishDateYearChanged();
				}
			}
		}
		
		[Column(Storage="_PublishDate", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[Column(Storage="_DocumentNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_StartPage", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> StartPage
		{
			get
			{
				return this._StartPage;
			}
			set
			{
				if ((this._StartPage != value))
				{
					this.OnStartPageChanging(value);
					this.SendPropertyChanging();
					this._StartPage = value;
					this.SendPropertyChanged("StartPage");
					this.OnStartPageChanged();
				}
			}
		}
		
		[Column(Storage="_EndPage", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> EndPage
		{
			get
			{
				return this._EndPage;
			}
			set
			{
				if ((this._EndPage != value))
				{
					this.OnEndPageChanging(value);
					this.SendPropertyChanging();
					this._EndPage = value;
					this.SendPropertyChanged("EndPage");
					this.OnEndPageChanged();
				}
			}
		}
		
		[Column(Storage="_Pages", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[Column(Storage="_InfluenceFactor", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> InfluenceFactor
		{
			get
			{
				return this._InfluenceFactor;
			}
			set
			{
				if ((this._InfluenceFactor != value))
				{
					this.OnInfluenceFactorChanging(value);
					this.SendPropertyChanging();
					this._InfluenceFactor = value;
					this.SendPropertyChanged("InfluenceFactor");
					this.OnInfluenceFactorChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorKeyWord", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string AuthorKeyWord
		{
			get
			{
				return this._AuthorKeyWord;
			}
			set
			{
				if ((this._AuthorKeyWord != value))
				{
					this.OnAuthorKeyWordChanging(value);
					this.SendPropertyChanging();
					this._AuthorKeyWord = value;
					this.SendPropertyChanged("AuthorKeyWord");
					this.OnAuthorKeyWordChanged();
				}
			}
		}
		
		[Column(Storage="_KeyWord", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string KeyWord
		{
			get
			{
				return this._KeyWord;
			}
			set
			{
				if ((this._KeyWord != value))
				{
					this.OnKeyWordChanging(value);
					this.SendPropertyChanging();
					this._KeyWord = value;
					this.SendPropertyChanged("KeyWord");
					this.OnKeyWordChanged();
				}
			}
		}
		
		[Column(Storage="_Abstract", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[Column(Storage="_LinkManAddress", DbType="NVarChar(4000)", UpdateCheck=UpdateCheck.Never)]
		public string LinkManAddress
		{
			get
			{
				return this._LinkManAddress;
			}
			set
			{
				if ((this._LinkManAddress != value))
				{
					this.OnLinkManAddressChanging(value);
					this.SendPropertyChanging();
					this._LinkManAddress = value;
					this.SendPropertyChanged("LinkManAddress");
					this.OnLinkManAddressChanged();
				}
			}
		}
		
		[Column(Storage="_LinkManEmail", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string LinkManEmail
		{
			get
			{
				return this._LinkManEmail;
			}
			set
			{
				if ((this._LinkManEmail != value))
				{
					this.OnLinkManEmailChanging(value);
					this.SendPropertyChanging();
					this._LinkManEmail = value;
					this.SendPropertyChanged("LinkManEmail");
					this.OnLinkManEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LinkManSignUnit", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LinkManSignUnit
		{
			get
			{
				return this._LinkManSignUnit;
			}
			set
			{
				if ((this._LinkManSignUnit != value))
				{
					this.OnLinkManSignUnitChanging(value);
					this.SendPropertyChanging();
					this._LinkManSignUnit = value;
					this.SendPropertyChanged("LinkManSignUnit");
					this.OnLinkManSignUnitChanged();
				}
			}
		}
		
		[Column(Storage="_FirstAuthorSignUnit", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FirstAuthorSignUnit
		{
			get
			{
				return this._FirstAuthorSignUnit;
			}
			set
			{
				if ((this._FirstAuthorSignUnit != value))
				{
					this.OnFirstAuthorSignUnitChanging(value);
					this.SendPropertyChanging();
					this._FirstAuthorSignUnit = value;
					this.SendPropertyChanged("FirstAuthorSignUnit");
					this.OnFirstAuthorSignUnitChanged();
				}
			}
		}
		
		[Column(Storage="_SignOrder", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SignOrder
		{
			get
			{
				return this._SignOrder;
			}
			set
			{
				if ((this._SignOrder != value))
				{
					this.OnSignOrderChanging(value);
					this.SendPropertyChanging();
					this._SignOrder = value;
					this.SendPropertyChanged("SignOrder");
					this.OnSignOrderChanged();
				}
			}
		}
		
		[Column(Storage="_CollegeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CollegeID
		{
			get
			{
				return this._CollegeID;
			}
			set
			{
				if ((this._CollegeID != value))
				{
					if (this._Department_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCollegeIDChanging(value);
					this.SendPropertyChanging();
					this._CollegeID = value;
					this.SendPropertyChanged("CollegeID");
					this.OnCollegeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Lab", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Lab
		{
			get
			{
				return this._Lab;
			}
			set
			{
				if ((this._Lab != value))
				{
					this.OnLabChanging(value);
					this.SendPropertyChanging();
					this._Lab = value;
					this.SendPropertyChanged("Lab");
					this.OnLabChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_ISIUniqueArticleIdentifier", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ISIUniqueArticleIdentifier
		{
			get
			{
				return this._ISIUniqueArticleIdentifier;
			}
			set
			{
				if ((this._ISIUniqueArticleIdentifier != value))
				{
					this.OnISIUniqueArticleIdentifierChanging(value);
					this.SendPropertyChanging();
					this._ISIUniqueArticleIdentifier = value;
					this.SendPropertyChanged("ISIUniqueArticleIdentifier");
					this.OnISIUniqueArticleIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Paper_Old_PaperAuthor_Old", Storage="_PaperAuthor_Olds", ThisKey="ID", OtherKey="PaperID")]
		public EntitySet<PaperAuthor_Old> PaperAuthor_Olds
		{
			get
			{
				return this._PaperAuthor_Olds;
			}
			set
			{
				this._PaperAuthor_Olds.Assign(value);
			}
		}
		
		[Association(Name="Paper_Old_PaperIndexed_Old", Storage="_PaperIndexed_Olds", ThisKey="ID", OtherKey="PaperID")]
		public EntitySet<PaperIndexed_Old> PaperIndexed_Olds
		{
			get
			{
				return this._PaperIndexed_Olds;
			}
			set
			{
				this._PaperIndexed_Olds.Assign(value);
			}
		}
		
		[Association(Name="Department_Old_Paper_Old", Storage="_Department_Old", ThisKey="CollegeID", OtherKey="ID", IsForeignKey=true)]
		public Department_Old Department_Old
		{
			get
			{
				return this._Department_Old.Entity;
			}
			set
			{
				Department_Old previousValue = this._Department_Old.Entity;
				if (((previousValue != value) 
							|| (this._Department_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department_Old.Entity = null;
						previousValue.Paper_Olds.Remove(this);
					}
					this._Department_Old.Entity = value;
					if ((value != null))
					{
						value.Paper_Olds.Add(this);
						this._CollegeID = value.ID;
					}
					else
					{
						this._CollegeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department_Old");
				}
			}
		}
		
		[Association(Name="Magazine_Old_Paper_Old", Storage="_Magazine_Old", ThisKey="MagazineID", OtherKey="ID", IsForeignKey=true)]
		public Magazine_Old Magazine_Old
		{
			get
			{
				return this._Magazine_Old.Entity;
			}
			set
			{
				Magazine_Old previousValue = this._Magazine_Old.Entity;
				if (((previousValue != value) 
							|| (this._Magazine_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Magazine_Old.Entity = null;
						previousValue.Paper_Olds.Remove(this);
					}
					this._Magazine_Old.Entity = value;
					if ((value != null))
					{
						value.Paper_Olds.Add(this);
						this._MagazineID = value.ID;
					}
					else
					{
						this._MagazineID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Magazine_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaperAuthor_Olds(PaperAuthor_Old entity)
		{
			this.SendPropertyChanging();
			entity.Paper_Old = this;
		}
		
		private void detach_PaperAuthor_Olds(PaperAuthor_Old entity)
		{
			this.SendPropertyChanging();
			entity.Paper_Old = null;
		}
		
		private void attach_PaperIndexed_Olds(PaperIndexed_Old entity)
		{
			this.SendPropertyChanging();
			entity.Paper_Old = this;
		}
		
		private void detach_PaperIndexed_Olds(PaperIndexed_Old entity)
		{
			this.SendPropertyChanging();
			entity.Paper_Old = null;
		}
	}
	
	[Table(Name="dbo.PaperAuthor")]
	public partial class PaperAuthor_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _PaperID;
		
		private System.Nullable<int> _ExpertID;
		
		private string _NameSpell;
		
		private string _EnglishName;
		
		private int _Order;
		
		private bool _IsLinkMan;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Expert_Old> _Expert_Old;
		
		private EntityRef<Paper_Old> _Paper_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPaperIDChanging(int value);
    partial void OnPaperIDChanged();
    partial void OnExpertIDChanging(System.Nullable<int> value);
    partial void OnExpertIDChanged();
    partial void OnNameSpellChanging(string value);
    partial void OnNameSpellChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnIsLinkManChanging(bool value);
    partial void OnIsLinkManChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public PaperAuthor_Old()
		{
			this._Expert_Old = default(EntityRef<Expert_Old>);
			this._Paper_Old = default(EntityRef<Paper_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_PaperID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PaperID
		{
			get
			{
				return this._PaperID;
			}
			set
			{
				if ((this._PaperID != value))
				{
					if (this._Paper_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaperIDChanging(value);
					this.SendPropertyChanging();
					this._PaperID = value;
					this.SendPropertyChanged("PaperID");
					this.OnPaperIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExpertID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ExpertID
		{
			get
			{
				return this._ExpertID;
			}
			set
			{
				if ((this._ExpertID != value))
				{
					if (this._Expert_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpertIDChanging(value);
					this.SendPropertyChanging();
					this._ExpertID = value;
					this.SendPropertyChanged("ExpertID");
					this.OnExpertIDChanged();
				}
			}
		}
		
		[Column(Storage="_NameSpell", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string NameSpell
		{
			get
			{
				return this._NameSpell;
			}
			set
			{
				if ((this._NameSpell != value))
				{
					this.OnNameSpellChanging(value);
					this.SendPropertyChanging();
					this._NameSpell = value;
					this.SendPropertyChanged("NameSpell");
					this.OnNameSpellChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_IsLinkMan", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsLinkMan
		{
			get
			{
				return this._IsLinkMan;
			}
			set
			{
				if ((this._IsLinkMan != value))
				{
					this.OnIsLinkManChanging(value);
					this.SendPropertyChanging();
					this._IsLinkMan = value;
					this.SendPropertyChanged("IsLinkMan");
					this.OnIsLinkManChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Expert_Old_PaperAuthor_Old", Storage="_Expert_Old", ThisKey="ExpertID", OtherKey="ID", IsForeignKey=true)]
		public Expert_Old Expert_Old
		{
			get
			{
				return this._Expert_Old.Entity;
			}
			set
			{
				Expert_Old previousValue = this._Expert_Old.Entity;
				if (((previousValue != value) 
							|| (this._Expert_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expert_Old.Entity = null;
						previousValue.PaperAuthor_Olds.Remove(this);
					}
					this._Expert_Old.Entity = value;
					if ((value != null))
					{
						value.PaperAuthor_Olds.Add(this);
						this._ExpertID = value.ID;
					}
					else
					{
						this._ExpertID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expert_Old");
				}
			}
		}
		
		[Association(Name="Paper_Old_PaperAuthor_Old", Storage="_Paper_Old", ThisKey="PaperID", OtherKey="ID", IsForeignKey=true)]
		public Paper_Old Paper_Old
		{
			get
			{
				return this._Paper_Old.Entity;
			}
			set
			{
				Paper_Old previousValue = this._Paper_Old.Entity;
				if (((previousValue != value) 
							|| (this._Paper_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paper_Old.Entity = null;
						previousValue.PaperAuthor_Olds.Remove(this);
					}
					this._Paper_Old.Entity = value;
					if ((value != null))
					{
						value.PaperAuthor_Olds.Add(this);
						this._PaperID = value.ID;
					}
					else
					{
						this._PaperID = default(int);
					}
					this.SendPropertyChanged("Paper_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PaperInfo_Embody")]
	public partial class PaperIndexed_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PaperID;
		
		private int _Embody;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Paper_Old> _Paper_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPaperIDChanging(int value);
    partial void OnPaperIDChanged();
    partial void OnEmbodyChanging(int value);
    partial void OnEmbodyChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public PaperIndexed_Old()
		{
			this._Paper_Old = default(EntityRef<Paper_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PaperID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PaperID
		{
			get
			{
				return this._PaperID;
			}
			set
			{
				if ((this._PaperID != value))
				{
					if (this._Paper_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaperIDChanging(value);
					this.SendPropertyChanging();
					this._PaperID = value;
					this.SendPropertyChanged("PaperID");
					this.OnPaperIDChanged();
				}
			}
		}
		
		[Column(Storage="_Embody", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Embody
		{
			get
			{
				return this._Embody;
			}
			set
			{
				if ((this._Embody != value))
				{
					this.OnEmbodyChanging(value);
					this.SendPropertyChanging();
					this._Embody = value;
					this.SendPropertyChanged("Embody");
					this.OnEmbodyChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Paper_Old_PaperIndexed_Old", Storage="_Paper_Old", ThisKey="PaperID", OtherKey="ID", IsForeignKey=true)]
		public Paper_Old Paper_Old
		{
			get
			{
				return this._Paper_Old.Entity;
			}
			set
			{
				Paper_Old previousValue = this._Paper_Old.Entity;
				if (((previousValue != value) 
							|| (this._Paper_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paper_Old.Entity = null;
						previousValue.PaperIndexed_Olds.Remove(this);
					}
					this._Paper_Old.Entity = value;
					if ((value != null))
					{
						value.PaperIndexed_Olds.Add(this);
						this._PaperID = value.ID;
					}
					else
					{
						this._PaperID = default(int);
					}
					this.SendPropertyChanged("Paper_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MagazineSubjectClass")]
	public partial class MagazineSubjectClass_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MagazineID;
		
		private string _SubjectClass;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Magazine_Old> _Magazine_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMagazineIDChanging(int value);
    partial void OnMagazineIDChanged();
    partial void OnSubjectClassChanging(string value);
    partial void OnSubjectClassChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public MagazineSubjectClass_Old()
		{
			this._Magazine_Old = default(EntityRef<Magazine_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MagazineID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MagazineID
		{
			get
			{
				return this._MagazineID;
			}
			set
			{
				if ((this._MagazineID != value))
				{
					if (this._Magazine_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMagazineIDChanging(value);
					this.SendPropertyChanging();
					this._MagazineID = value;
					this.SendPropertyChanged("MagazineID");
					this.OnMagazineIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectClass", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SubjectClass
		{
			get
			{
				return this._SubjectClass;
			}
			set
			{
				if ((this._SubjectClass != value))
				{
					this.OnSubjectClassChanging(value);
					this.SendPropertyChanging();
					this._SubjectClass = value;
					this.SendPropertyChanged("SubjectClass");
					this.OnSubjectClassChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Magazine_Old_MagazineSubjectClass_Old", Storage="_Magazine_Old", ThisKey="MagazineID", OtherKey="ID", IsForeignKey=true)]
		public Magazine_Old Magazine_Old
		{
			get
			{
				return this._Magazine_Old.Entity;
			}
			set
			{
				Magazine_Old previousValue = this._Magazine_Old.Entity;
				if (((previousValue != value) 
							|| (this._Magazine_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Magazine_Old.Entity = null;
						previousValue.MagazineSubjectClass_Olds.Remove(this);
					}
					this._Magazine_Old.Entity = value;
					if ((value != null))
					{
						value.MagazineSubjectClass_Olds.Add(this);
						this._MagazineID = value.ID;
					}
					else
					{
						this._MagazineID = default(int);
					}
					this.SendPropertyChanged("Magazine_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magazine")]
	public partial class Magazine_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FullName;
		
		private string _ShortName;
		
		private string _ISSN;
		
		private string _SubjectRank;
		
		private int _PublishType;
		
		private int _Language;
		
		private string _PublishCompany;
		
		private string _PublishCompanyAddress;
		
		private string _PublishCompanyCity;
		
		private bool _IsDelete;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<Paper_Old> _Paper_Olds;
		
		private EntitySet<MagazineSubjectClass_Old> _MagazineSubjectClass_Olds;
		
		private EntitySet<MagazineInformation_Old> _MagazineInformation_Olds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnISSNChanging(string value);
    partial void OnISSNChanged();
    partial void OnSubjectRankChanging(string value);
    partial void OnSubjectRankChanged();
    partial void OnPublishTypeChanging(int value);
    partial void OnPublishTypeChanged();
    partial void OnLanguageChanging(int value);
    partial void OnLanguageChanged();
    partial void OnPublishCompanyChanging(string value);
    partial void OnPublishCompanyChanged();
    partial void OnPublishCompanyAddressChanging(string value);
    partial void OnPublishCompanyAddressChanged();
    partial void OnPublishCompanyCityChanging(string value);
    partial void OnPublishCompanyCityChanged();
    partial void OnIsDeleteChanging(bool value);
    partial void OnIsDeleteChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Magazine_Old()
		{
			this._Paper_Olds = new EntitySet<Paper_Old>(new Action<Paper_Old>(this.attach_Paper_Olds), new Action<Paper_Old>(this.detach_Paper_Olds));
			this._MagazineSubjectClass_Olds = new EntitySet<MagazineSubjectClass_Old>(new Action<MagazineSubjectClass_Old>(this.attach_MagazineSubjectClass_Olds), new Action<MagazineSubjectClass_Old>(this.detach_MagazineSubjectClass_Olds));
			this._MagazineInformation_Olds = new EntitySet<MagazineInformation_Old>(new Action<MagazineInformation_Old>(this.attach_MagazineInformation_Olds), new Action<MagazineInformation_Old>(this.detach_MagazineInformation_Olds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_ISSN", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ISSN
		{
			get
			{
				return this._ISSN;
			}
			set
			{
				if ((this._ISSN != value))
				{
					this.OnISSNChanging(value);
					this.SendPropertyChanging();
					this._ISSN = value;
					this.SendPropertyChanged("ISSN");
					this.OnISSNChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectRank", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SubjectRank
		{
			get
			{
				return this._SubjectRank;
			}
			set
			{
				if ((this._SubjectRank != value))
				{
					this.OnSubjectRankChanging(value);
					this.SendPropertyChanging();
					this._SubjectRank = value;
					this.SendPropertyChanged("SubjectRank");
					this.OnSubjectRankChanged();
				}
			}
		}
		
		[Column(Storage="_PublishType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PublishType
		{
			get
			{
				return this._PublishType;
			}
			set
			{
				if ((this._PublishType != value))
				{
					this.OnPublishTypeChanging(value);
					this.SendPropertyChanging();
					this._PublishType = value;
					this.SendPropertyChanged("PublishType");
					this.OnPublishTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Language", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[Column(Storage="_PublishCompany", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PublishCompany
		{
			get
			{
				return this._PublishCompany;
			}
			set
			{
				if ((this._PublishCompany != value))
				{
					this.OnPublishCompanyChanging(value);
					this.SendPropertyChanging();
					this._PublishCompany = value;
					this.SendPropertyChanged("PublishCompany");
					this.OnPublishCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_PublishCompanyAddress", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PublishCompanyAddress
		{
			get
			{
				return this._PublishCompanyAddress;
			}
			set
			{
				if ((this._PublishCompanyAddress != value))
				{
					this.OnPublishCompanyAddressChanging(value);
					this.SendPropertyChanging();
					this._PublishCompanyAddress = value;
					this.SendPropertyChanged("PublishCompanyAddress");
					this.OnPublishCompanyAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PublishCompanyCity", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PublishCompanyCity
		{
			get
			{
				return this._PublishCompanyCity;
			}
			set
			{
				if ((this._PublishCompanyCity != value))
				{
					this.OnPublishCompanyCityChanging(value);
					this.SendPropertyChanging();
					this._PublishCompanyCity = value;
					this.SendPropertyChanged("PublishCompanyCity");
					this.OnPublishCompanyCityChanged();
				}
			}
		}
		
		[Column(Storage="_IsDelete", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Magazine_Old_Paper_Old", Storage="_Paper_Olds", ThisKey="ID", OtherKey="MagazineID")]
		public EntitySet<Paper_Old> Paper_Olds
		{
			get
			{
				return this._Paper_Olds;
			}
			set
			{
				this._Paper_Olds.Assign(value);
			}
		}
		
		[Association(Name="Magazine_Old_MagazineSubjectClass_Old", Storage="_MagazineSubjectClass_Olds", ThisKey="ID", OtherKey="MagazineID")]
		public EntitySet<MagazineSubjectClass_Old> MagazineSubjectClass_Olds
		{
			get
			{
				return this._MagazineSubjectClass_Olds;
			}
			set
			{
				this._MagazineSubjectClass_Olds.Assign(value);
			}
		}
		
		[Association(Name="Magazine_Old_MagazineInformation_Old", Storage="_MagazineInformation_Olds", ThisKey="ID", OtherKey="MagazineID")]
		public EntitySet<MagazineInformation_Old> MagazineInformation_Olds
		{
			get
			{
				return this._MagazineInformation_Olds;
			}
			set
			{
				this._MagazineInformation_Olds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Paper_Olds(Paper_Old entity)
		{
			this.SendPropertyChanging();
			entity.Magazine_Old = this;
		}
		
		private void detach_Paper_Olds(Paper_Old entity)
		{
			this.SendPropertyChanging();
			entity.Magazine_Old = null;
		}
		
		private void attach_MagazineSubjectClass_Olds(MagazineSubjectClass_Old entity)
		{
			this.SendPropertyChanging();
			entity.Magazine_Old = this;
		}
		
		private void detach_MagazineSubjectClass_Olds(MagazineSubjectClass_Old entity)
		{
			this.SendPropertyChanging();
			entity.Magazine_Old = null;
		}
		
		private void attach_MagazineInformation_Olds(MagazineInformation_Old entity)
		{
			this.SendPropertyChanging();
			entity.Magazine_Old = this;
		}
		
		private void detach_MagazineInformation_Olds(MagazineInformation_Old entity)
		{
			this.SendPropertyChanging();
			entity.Magazine_Old = null;
		}
	}
	
	[Table(Name="dbo.MagazineInformation")]
	public partial class MagazineInformation_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MagazineID;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _SubAirer;
		
		private System.Nullable<int> _InfluenceFactor;
		
		private System.Nullable<int> _CiteFrequency;
		
		private System.Nullable<int> _InstantExponent;
		
		private System.Nullable<int> _PaperCount;
		
		private string _CiteHalfLife;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Magazine_Old> _Magazine_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMagazineIDChanging(int value);
    partial void OnMagazineIDChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnSubAirerChanging(System.Nullable<int> value);
    partial void OnSubAirerChanged();
    partial void OnInfluenceFactorChanging(System.Nullable<int> value);
    partial void OnInfluenceFactorChanged();
    partial void OnCiteFrequencyChanging(System.Nullable<int> value);
    partial void OnCiteFrequencyChanged();
    partial void OnInstantExponentChanging(System.Nullable<int> value);
    partial void OnInstantExponentChanged();
    partial void OnPaperCountChanging(System.Nullable<int> value);
    partial void OnPaperCountChanged();
    partial void OnCiteHalfLifeChanging(string value);
    partial void OnCiteHalfLifeChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public MagazineInformation_Old()
		{
			this._Magazine_Old = default(EntityRef<Magazine_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MagazineID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MagazineID
		{
			get
			{
				return this._MagazineID;
			}
			set
			{
				if ((this._MagazineID != value))
				{
					if (this._Magazine_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMagazineIDChanging(value);
					this.SendPropertyChanging();
					this._MagazineID = value;
					this.SendPropertyChanged("MagazineID");
					this.OnMagazineIDChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_SubAirer", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SubAirer
		{
			get
			{
				return this._SubAirer;
			}
			set
			{
				if ((this._SubAirer != value))
				{
					this.OnSubAirerChanging(value);
					this.SendPropertyChanging();
					this._SubAirer = value;
					this.SendPropertyChanged("SubAirer");
					this.OnSubAirerChanged();
				}
			}
		}
		
		[Column(Storage="_InfluenceFactor", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> InfluenceFactor
		{
			get
			{
				return this._InfluenceFactor;
			}
			set
			{
				if ((this._InfluenceFactor != value))
				{
					this.OnInfluenceFactorChanging(value);
					this.SendPropertyChanging();
					this._InfluenceFactor = value;
					this.SendPropertyChanged("InfluenceFactor");
					this.OnInfluenceFactorChanged();
				}
			}
		}
		
		[Column(Storage="_CiteFrequency", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CiteFrequency
		{
			get
			{
				return this._CiteFrequency;
			}
			set
			{
				if ((this._CiteFrequency != value))
				{
					this.OnCiteFrequencyChanging(value);
					this.SendPropertyChanging();
					this._CiteFrequency = value;
					this.SendPropertyChanged("CiteFrequency");
					this.OnCiteFrequencyChanged();
				}
			}
		}
		
		[Column(Storage="_InstantExponent", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> InstantExponent
		{
			get
			{
				return this._InstantExponent;
			}
			set
			{
				if ((this._InstantExponent != value))
				{
					this.OnInstantExponentChanging(value);
					this.SendPropertyChanging();
					this._InstantExponent = value;
					this.SendPropertyChanged("InstantExponent");
					this.OnInstantExponentChanged();
				}
			}
		}
		
		[Column(Storage="_PaperCount", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PaperCount
		{
			get
			{
				return this._PaperCount;
			}
			set
			{
				if ((this._PaperCount != value))
				{
					this.OnPaperCountChanging(value);
					this.SendPropertyChanging();
					this._PaperCount = value;
					this.SendPropertyChanged("PaperCount");
					this.OnPaperCountChanged();
				}
			}
		}
		
		[Column(Storage="_CiteHalfLife", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string CiteHalfLife
		{
			get
			{
				return this._CiteHalfLife;
			}
			set
			{
				if ((this._CiteHalfLife != value))
				{
					this.OnCiteHalfLifeChanging(value);
					this.SendPropertyChanging();
					this._CiteHalfLife = value;
					this.SendPropertyChanged("CiteHalfLife");
					this.OnCiteHalfLifeChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Magazine_Old_MagazineInformation_Old", Storage="_Magazine_Old", ThisKey="MagazineID", OtherKey="ID", IsForeignKey=true)]
		public Magazine_Old Magazine_Old
		{
			get
			{
				return this._Magazine_Old.Entity;
			}
			set
			{
				Magazine_Old previousValue = this._Magazine_Old.Entity;
				if (((previousValue != value) 
							|| (this._Magazine_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Magazine_Old.Entity = null;
						previousValue.MagazineInformation_Olds.Remove(this);
					}
					this._Magazine_Old.Entity = value;
					if ((value != null))
					{
						value.MagazineInformation_Olds.Add(this);
						this._MagazineID = value.ID;
					}
					else
					{
						this._MagazineID = default(int);
					}
					this.SendPropertyChanged("Magazine_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Power")]
	public partial class Power_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Powers;
		
		private string _ProjectTypes;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<UserRole_Old> _UserRole_Olds;
		
		private EntitySet<User_Old> _User_Olds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPowersChanging(string value);
    partial void OnPowersChanged();
    partial void OnProjectTypesChanging(string value);
    partial void OnProjectTypesChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Power_Old()
		{
			this._UserRole_Olds = new EntitySet<UserRole_Old>(new Action<UserRole_Old>(this.attach_UserRole_Olds), new Action<UserRole_Old>(this.detach_UserRole_Olds));
			this._User_Olds = new EntitySet<User_Old>(new Action<User_Old>(this.attach_User_Olds), new Action<User_Old>(this.detach_User_Olds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Powers", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Powers
		{
			get
			{
				return this._Powers;
			}
			set
			{
				if ((this._Powers != value))
				{
					this.OnPowersChanging(value);
					this.SendPropertyChanging();
					this._Powers = value;
					this.SendPropertyChanged("Powers");
					this.OnPowersChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectTypes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ProjectTypes
		{
			get
			{
				return this._ProjectTypes;
			}
			set
			{
				if ((this._ProjectTypes != value))
				{
					this.OnProjectTypesChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypes = value;
					this.SendPropertyChanged("ProjectTypes");
					this.OnProjectTypesChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Power_Old_UserRole_Old", Storage="_UserRole_Olds", ThisKey="ID", OtherKey="PowerID")]
		public EntitySet<UserRole_Old> UserRole_Olds
		{
			get
			{
				return this._UserRole_Olds;
			}
			set
			{
				this._UserRole_Olds.Assign(value);
			}
		}
		
		[Association(Name="Power_Old_User_Old", Storage="_User_Olds", ThisKey="ID", OtherKey="PowerID")]
		public EntitySet<User_Old> User_Olds
		{
			get
			{
				return this._User_Olds;
			}
			set
			{
				this._User_Olds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRole_Olds(UserRole_Old entity)
		{
			this.SendPropertyChanging();
			entity.Power_Old = this;
		}
		
		private void detach_UserRole_Olds(UserRole_Old entity)
		{
			this.SendPropertyChanging();
			entity.Power_Old = null;
		}
		
		private void attach_User_Olds(User_Old entity)
		{
			this.SendPropertyChanging();
			entity.Power_Old = this;
		}
		
		private void detach_User_Olds(User_Old entity)
		{
			this.SendPropertyChanging();
			entity.Power_Old = null;
		}
	}
	
	[Table(Name="dbo.FinanceBak")]
	public partial class FinanceBak_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Description;
		
		private System.DateTime _ReceivedDate;
		
		private string _VoucherNumber;
		
		private long _Amount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReceivedDateChanging(System.DateTime value);
    partial void OnReceivedDateChanged();
    partial void OnVoucherNumberChanging(string value);
    partial void OnVoucherNumberChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    #endregion
		
		public FinanceBak_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_VoucherNumber", DbType="NVarChar(255)")]
		public string VoucherNumber
		{
			get
			{
				return this._VoucherNumber;
			}
			set
			{
				if ((this._VoucherNumber != value))
				{
					this.OnVoucherNumberChanging(value);
					this.SendPropertyChanging();
					this._VoucherNumber = value;
					this.SendPropertyChanged("VoucherNumber");
					this.OnVoucherNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL")]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Finance")]
	public partial class Finance_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SerialNumber;
		
		private string _Description;
		
		private System.DateTime _ReceivedDate;
		
		private string _VoucherNumber;
		
		private long _Amount;
		
		private long _DescendAmount;
		
		private bool _IsInvoiced;
		
		private string _InvoiceType;
		
		private string _InvoiceNumber;
		
		private System.Nullable<System.DateTime> _InvoiceTime;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<FundDescend_Old> _FundDescend_Olds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReceivedDateChanging(System.DateTime value);
    partial void OnReceivedDateChanged();
    partial void OnVoucherNumberChanging(string value);
    partial void OnVoucherNumberChanged();
    partial void OnAmountChanging(long value);
    partial void OnAmountChanged();
    partial void OnDescendAmountChanging(long value);
    partial void OnDescendAmountChanged();
    partial void OnIsInvoicedChanging(bool value);
    partial void OnIsInvoicedChanged();
    partial void OnInvoiceTypeChanging(string value);
    partial void OnInvoiceTypeChanged();
    partial void OnInvoiceNumberChanging(string value);
    partial void OnInvoiceNumberChanged();
    partial void OnInvoiceTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnInvoiceTimeChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Finance_Old()
		{
			this._FundDescend_Olds = new EntitySet<FundDescend_Old>(new Action<FundDescend_Old>(this.attach_FundDescend_Olds), new Action<FundDescend_Old>(this.detach_FundDescend_Olds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SerialNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_VoucherNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string VoucherNumber
		{
			get
			{
				return this._VoucherNumber;
			}
			set
			{
				if ((this._VoucherNumber != value))
				{
					this.OnVoucherNumberChanging(value);
					this.SendPropertyChanging();
					this._VoucherNumber = value;
					this.SendPropertyChanged("VoucherNumber");
					this.OnVoucherNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_DescendAmount", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long DescendAmount
		{
			get
			{
				return this._DescendAmount;
			}
			set
			{
				if ((this._DescendAmount != value))
				{
					this.OnDescendAmountChanging(value);
					this.SendPropertyChanging();
					this._DescendAmount = value;
					this.SendPropertyChanged("DescendAmount");
					this.OnDescendAmountChanged();
				}
			}
		}
		
		[Column(Storage="_IsInvoiced", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsInvoiced
		{
			get
			{
				return this._IsInvoiced;
			}
			set
			{
				if ((this._IsInvoiced != value))
				{
					this.OnIsInvoicedChanging(value);
					this.SendPropertyChanging();
					this._IsInvoiced = value;
					this.SendPropertyChanged("IsInvoiced");
					this.OnIsInvoicedChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceType", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string InvoiceType
		{
			get
			{
				return this._InvoiceType;
			}
			set
			{
				if ((this._InvoiceType != value))
				{
					this.OnInvoiceTypeChanging(value);
					this.SendPropertyChanging();
					this._InvoiceType = value;
					this.SendPropertyChanged("InvoiceType");
					this.OnInvoiceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNumber", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> InvoiceTime
		{
			get
			{
				return this._InvoiceTime;
			}
			set
			{
				if ((this._InvoiceTime != value))
				{
					this.OnInvoiceTimeChanging(value);
					this.SendPropertyChanging();
					this._InvoiceTime = value;
					this.SendPropertyChanged("InvoiceTime");
					this.OnInvoiceTimeChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Finance_Old_FundDescend_Old", Storage="_FundDescend_Olds", ThisKey="ID", OtherKey="FinanceID")]
		public EntitySet<FundDescend_Old> FundDescend_Olds
		{
			get
			{
				return this._FundDescend_Olds;
			}
			set
			{
				this._FundDescend_Olds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FundDescend_Olds(FundDescend_Old entity)
		{
			this.SendPropertyChanging();
			entity.Finance_Old = this;
		}
		
		private void detach_FundDescend_Olds(FundDescend_Old entity)
		{
			this.SendPropertyChanging();
			entity.Finance_Old = null;
		}
	}
	
	[Table(Name="dbo.ProjectSupportCategory")]
	public partial class ProjectSupportCategory_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectTypeID;
		
		private string _Name;
		
		private bool _IsGetOverheadExpense;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<ProjectInfo_Type_Old> _ProjectInfo_Type_Olds;
		
		private EntityRef<ProjectType_Old> _ProjectType_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectTypeIDChanging(int value);
    partial void OnProjectTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsGetOverheadExpenseChanging(bool value);
    partial void OnIsGetOverheadExpenseChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectSupportCategory_Old()
		{
			this._ProjectInfo_Type_Olds = new EntitySet<ProjectInfo_Type_Old>(new Action<ProjectInfo_Type_Old>(this.attach_ProjectInfo_Type_Olds), new Action<ProjectInfo_Type_Old>(this.detach_ProjectInfo_Type_Olds));
			this._ProjectType_Old = default(EntityRef<ProjectType_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectTypeID
		{
			get
			{
				return this._ProjectTypeID;
			}
			set
			{
				if ((this._ProjectTypeID != value))
				{
					if (this._ProjectType_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypeID = value;
					this.SendPropertyChanged("ProjectTypeID");
					this.OnProjectTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsGetOverheadExpense", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsGetOverheadExpense
		{
			get
			{
				return this._IsGetOverheadExpense;
			}
			set
			{
				if ((this._IsGetOverheadExpense != value))
				{
					this.OnIsGetOverheadExpenseChanging(value);
					this.SendPropertyChanging();
					this._IsGetOverheadExpense = value;
					this.SendPropertyChanged("IsGetOverheadExpense");
					this.OnIsGetOverheadExpenseChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectSupportCategory_Old_ProjectInfo_Type_Old", Storage="_ProjectInfo_Type_Olds", ThisKey="ID", OtherKey="SupportCategoryID")]
		public EntitySet<ProjectInfo_Type_Old> ProjectInfo_Type_Olds
		{
			get
			{
				return this._ProjectInfo_Type_Olds;
			}
			set
			{
				this._ProjectInfo_Type_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectType_Old_ProjectSupportCategory_Old", Storage="_ProjectType_Old", ThisKey="ProjectTypeID", OtherKey="ID", IsForeignKey=true)]
		public ProjectType_Old ProjectType_Old
		{
			get
			{
				return this._ProjectType_Old.Entity;
			}
			set
			{
				ProjectType_Old previousValue = this._ProjectType_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectType_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectType_Old.Entity = null;
						previousValue.ProjectSupportCategory_Olds.Remove(this);
					}
					this._ProjectType_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectSupportCategory_Olds.Add(this);
						this._ProjectTypeID = value.ID;
					}
					else
					{
						this._ProjectTypeID = default(int);
					}
					this.SendPropertyChanged("ProjectType_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectInfo_Type_Olds(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportCategory_Old = this;
		}
		
		private void detach_ProjectInfo_Type_Olds(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectSupportCategory_Old = null;
		}
	}
	
	[Table(Name="dbo.ProjectType")]
	public partial class ProjectType_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectRankID;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _Administration;
		
		private string _Code;
		
		private string _BakCode;
		
		private string _PreCode;
		
		private bool _IsBudget;
		
		private System.Nullable<bool> _IsExploit;
		
		private int _ProjectComingFrom;
		
		private int _OverheadExpenseInRate;
		
		private int _OverheadExpenseOutRate;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntitySet<ProjectSupportField_Old> _ProjectSupportField_Olds;
		
		private EntitySet<ProjectInfo_Type_Old> _ProjectInfo_Type_Olds;
		
		private EntitySet<ProjectSupportCategory_Old> _ProjectSupportCategory_Olds;
		
		private EntityRef<ProjectRank_Old> _ProjectRank_Old;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectRankIDChanging(int value);
    partial void OnProjectRankIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnAdministrationChanging(string value);
    partial void OnAdministrationChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnBakCodeChanging(string value);
    partial void OnBakCodeChanged();
    partial void OnPreCodeChanging(string value);
    partial void OnPreCodeChanged();
    partial void OnIsBudgetChanging(bool value);
    partial void OnIsBudgetChanged();
    partial void OnIsExploitChanging(System.Nullable<bool> value);
    partial void OnIsExploitChanged();
    partial void OnProjectComingFromChanging(int value);
    partial void OnProjectComingFromChanged();
    partial void OnOverheadExpenseInRateChanging(int value);
    partial void OnOverheadExpenseInRateChanged();
    partial void OnOverheadExpenseOutRateChanging(int value);
    partial void OnOverheadExpenseOutRateChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProjectType_Old()
		{
			this._ProjectSupportField_Olds = new EntitySet<ProjectSupportField_Old>(new Action<ProjectSupportField_Old>(this.attach_ProjectSupportField_Olds), new Action<ProjectSupportField_Old>(this.detach_ProjectSupportField_Olds));
			this._ProjectInfo_Type_Olds = new EntitySet<ProjectInfo_Type_Old>(new Action<ProjectInfo_Type_Old>(this.attach_ProjectInfo_Type_Olds), new Action<ProjectInfo_Type_Old>(this.detach_ProjectInfo_Type_Olds));
			this._ProjectSupportCategory_Olds = new EntitySet<ProjectSupportCategory_Old>(new Action<ProjectSupportCategory_Old>(this.attach_ProjectSupportCategory_Olds), new Action<ProjectSupportCategory_Old>(this.detach_ProjectSupportCategory_Olds));
			this._ProjectRank_Old = default(EntityRef<ProjectRank_Old>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectRankID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectRankID
		{
			get
			{
				return this._ProjectRankID;
			}
			set
			{
				if ((this._ProjectRankID != value))
				{
					if (this._ProjectRank_Old.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectRankIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectRankID = value;
					this.SendPropertyChanged("ProjectRankID");
					this.OnProjectRankIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Administration", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Administration
		{
			get
			{
				return this._Administration;
			}
			set
			{
				if ((this._Administration != value))
				{
					this.OnAdministrationChanging(value);
					this.SendPropertyChanging();
					this._Administration = value;
					this.SendPropertyChanged("Administration");
					this.OnAdministrationChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BakCode", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string BakCode
		{
			get
			{
				return this._BakCode;
			}
			set
			{
				if ((this._BakCode != value))
				{
					this.OnBakCodeChanging(value);
					this.SendPropertyChanging();
					this._BakCode = value;
					this.SendPropertyChanged("BakCode");
					this.OnBakCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PreCode", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PreCode
		{
			get
			{
				return this._PreCode;
			}
			set
			{
				if ((this._PreCode != value))
				{
					this.OnPreCodeChanging(value);
					this.SendPropertyChanging();
					this._PreCode = value;
					this.SendPropertyChanged("PreCode");
					this.OnPreCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IsBudget", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsBudget
		{
			get
			{
				return this._IsBudget;
			}
			set
			{
				if ((this._IsBudget != value))
				{
					this.OnIsBudgetChanging(value);
					this.SendPropertyChanging();
					this._IsBudget = value;
					this.SendPropertyChanged("IsBudget");
					this.OnIsBudgetChanged();
				}
			}
		}
		
		[Column(Storage="_IsExploit", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsExploit
		{
			get
			{
				return this._IsExploit;
			}
			set
			{
				if ((this._IsExploit != value))
				{
					this.OnIsExploitChanging(value);
					this.SendPropertyChanging();
					this._IsExploit = value;
					this.SendPropertyChanged("IsExploit");
					this.OnIsExploitChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectComingFrom", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProjectComingFrom
		{
			get
			{
				return this._ProjectComingFrom;
			}
			set
			{
				if ((this._ProjectComingFrom != value))
				{
					this.OnProjectComingFromChanging(value);
					this.SendPropertyChanging();
					this._ProjectComingFrom = value;
					this.SendPropertyChanged("ProjectComingFrom");
					this.OnProjectComingFromChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseInRate", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OverheadExpenseInRate
		{
			get
			{
				return this._OverheadExpenseInRate;
			}
			set
			{
				if ((this._OverheadExpenseInRate != value))
				{
					this.OnOverheadExpenseInRateChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseInRate = value;
					this.SendPropertyChanged("OverheadExpenseInRate");
					this.OnOverheadExpenseInRateChanged();
				}
			}
		}
		
		[Column(Storage="_OverheadExpenseOutRate", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OverheadExpenseOutRate
		{
			get
			{
				return this._OverheadExpenseOutRate;
			}
			set
			{
				if ((this._OverheadExpenseOutRate != value))
				{
					this.OnOverheadExpenseOutRateChanging(value);
					this.SendPropertyChanging();
					this._OverheadExpenseOutRate = value;
					this.SendPropertyChanged("OverheadExpenseOutRate");
					this.OnOverheadExpenseOutRateChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="ProjectType_Old_ProjectSupportField_Old", Storage="_ProjectSupportField_Olds", ThisKey="ID", OtherKey="ProjectTypeID")]
		public EntitySet<ProjectSupportField_Old> ProjectSupportField_Olds
		{
			get
			{
				return this._ProjectSupportField_Olds;
			}
			set
			{
				this._ProjectSupportField_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectType_Old_ProjectInfo_Type_Old", Storage="_ProjectInfo_Type_Olds", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<ProjectInfo_Type_Old> ProjectInfo_Type_Olds
		{
			get
			{
				return this._ProjectInfo_Type_Olds;
			}
			set
			{
				this._ProjectInfo_Type_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectType_Old_ProjectSupportCategory_Old", Storage="_ProjectSupportCategory_Olds", ThisKey="ID", OtherKey="ProjectTypeID")]
		public EntitySet<ProjectSupportCategory_Old> ProjectSupportCategory_Olds
		{
			get
			{
				return this._ProjectSupportCategory_Olds;
			}
			set
			{
				this._ProjectSupportCategory_Olds.Assign(value);
			}
		}
		
		[Association(Name="ProjectRank_Old_ProjectType_Old", Storage="_ProjectRank_Old", ThisKey="ProjectRankID", OtherKey="ID", IsForeignKey=true)]
		public ProjectRank_Old ProjectRank_Old
		{
			get
			{
				return this._ProjectRank_Old.Entity;
			}
			set
			{
				ProjectRank_Old previousValue = this._ProjectRank_Old.Entity;
				if (((previousValue != value) 
							|| (this._ProjectRank_Old.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectRank_Old.Entity = null;
						previousValue.ProjectType_Olds.Remove(this);
					}
					this._ProjectRank_Old.Entity = value;
					if ((value != null))
					{
						value.ProjectType_Olds.Add(this);
						this._ProjectRankID = value.ID;
					}
					else
					{
						this._ProjectRankID = default(int);
					}
					this.SendPropertyChanged("ProjectRank_Old");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectSupportField_Olds(ProjectSupportField_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType_Old = this;
		}
		
		private void detach_ProjectSupportField_Olds(ProjectSupportField_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType_Old = null;
		}
		
		private void attach_ProjectInfo_Type_Olds(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType_Old = this;
		}
		
		private void detach_ProjectInfo_Type_Olds(ProjectInfo_Type_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType_Old = null;
		}
		
		private void attach_ProjectSupportCategory_Olds(ProjectSupportCategory_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType_Old = this;
		}
		
		private void detach_ProjectSupportCategory_Olds(ProjectSupportCategory_Old entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType_Old = null;
		}
	}
	
	[Table(Name="dbo.CE")]
	public partial class SubjectClassChineseEnglish_Old : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Chinese;
		
		private string _Enlish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChineseChanging(string value);
    partial void OnChineseChanged();
    partial void OnEnlishChanging(string value);
    partial void OnEnlishChanged();
    #endregion
		
		public SubjectClassChineseEnglish_Old()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Chinese", DbType="NVarChar(255)")]
		public string Chinese
		{
			get
			{
				return this._Chinese;
			}
			set
			{
				if ((this._Chinese != value))
				{
					this.OnChineseChanging(value);
					this.SendPropertyChanging();
					this._Chinese = value;
					this.SendPropertyChanged("Chinese");
					this.OnChineseChanged();
				}
			}
		}
		
		[Column(Storage="_Enlish", DbType="NVarChar(255)")]
		public string Enlish
		{
			get
			{
				return this._Enlish;
			}
			set
			{
				if ((this._Enlish != value))
				{
					this.OnEnlishChanging(value);
					this.SendPropertyChanging();
					this._Enlish = value;
					this.SendPropertyChanged("Enlish");
					this.OnEnlishChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
